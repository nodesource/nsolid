// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blocked_loop.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blocked_5floop_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blocked_5floop_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blocked_5floop_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blocked_5floop_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blocked_5floop_2eproto;
namespace grpcagent {
class BlockedLoop;
struct BlockedLoopDefaultTypeInternal;
extern BlockedLoopDefaultTypeInternal _BlockedLoop_default_instance_;
class BlockedLoopBody;
struct BlockedLoopBodyDefaultTypeInternal;
extern BlockedLoopBodyDefaultTypeInternal _BlockedLoopBody_default_instance_;
class Stack;
struct StackDefaultTypeInternal;
extern StackDefaultTypeInternal _Stack_default_instance_;
class UnblockedLoop;
struct UnblockedLoopDefaultTypeInternal;
extern UnblockedLoopDefaultTypeInternal _UnblockedLoop_default_instance_;
class UnblockedLoopBody;
struct UnblockedLoopBodyDefaultTypeInternal;
extern UnblockedLoopBodyDefaultTypeInternal _UnblockedLoopBody_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::BlockedLoop* Arena::CreateMaybeMessage<::grpcagent::BlockedLoop>(Arena*);
template<> ::grpcagent::BlockedLoopBody* Arena::CreateMaybeMessage<::grpcagent::BlockedLoopBody>(Arena*);
template<> ::grpcagent::Stack* Arena::CreateMaybeMessage<::grpcagent::Stack>(Arena*);
template<> ::grpcagent::UnblockedLoop* Arena::CreateMaybeMessage<::grpcagent::UnblockedLoop>(Arena*);
template<> ::grpcagent::UnblockedLoopBody* Arena::CreateMaybeMessage<::grpcagent::UnblockedLoopBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class Stack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Stack) */ {
 public:
  inline Stack() : Stack(nullptr) {}
  ~Stack() override;
  explicit PROTOBUF_CONSTEXPR Stack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stack(const Stack& from);
  Stack(Stack&& from) noexcept
    : Stack() {
    *this = ::std::move(from);
  }

  inline Stack& operator=(const Stack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stack& operator=(Stack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stack* internal_default_instance() {
    return reinterpret_cast<const Stack*>(
               &_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stack& a, Stack& b) {
    a.Swap(&b);
  }
  inline void Swap(Stack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stack& from) {
    Stack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Stack";
  }
  protected:
  explicit Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptNameFieldNumber = 2,
    kFunctionNameFieldNumber = 3,
    kIsEvalFieldNumber = 1,
    kLineNumberFieldNumber = 4,
    kColumnFieldNumber = 5,
  };
  // string script_name = 2;
  void clear_script_name();
  const std::string& script_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_name();
  PROTOBUF_NODISCARD std::string* release_script_name();
  void set_allocated_script_name(std::string* script_name);
  private:
  const std::string& _internal_script_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_name(const std::string& value);
  std::string* _internal_mutable_script_name();
  public:

  // string function_name = 3;
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // bool is_eval = 1;
  void clear_is_eval();
  bool is_eval() const;
  void set_is_eval(bool value);
  private:
  bool _internal_is_eval() const;
  void _internal_set_is_eval(bool value);
  public:

  // int32 line_number = 4;
  void clear_line_number();
  int32_t line_number() const;
  void set_line_number(int32_t value);
  private:
  int32_t _internal_line_number() const;
  void _internal_set_line_number(int32_t value);
  public:

  // int32 column = 5;
  void clear_column();
  int32_t column() const;
  void set_column(int32_t value);
  private:
  int32_t _internal_column() const;
  void _internal_set_column(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.Stack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
    bool is_eval_;
    int32_t line_number_;
    int32_t column_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blocked_5floop_2eproto;
};
// -------------------------------------------------------------------

class BlockedLoopBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.BlockedLoopBody) */ {
 public:
  inline BlockedLoopBody() : BlockedLoopBody(nullptr) {}
  ~BlockedLoopBody() override;
  explicit PROTOBUF_CONSTEXPR BlockedLoopBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockedLoopBody(const BlockedLoopBody& from);
  BlockedLoopBody(BlockedLoopBody&& from) noexcept
    : BlockedLoopBody() {
    *this = ::std::move(from);
  }

  inline BlockedLoopBody& operator=(const BlockedLoopBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockedLoopBody& operator=(BlockedLoopBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockedLoopBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockedLoopBody* internal_default_instance() {
    return reinterpret_cast<const BlockedLoopBody*>(
               &_BlockedLoopBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockedLoopBody& a, BlockedLoopBody& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockedLoopBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockedLoopBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockedLoopBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockedLoopBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockedLoopBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockedLoopBody& from) {
    BlockedLoopBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockedLoopBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.BlockedLoopBody";
  }
  protected:
  explicit BlockedLoopBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackFieldNumber = 4,
    kBlockedForFieldNumber = 1,
    kLoopIdFieldNumber = 2,
    kCallbackCntrFieldNumber = 3,
  };
  // repeated .grpcagent.Stack stack = 4;
  int stack_size() const;
  private:
  int _internal_stack_size() const;
  public:
  void clear_stack();
  ::grpcagent::Stack* mutable_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Stack >*
      mutable_stack();
  private:
  const ::grpcagent::Stack& _internal_stack(int index) const;
  ::grpcagent::Stack* _internal_add_stack();
  public:
  const ::grpcagent::Stack& stack(int index) const;
  ::grpcagent::Stack* add_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Stack >&
      stack() const;

  // int32 blocked_for = 1;
  void clear_blocked_for();
  int32_t blocked_for() const;
  void set_blocked_for(int32_t value);
  private:
  int32_t _internal_blocked_for() const;
  void _internal_set_blocked_for(int32_t value);
  public:

  // int32 loop_id = 2;
  void clear_loop_id();
  int32_t loop_id() const;
  void set_loop_id(int32_t value);
  private:
  int32_t _internal_loop_id() const;
  void _internal_set_loop_id(int32_t value);
  public:

  // int32 callback_cntr = 3;
  void clear_callback_cntr();
  int32_t callback_cntr() const;
  void set_callback_cntr(int32_t value);
  private:
  int32_t _internal_callback_cntr() const;
  void _internal_set_callback_cntr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.BlockedLoopBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Stack > stack_;
    int32_t blocked_for_;
    int32_t loop_id_;
    int32_t callback_cntr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blocked_5floop_2eproto;
};
// -------------------------------------------------------------------

class BlockedLoop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.BlockedLoop) */ {
 public:
  inline BlockedLoop() : BlockedLoop(nullptr) {}
  ~BlockedLoop() override;
  explicit PROTOBUF_CONSTEXPR BlockedLoop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockedLoop(const BlockedLoop& from);
  BlockedLoop(BlockedLoop&& from) noexcept
    : BlockedLoop() {
    *this = ::std::move(from);
  }

  inline BlockedLoop& operator=(const BlockedLoop& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockedLoop& operator=(BlockedLoop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockedLoop& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockedLoop* internal_default_instance() {
    return reinterpret_cast<const BlockedLoop*>(
               &_BlockedLoop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockedLoop& a, BlockedLoop& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockedLoop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockedLoop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockedLoop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockedLoop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockedLoop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockedLoop& from) {
    BlockedLoop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockedLoop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.BlockedLoop";
  }
  protected:
  explicit BlockedLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.BlockedLoopBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::BlockedLoopBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::BlockedLoopBody* release_body();
  ::grpcagent::BlockedLoopBody* mutable_body();
  void set_allocated_body(::grpcagent::BlockedLoopBody* body);
  private:
  const ::grpcagent::BlockedLoopBody& _internal_body() const;
  ::grpcagent::BlockedLoopBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::BlockedLoopBody* body);
  ::grpcagent::BlockedLoopBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.BlockedLoop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::BlockedLoopBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blocked_5floop_2eproto;
};
// -------------------------------------------------------------------

class UnblockedLoopBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.UnblockedLoopBody) */ {
 public:
  inline UnblockedLoopBody() : UnblockedLoopBody(nullptr) {}
  ~UnblockedLoopBody() override;
  explicit PROTOBUF_CONSTEXPR UnblockedLoopBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnblockedLoopBody(const UnblockedLoopBody& from);
  UnblockedLoopBody(UnblockedLoopBody&& from) noexcept
    : UnblockedLoopBody() {
    *this = ::std::move(from);
  }

  inline UnblockedLoopBody& operator=(const UnblockedLoopBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockedLoopBody& operator=(UnblockedLoopBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnblockedLoopBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnblockedLoopBody* internal_default_instance() {
    return reinterpret_cast<const UnblockedLoopBody*>(
               &_UnblockedLoopBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnblockedLoopBody& a, UnblockedLoopBody& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockedLoopBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnblockedLoopBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnblockedLoopBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnblockedLoopBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnblockedLoopBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnblockedLoopBody& from) {
    UnblockedLoopBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnblockedLoopBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.UnblockedLoopBody";
  }
  protected:
  explicit UnblockedLoopBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockedForFieldNumber = 1,
    kLoopIdFieldNumber = 2,
    kCallbackCntrFieldNumber = 3,
  };
  // int32 blocked_for = 1;
  void clear_blocked_for();
  int32_t blocked_for() const;
  void set_blocked_for(int32_t value);
  private:
  int32_t _internal_blocked_for() const;
  void _internal_set_blocked_for(int32_t value);
  public:

  // int32 loop_id = 2;
  void clear_loop_id();
  int32_t loop_id() const;
  void set_loop_id(int32_t value);
  private:
  int32_t _internal_loop_id() const;
  void _internal_set_loop_id(int32_t value);
  public:

  // int32 callback_cntr = 3;
  void clear_callback_cntr();
  int32_t callback_cntr() const;
  void set_callback_cntr(int32_t value);
  private:
  int32_t _internal_callback_cntr() const;
  void _internal_set_callback_cntr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.UnblockedLoopBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t blocked_for_;
    int32_t loop_id_;
    int32_t callback_cntr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blocked_5floop_2eproto;
};
// -------------------------------------------------------------------

class UnblockedLoop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.UnblockedLoop) */ {
 public:
  inline UnblockedLoop() : UnblockedLoop(nullptr) {}
  ~UnblockedLoop() override;
  explicit PROTOBUF_CONSTEXPR UnblockedLoop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnblockedLoop(const UnblockedLoop& from);
  UnblockedLoop(UnblockedLoop&& from) noexcept
    : UnblockedLoop() {
    *this = ::std::move(from);
  }

  inline UnblockedLoop& operator=(const UnblockedLoop& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockedLoop& operator=(UnblockedLoop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnblockedLoop& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnblockedLoop* internal_default_instance() {
    return reinterpret_cast<const UnblockedLoop*>(
               &_UnblockedLoop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnblockedLoop& a, UnblockedLoop& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockedLoop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnblockedLoop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnblockedLoop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnblockedLoop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnblockedLoop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnblockedLoop& from) {
    UnblockedLoop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnblockedLoop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.UnblockedLoop";
  }
  protected:
  explicit UnblockedLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.UnblockedLoopBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::UnblockedLoopBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::UnblockedLoopBody* release_body();
  ::grpcagent::UnblockedLoopBody* mutable_body();
  void set_allocated_body(::grpcagent::UnblockedLoopBody* body);
  private:
  const ::grpcagent::UnblockedLoopBody& _internal_body() const;
  ::grpcagent::UnblockedLoopBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::UnblockedLoopBody* body);
  ::grpcagent::UnblockedLoopBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.UnblockedLoop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::UnblockedLoopBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blocked_5floop_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stack

// bool is_eval = 1;
inline void Stack::clear_is_eval() {
  _impl_.is_eval_ = false;
}
inline bool Stack::_internal_is_eval() const {
  return _impl_.is_eval_;
}
inline bool Stack::is_eval() const {
  // @@protoc_insertion_point(field_get:grpcagent.Stack.is_eval)
  return _internal_is_eval();
}
inline void Stack::_internal_set_is_eval(bool value) {
  
  _impl_.is_eval_ = value;
}
inline void Stack::set_is_eval(bool value) {
  _internal_set_is_eval(value);
  // @@protoc_insertion_point(field_set:grpcagent.Stack.is_eval)
}

// string script_name = 2;
inline void Stack::clear_script_name() {
  _impl_.script_name_.ClearToEmpty();
}
inline const std::string& Stack::script_name() const {
  // @@protoc_insertion_point(field_get:grpcagent.Stack.script_name)
  return _internal_script_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stack::set_script_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Stack.script_name)
}
inline std::string* Stack::mutable_script_name() {
  std::string* _s = _internal_mutable_script_name();
  // @@protoc_insertion_point(field_mutable:grpcagent.Stack.script_name)
  return _s;
}
inline const std::string& Stack::_internal_script_name() const {
  return _impl_.script_name_.Get();
}
inline void Stack::_internal_set_script_name(const std::string& value) {
  
  _impl_.script_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stack::_internal_mutable_script_name() {
  
  return _impl_.script_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stack::release_script_name() {
  // @@protoc_insertion_point(field_release:grpcagent.Stack.script_name)
  return _impl_.script_name_.Release();
}
inline void Stack::set_allocated_script_name(std::string* script_name) {
  if (script_name != nullptr) {
    
  } else {
    
  }
  _impl_.script_name_.SetAllocated(script_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_name_.IsDefault()) {
    _impl_.script_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Stack.script_name)
}

// string function_name = 3;
inline void Stack::clear_function_name() {
  _impl_.function_name_.ClearToEmpty();
}
inline const std::string& Stack::function_name() const {
  // @@protoc_insertion_point(field_get:grpcagent.Stack.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stack::set_function_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.function_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Stack.function_name)
}
inline std::string* Stack::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:grpcagent.Stack.function_name)
  return _s;
}
inline const std::string& Stack::_internal_function_name() const {
  return _impl_.function_name_.Get();
}
inline void Stack::_internal_set_function_name(const std::string& value) {
  
  _impl_.function_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stack::_internal_mutable_function_name() {
  
  return _impl_.function_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stack::release_function_name() {
  // @@protoc_insertion_point(field_release:grpcagent.Stack.function_name)
  return _impl_.function_name_.Release();
}
inline void Stack::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  _impl_.function_name_.SetAllocated(function_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_name_.IsDefault()) {
    _impl_.function_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Stack.function_name)
}

// int32 line_number = 4;
inline void Stack::clear_line_number() {
  _impl_.line_number_ = 0;
}
inline int32_t Stack::_internal_line_number() const {
  return _impl_.line_number_;
}
inline int32_t Stack::line_number() const {
  // @@protoc_insertion_point(field_get:grpcagent.Stack.line_number)
  return _internal_line_number();
}
inline void Stack::_internal_set_line_number(int32_t value) {
  
  _impl_.line_number_ = value;
}
inline void Stack::set_line_number(int32_t value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:grpcagent.Stack.line_number)
}

// int32 column = 5;
inline void Stack::clear_column() {
  _impl_.column_ = 0;
}
inline int32_t Stack::_internal_column() const {
  return _impl_.column_;
}
inline int32_t Stack::column() const {
  // @@protoc_insertion_point(field_get:grpcagent.Stack.column)
  return _internal_column();
}
inline void Stack::_internal_set_column(int32_t value) {
  
  _impl_.column_ = value;
}
inline void Stack::set_column(int32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:grpcagent.Stack.column)
}

// -------------------------------------------------------------------

// BlockedLoopBody

// int32 blocked_for = 1;
inline void BlockedLoopBody::clear_blocked_for() {
  _impl_.blocked_for_ = 0;
}
inline int32_t BlockedLoopBody::_internal_blocked_for() const {
  return _impl_.blocked_for_;
}
inline int32_t BlockedLoopBody::blocked_for() const {
  // @@protoc_insertion_point(field_get:grpcagent.BlockedLoopBody.blocked_for)
  return _internal_blocked_for();
}
inline void BlockedLoopBody::_internal_set_blocked_for(int32_t value) {
  
  _impl_.blocked_for_ = value;
}
inline void BlockedLoopBody::set_blocked_for(int32_t value) {
  _internal_set_blocked_for(value);
  // @@protoc_insertion_point(field_set:grpcagent.BlockedLoopBody.blocked_for)
}

// int32 loop_id = 2;
inline void BlockedLoopBody::clear_loop_id() {
  _impl_.loop_id_ = 0;
}
inline int32_t BlockedLoopBody::_internal_loop_id() const {
  return _impl_.loop_id_;
}
inline int32_t BlockedLoopBody::loop_id() const {
  // @@protoc_insertion_point(field_get:grpcagent.BlockedLoopBody.loop_id)
  return _internal_loop_id();
}
inline void BlockedLoopBody::_internal_set_loop_id(int32_t value) {
  
  _impl_.loop_id_ = value;
}
inline void BlockedLoopBody::set_loop_id(int32_t value) {
  _internal_set_loop_id(value);
  // @@protoc_insertion_point(field_set:grpcagent.BlockedLoopBody.loop_id)
}

// int32 callback_cntr = 3;
inline void BlockedLoopBody::clear_callback_cntr() {
  _impl_.callback_cntr_ = 0;
}
inline int32_t BlockedLoopBody::_internal_callback_cntr() const {
  return _impl_.callback_cntr_;
}
inline int32_t BlockedLoopBody::callback_cntr() const {
  // @@protoc_insertion_point(field_get:grpcagent.BlockedLoopBody.callback_cntr)
  return _internal_callback_cntr();
}
inline void BlockedLoopBody::_internal_set_callback_cntr(int32_t value) {
  
  _impl_.callback_cntr_ = value;
}
inline void BlockedLoopBody::set_callback_cntr(int32_t value) {
  _internal_set_callback_cntr(value);
  // @@protoc_insertion_point(field_set:grpcagent.BlockedLoopBody.callback_cntr)
}

// repeated .grpcagent.Stack stack = 4;
inline int BlockedLoopBody::_internal_stack_size() const {
  return _impl_.stack_.size();
}
inline int BlockedLoopBody::stack_size() const {
  return _internal_stack_size();
}
inline void BlockedLoopBody::clear_stack() {
  _impl_.stack_.Clear();
}
inline ::grpcagent::Stack* BlockedLoopBody::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.BlockedLoopBody.stack)
  return _impl_.stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Stack >*
BlockedLoopBody::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.BlockedLoopBody.stack)
  return &_impl_.stack_;
}
inline const ::grpcagent::Stack& BlockedLoopBody::_internal_stack(int index) const {
  return _impl_.stack_.Get(index);
}
inline const ::grpcagent::Stack& BlockedLoopBody::stack(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.BlockedLoopBody.stack)
  return _internal_stack(index);
}
inline ::grpcagent::Stack* BlockedLoopBody::_internal_add_stack() {
  return _impl_.stack_.Add();
}
inline ::grpcagent::Stack* BlockedLoopBody::add_stack() {
  ::grpcagent::Stack* _add = _internal_add_stack();
  // @@protoc_insertion_point(field_add:grpcagent.BlockedLoopBody.stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Stack >&
BlockedLoopBody::stack() const {
  // @@protoc_insertion_point(field_list:grpcagent.BlockedLoopBody.stack)
  return _impl_.stack_;
}

// -------------------------------------------------------------------

// BlockedLoop

// .grpcagent.CommonResponse common = 1;
inline bool BlockedLoop::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool BlockedLoop::has_common() const {
  return _internal_has_common();
}
inline const ::grpcagent::CommonResponse& BlockedLoop::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& BlockedLoop::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.BlockedLoop.common)
  return _internal_common();
}
inline void BlockedLoop::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.BlockedLoop.common)
}
inline ::grpcagent::CommonResponse* BlockedLoop::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* BlockedLoop::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.BlockedLoop.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* BlockedLoop::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* BlockedLoop::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.BlockedLoop.common)
  return _msg;
}
inline void BlockedLoop::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common));
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.BlockedLoop.common)
}

// .grpcagent.BlockedLoopBody body = 2;
inline bool BlockedLoop::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool BlockedLoop::has_body() const {
  return _internal_has_body();
}
inline void BlockedLoop::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::BlockedLoopBody& BlockedLoop::_internal_body() const {
  const ::grpcagent::BlockedLoopBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::BlockedLoopBody&>(
      ::grpcagent::_BlockedLoopBody_default_instance_);
}
inline const ::grpcagent::BlockedLoopBody& BlockedLoop::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.BlockedLoop.body)
  return _internal_body();
}
inline void BlockedLoop::unsafe_arena_set_allocated_body(
    ::grpcagent::BlockedLoopBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.BlockedLoop.body)
}
inline ::grpcagent::BlockedLoopBody* BlockedLoop::release_body() {
  
  ::grpcagent::BlockedLoopBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::BlockedLoopBody* BlockedLoop::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.BlockedLoop.body)
  
  ::grpcagent::BlockedLoopBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::BlockedLoopBody* BlockedLoop::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::BlockedLoopBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::BlockedLoopBody* BlockedLoop::mutable_body() {
  ::grpcagent::BlockedLoopBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.BlockedLoop.body)
  return _msg;
}
inline void BlockedLoop::set_allocated_body(::grpcagent::BlockedLoopBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.BlockedLoop.body)
}

// -------------------------------------------------------------------

// UnblockedLoopBody

// int32 blocked_for = 1;
inline void UnblockedLoopBody::clear_blocked_for() {
  _impl_.blocked_for_ = 0;
}
inline int32_t UnblockedLoopBody::_internal_blocked_for() const {
  return _impl_.blocked_for_;
}
inline int32_t UnblockedLoopBody::blocked_for() const {
  // @@protoc_insertion_point(field_get:grpcagent.UnblockedLoopBody.blocked_for)
  return _internal_blocked_for();
}
inline void UnblockedLoopBody::_internal_set_blocked_for(int32_t value) {
  
  _impl_.blocked_for_ = value;
}
inline void UnblockedLoopBody::set_blocked_for(int32_t value) {
  _internal_set_blocked_for(value);
  // @@protoc_insertion_point(field_set:grpcagent.UnblockedLoopBody.blocked_for)
}

// int32 loop_id = 2;
inline void UnblockedLoopBody::clear_loop_id() {
  _impl_.loop_id_ = 0;
}
inline int32_t UnblockedLoopBody::_internal_loop_id() const {
  return _impl_.loop_id_;
}
inline int32_t UnblockedLoopBody::loop_id() const {
  // @@protoc_insertion_point(field_get:grpcagent.UnblockedLoopBody.loop_id)
  return _internal_loop_id();
}
inline void UnblockedLoopBody::_internal_set_loop_id(int32_t value) {
  
  _impl_.loop_id_ = value;
}
inline void UnblockedLoopBody::set_loop_id(int32_t value) {
  _internal_set_loop_id(value);
  // @@protoc_insertion_point(field_set:grpcagent.UnblockedLoopBody.loop_id)
}

// int32 callback_cntr = 3;
inline void UnblockedLoopBody::clear_callback_cntr() {
  _impl_.callback_cntr_ = 0;
}
inline int32_t UnblockedLoopBody::_internal_callback_cntr() const {
  return _impl_.callback_cntr_;
}
inline int32_t UnblockedLoopBody::callback_cntr() const {
  // @@protoc_insertion_point(field_get:grpcagent.UnblockedLoopBody.callback_cntr)
  return _internal_callback_cntr();
}
inline void UnblockedLoopBody::_internal_set_callback_cntr(int32_t value) {
  
  _impl_.callback_cntr_ = value;
}
inline void UnblockedLoopBody::set_callback_cntr(int32_t value) {
  _internal_set_callback_cntr(value);
  // @@protoc_insertion_point(field_set:grpcagent.UnblockedLoopBody.callback_cntr)
}

// -------------------------------------------------------------------

// UnblockedLoop

// .grpcagent.CommonResponse common = 1;
inline bool UnblockedLoop::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool UnblockedLoop::has_common() const {
  return _internal_has_common();
}
inline const ::grpcagent::CommonResponse& UnblockedLoop::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& UnblockedLoop::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.UnblockedLoop.common)
  return _internal_common();
}
inline void UnblockedLoop::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.UnblockedLoop.common)
}
inline ::grpcagent::CommonResponse* UnblockedLoop::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* UnblockedLoop::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.UnblockedLoop.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* UnblockedLoop::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* UnblockedLoop::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.UnblockedLoop.common)
  return _msg;
}
inline void UnblockedLoop::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common));
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.UnblockedLoop.common)
}

// .grpcagent.UnblockedLoopBody body = 2;
inline bool UnblockedLoop::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool UnblockedLoop::has_body() const {
  return _internal_has_body();
}
inline void UnblockedLoop::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::UnblockedLoopBody& UnblockedLoop::_internal_body() const {
  const ::grpcagent::UnblockedLoopBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::UnblockedLoopBody&>(
      ::grpcagent::_UnblockedLoopBody_default_instance_);
}
inline const ::grpcagent::UnblockedLoopBody& UnblockedLoop::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.UnblockedLoop.body)
  return _internal_body();
}
inline void UnblockedLoop::unsafe_arena_set_allocated_body(
    ::grpcagent::UnblockedLoopBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.UnblockedLoop.body)
}
inline ::grpcagent::UnblockedLoopBody* UnblockedLoop::release_body() {
  
  ::grpcagent::UnblockedLoopBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::UnblockedLoopBody* UnblockedLoop::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.UnblockedLoop.body)
  
  ::grpcagent::UnblockedLoopBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::UnblockedLoopBody* UnblockedLoop::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::UnblockedLoopBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::UnblockedLoopBody* UnblockedLoop::mutable_body() {
  ::grpcagent::UnblockedLoopBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.UnblockedLoop.body)
  return _msg;
}
inline void UnblockedLoop::set_allocated_body(::grpcagent::UnblockedLoopBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.UnblockedLoop.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blocked_5floop_2eproto
