// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_event_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_event_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blocked_loop.pb.h"
#include "metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_event_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_event_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_event_2eproto;
namespace grpcagent {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::Event* Arena::CreateMaybeMessage<::grpcagent::Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseTypeCase {
    kBlockedLoop = 1,
    kUnblockedLoop = 2,
    kMetrics = 3,
    RESPONSE_TYPE_NOT_SET = 0,
  };

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockedLoopFieldNumber = 1,
    kUnblockedLoopFieldNumber = 2,
    kMetricsFieldNumber = 3,
  };
  // .grpcagent.BlockedLoop blocked_loop = 1;
  bool has_blocked_loop() const;
  private:
  bool _internal_has_blocked_loop() const;
  public:
  void clear_blocked_loop();
  const ::grpcagent::BlockedLoop& blocked_loop() const;
  PROTOBUF_NODISCARD ::grpcagent::BlockedLoop* release_blocked_loop();
  ::grpcagent::BlockedLoop* mutable_blocked_loop();
  void set_allocated_blocked_loop(::grpcagent::BlockedLoop* blocked_loop);
  private:
  const ::grpcagent::BlockedLoop& _internal_blocked_loop() const;
  ::grpcagent::BlockedLoop* _internal_mutable_blocked_loop();
  public:
  void unsafe_arena_set_allocated_blocked_loop(
      ::grpcagent::BlockedLoop* blocked_loop);
  ::grpcagent::BlockedLoop* unsafe_arena_release_blocked_loop();

  // .grpcagent.UnblockedLoop unblocked_loop = 2;
  bool has_unblocked_loop() const;
  private:
  bool _internal_has_unblocked_loop() const;
  public:
  void clear_unblocked_loop();
  const ::grpcagent::UnblockedLoop& unblocked_loop() const;
  PROTOBUF_NODISCARD ::grpcagent::UnblockedLoop* release_unblocked_loop();
  ::grpcagent::UnblockedLoop* mutable_unblocked_loop();
  void set_allocated_unblocked_loop(::grpcagent::UnblockedLoop* unblocked_loop);
  private:
  const ::grpcagent::UnblockedLoop& _internal_unblocked_loop() const;
  ::grpcagent::UnblockedLoop* _internal_mutable_unblocked_loop();
  public:
  void unsafe_arena_set_allocated_unblocked_loop(
      ::grpcagent::UnblockedLoop* unblocked_loop);
  ::grpcagent::UnblockedLoop* unsafe_arena_release_unblocked_loop();

  // .grpcagent.Metrics metrics = 3;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::grpcagent::Metrics& metrics() const;
  PROTOBUF_NODISCARD ::grpcagent::Metrics* release_metrics();
  ::grpcagent::Metrics* mutable_metrics();
  void set_allocated_metrics(::grpcagent::Metrics* metrics);
  private:
  const ::grpcagent::Metrics& _internal_metrics() const;
  ::grpcagent::Metrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::grpcagent::Metrics* metrics);
  ::grpcagent::Metrics* unsafe_arena_release_metrics();

  void clear_response_type();
  ResponseTypeCase response_type_case() const;
  // @@protoc_insertion_point(class_scope:grpcagent.Event)
 private:
  class _Internal;
  void set_has_blocked_loop();
  void set_has_unblocked_loop();
  void set_has_metrics();

  inline bool has_response_type() const;
  inline void clear_has_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResponseTypeUnion {
      constexpr ResponseTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::grpcagent::BlockedLoop* blocked_loop_;
      ::grpcagent::UnblockedLoop* unblocked_loop_;
      ::grpcagent::Metrics* metrics_;
    } response_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// .grpcagent.BlockedLoop blocked_loop = 1;
inline bool Event::_internal_has_blocked_loop() const {
  return response_type_case() == kBlockedLoop;
}
inline bool Event::has_blocked_loop() const {
  return _internal_has_blocked_loop();
}
inline void Event::set_has_blocked_loop() {
  _impl_._oneof_case_[0] = kBlockedLoop;
}
inline ::grpcagent::BlockedLoop* Event::release_blocked_loop() {
  // @@protoc_insertion_point(field_release:grpcagent.Event.blocked_loop)
  if (_internal_has_blocked_loop()) {
    clear_has_response_type();
    ::grpcagent::BlockedLoop* temp = _impl_.response_type_.blocked_loop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.blocked_loop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::BlockedLoop& Event::_internal_blocked_loop() const {
  return _internal_has_blocked_loop()
      ? *_impl_.response_type_.blocked_loop_
      : reinterpret_cast< ::grpcagent::BlockedLoop&>(::grpcagent::_BlockedLoop_default_instance_);
}
inline const ::grpcagent::BlockedLoop& Event::blocked_loop() const {
  // @@protoc_insertion_point(field_get:grpcagent.Event.blocked_loop)
  return _internal_blocked_loop();
}
inline ::grpcagent::BlockedLoop* Event::unsafe_arena_release_blocked_loop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.Event.blocked_loop)
  if (_internal_has_blocked_loop()) {
    clear_has_response_type();
    ::grpcagent::BlockedLoop* temp = _impl_.response_type_.blocked_loop_;
    _impl_.response_type_.blocked_loop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_blocked_loop(::grpcagent::BlockedLoop* blocked_loop) {
  clear_response_type();
  if (blocked_loop) {
    set_has_blocked_loop();
    _impl_.response_type_.blocked_loop_ = blocked_loop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.Event.blocked_loop)
}
inline ::grpcagent::BlockedLoop* Event::_internal_mutable_blocked_loop() {
  if (!_internal_has_blocked_loop()) {
    clear_response_type();
    set_has_blocked_loop();
    _impl_.response_type_.blocked_loop_ = CreateMaybeMessage< ::grpcagent::BlockedLoop >(GetArenaForAllocation());
  }
  return _impl_.response_type_.blocked_loop_;
}
inline ::grpcagent::BlockedLoop* Event::mutable_blocked_loop() {
  ::grpcagent::BlockedLoop* _msg = _internal_mutable_blocked_loop();
  // @@protoc_insertion_point(field_mutable:grpcagent.Event.blocked_loop)
  return _msg;
}

// .grpcagent.UnblockedLoop unblocked_loop = 2;
inline bool Event::_internal_has_unblocked_loop() const {
  return response_type_case() == kUnblockedLoop;
}
inline bool Event::has_unblocked_loop() const {
  return _internal_has_unblocked_loop();
}
inline void Event::set_has_unblocked_loop() {
  _impl_._oneof_case_[0] = kUnblockedLoop;
}
inline ::grpcagent::UnblockedLoop* Event::release_unblocked_loop() {
  // @@protoc_insertion_point(field_release:grpcagent.Event.unblocked_loop)
  if (_internal_has_unblocked_loop()) {
    clear_has_response_type();
    ::grpcagent::UnblockedLoop* temp = _impl_.response_type_.unblocked_loop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.unblocked_loop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::UnblockedLoop& Event::_internal_unblocked_loop() const {
  return _internal_has_unblocked_loop()
      ? *_impl_.response_type_.unblocked_loop_
      : reinterpret_cast< ::grpcagent::UnblockedLoop&>(::grpcagent::_UnblockedLoop_default_instance_);
}
inline const ::grpcagent::UnblockedLoop& Event::unblocked_loop() const {
  // @@protoc_insertion_point(field_get:grpcagent.Event.unblocked_loop)
  return _internal_unblocked_loop();
}
inline ::grpcagent::UnblockedLoop* Event::unsafe_arena_release_unblocked_loop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.Event.unblocked_loop)
  if (_internal_has_unblocked_loop()) {
    clear_has_response_type();
    ::grpcagent::UnblockedLoop* temp = _impl_.response_type_.unblocked_loop_;
    _impl_.response_type_.unblocked_loop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_unblocked_loop(::grpcagent::UnblockedLoop* unblocked_loop) {
  clear_response_type();
  if (unblocked_loop) {
    set_has_unblocked_loop();
    _impl_.response_type_.unblocked_loop_ = unblocked_loop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.Event.unblocked_loop)
}
inline ::grpcagent::UnblockedLoop* Event::_internal_mutable_unblocked_loop() {
  if (!_internal_has_unblocked_loop()) {
    clear_response_type();
    set_has_unblocked_loop();
    _impl_.response_type_.unblocked_loop_ = CreateMaybeMessage< ::grpcagent::UnblockedLoop >(GetArenaForAllocation());
  }
  return _impl_.response_type_.unblocked_loop_;
}
inline ::grpcagent::UnblockedLoop* Event::mutable_unblocked_loop() {
  ::grpcagent::UnblockedLoop* _msg = _internal_mutable_unblocked_loop();
  // @@protoc_insertion_point(field_mutable:grpcagent.Event.unblocked_loop)
  return _msg;
}

// .grpcagent.Metrics metrics = 3;
inline bool Event::_internal_has_metrics() const {
  return response_type_case() == kMetrics;
}
inline bool Event::has_metrics() const {
  return _internal_has_metrics();
}
inline void Event::set_has_metrics() {
  _impl_._oneof_case_[0] = kMetrics;
}
inline ::grpcagent::Metrics* Event::release_metrics() {
  // @@protoc_insertion_point(field_release:grpcagent.Event.metrics)
  if (_internal_has_metrics()) {
    clear_has_response_type();
    ::grpcagent::Metrics* temp = _impl_.response_type_.metrics_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::Metrics& Event::_internal_metrics() const {
  return _internal_has_metrics()
      ? *_impl_.response_type_.metrics_
      : reinterpret_cast< ::grpcagent::Metrics&>(::grpcagent::_Metrics_default_instance_);
}
inline const ::grpcagent::Metrics& Event::metrics() const {
  // @@protoc_insertion_point(field_get:grpcagent.Event.metrics)
  return _internal_metrics();
}
inline ::grpcagent::Metrics* Event::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.Event.metrics)
  if (_internal_has_metrics()) {
    clear_has_response_type();
    ::grpcagent::Metrics* temp = _impl_.response_type_.metrics_;
    _impl_.response_type_.metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_metrics(::grpcagent::Metrics* metrics) {
  clear_response_type();
  if (metrics) {
    set_has_metrics();
    _impl_.response_type_.metrics_ = metrics;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.Event.metrics)
}
inline ::grpcagent::Metrics* Event::_internal_mutable_metrics() {
  if (!_internal_has_metrics()) {
    clear_response_type();
    set_has_metrics();
    _impl_.response_type_.metrics_ = CreateMaybeMessage< ::grpcagent::Metrics >(GetArenaForAllocation());
  }
  return _impl_.response_type_.metrics_;
}
inline ::grpcagent::Metrics* Event::mutable_metrics() {
  ::grpcagent::Metrics* _msg = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:grpcagent.Event.metrics)
  return _msg;
}

inline bool Event::has_response_type() const {
  return response_type_case() != RESPONSE_TYPE_NOT_SET;
}
inline void Event::clear_has_response_type() {
  _impl_._oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}
inline Event::ResponseTypeCase Event::response_type_case() const {
  return Event::ResponseTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_event_2eproto
