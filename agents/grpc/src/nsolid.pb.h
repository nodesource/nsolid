// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nsolid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nsolid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nsolid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nsolid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nsolid_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nsolid_2eproto;
namespace grpcagent {
class CommonResponse;
struct CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class InfoBody;
struct InfoBodyDefaultTypeInternal;
extern InfoBodyDefaultTypeInternal _InfoBody_default_instance_;
class InfoBody_VersionsEntry_DoNotUse;
struct InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal;
extern InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal _InfoBody_VersionsEntry_DoNotUse_default_instance_;
class InfoResponse;
struct InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PackagesBody;
struct PackagesBodyDefaultTypeInternal;
extern PackagesBodyDefaultTypeInternal _PackagesBody_default_instance_;
class PackagesResponse;
struct PackagesResponseDefaultTypeInternal;
extern PackagesResponseDefaultTypeInternal _PackagesResponse_default_instance_;
class RuntimeRequest;
struct RuntimeRequestDefaultTypeInternal;
extern RuntimeRequestDefaultTypeInternal _RuntimeRequest_default_instance_;
class RuntimeResponse;
struct RuntimeResponseDefaultTypeInternal;
extern RuntimeResponseDefaultTypeInternal _RuntimeResponse_default_instance_;
class Time;
struct TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::CommonResponse* Arena::CreateMaybeMessage<::grpcagent::CommonResponse>(Arena*);
template<> ::grpcagent::InfoBody* Arena::CreateMaybeMessage<::grpcagent::InfoBody>(Arena*);
template<> ::grpcagent::InfoBody_VersionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpcagent::InfoBody_VersionsEntry_DoNotUse>(Arena*);
template<> ::grpcagent::InfoResponse* Arena::CreateMaybeMessage<::grpcagent::InfoResponse>(Arena*);
template<> ::grpcagent::Package* Arena::CreateMaybeMessage<::grpcagent::Package>(Arena*);
template<> ::grpcagent::PackagesBody* Arena::CreateMaybeMessage<::grpcagent::PackagesBody>(Arena*);
template<> ::grpcagent::PackagesResponse* Arena::CreateMaybeMessage<::grpcagent::PackagesResponse>(Arena*);
template<> ::grpcagent::RuntimeRequest* Arena::CreateMaybeMessage<::grpcagent::RuntimeRequest>(Arena*);
template<> ::grpcagent::RuntimeResponse* Arena::CreateMaybeMessage<::grpcagent::RuntimeResponse>(Arena*);
template<> ::grpcagent::Time* Arena::CreateMaybeMessage<::grpcagent::Time>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class RuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.RuntimeRequest) */ {
 public:
  inline RuntimeRequest() : RuntimeRequest(nullptr) {}
  ~RuntimeRequest() override;
  explicit PROTOBUF_CONSTEXPR RuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeRequest(const RuntimeRequest& from);
  RuntimeRequest(RuntimeRequest&& from) noexcept
    : RuntimeRequest() {
    *this = ::std::move(from);
  }

  inline RuntimeRequest& operator=(const RuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeRequest& operator=(RuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const RuntimeRequest*>(
               &_RuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuntimeRequest& a, RuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeRequest& from) {
    RuntimeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.RuntimeRequest";
  }
  protected:
  explicit RuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kIdFieldNumber = 3,
    kCommandFieldNumber = 4,
    kVersionFieldNumber = 2,
  };
  // string requestId = 1;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string command = 4;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int32 version = 2;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.RuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class RuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.RuntimeResponse) */ {
 public:
  inline RuntimeResponse() : RuntimeResponse(nullptr) {}
  ~RuntimeResponse() override;
  explicit PROTOBUF_CONSTEXPR RuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeResponse(const RuntimeResponse& from);
  RuntimeResponse(RuntimeResponse&& from) noexcept
    : RuntimeResponse() {
    *this = ::std::move(from);
  }

  inline RuntimeResponse& operator=(const RuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeResponse& operator=(RuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseTypeCase {
    kInfoResponse = 1,
    kMetricsResponse = 2,
    RESPONSE_TYPE_NOT_SET = 0,
  };

  static inline const RuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const RuntimeResponse*>(
               &_RuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuntimeResponse& a, RuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeResponse& from) {
    RuntimeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.RuntimeResponse";
  }
  protected:
  explicit RuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResponseFieldNumber = 1,
    kMetricsResponseFieldNumber = 2,
  };
  // .grpcagent.InfoResponse info_response = 1;
  bool has_info_response() const;
  private:
  bool _internal_has_info_response() const;
  public:
  void clear_info_response();
  const ::grpcagent::InfoResponse& info_response() const;
  PROTOBUF_NODISCARD ::grpcagent::InfoResponse* release_info_response();
  ::grpcagent::InfoResponse* mutable_info_response();
  void set_allocated_info_response(::grpcagent::InfoResponse* info_response);
  private:
  const ::grpcagent::InfoResponse& _internal_info_response() const;
  ::grpcagent::InfoResponse* _internal_mutable_info_response();
  public:
  void unsafe_arena_set_allocated_info_response(
      ::grpcagent::InfoResponse* info_response);
  ::grpcagent::InfoResponse* unsafe_arena_release_info_response();

  // .grpcagent.PackagesResponse metrics_response = 2;
  bool has_metrics_response() const;
  private:
  bool _internal_has_metrics_response() const;
  public:
  void clear_metrics_response();
  const ::grpcagent::PackagesResponse& metrics_response() const;
  PROTOBUF_NODISCARD ::grpcagent::PackagesResponse* release_metrics_response();
  ::grpcagent::PackagesResponse* mutable_metrics_response();
  void set_allocated_metrics_response(::grpcagent::PackagesResponse* metrics_response);
  private:
  const ::grpcagent::PackagesResponse& _internal_metrics_response() const;
  ::grpcagent::PackagesResponse* _internal_mutable_metrics_response();
  public:
  void unsafe_arena_set_allocated_metrics_response(
      ::grpcagent::PackagesResponse* metrics_response);
  ::grpcagent::PackagesResponse* unsafe_arena_release_metrics_response();

  void clear_response_type();
  ResponseTypeCase response_type_case() const;
  // @@protoc_insertion_point(class_scope:grpcagent.RuntimeResponse)
 private:
  class _Internal;
  void set_has_info_response();
  void set_has_metrics_response();

  inline bool has_response_type() const;
  inline void clear_has_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResponseTypeUnion {
      constexpr ResponseTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::grpcagent::InfoResponse* info_response_;
      ::grpcagent::PackagesResponse* metrics_response_;
    } response_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class Time final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  ~Time() override;
  explicit PROTOBUF_CONSTEXPR Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Time& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Time& from) {
    Time::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosecondsFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // int32 nanoseconds = 2;
  void clear_nanoseconds();
  int32_t nanoseconds() const;
  void set_nanoseconds(int32_t value);
  private:
  int32_t _internal_nanoseconds() const;
  void _internal_set_nanoseconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t seconds_;
    int32_t nanoseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class CommonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.CommonResponse) */ {
 public:
  inline CommonResponse() : CommonResponse(nullptr) {}
  ~CommonResponse() override;
  explicit PROTOBUF_CONSTEXPR CommonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonResponse(const CommonResponse& from);
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonResponse& from) {
    CommonResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CommonResponse";
  }
  protected:
  explicit CommonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kCommandFieldNumber = 3,
    kTimeNSFieldNumber = 9,
    kRecordedFieldNumber = 4,
    kDurationFieldNumber = 5,
    kIntervalFieldNumber = 6,
    kTimeFieldNumber = 8,
    kVersionFieldNumber = 7,
  };
  // string agentId = 1;
  void clear_agentid();
  const std::string& agentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agentid();
  PROTOBUF_NODISCARD std::string* release_agentid();
  void set_allocated_agentid(std::string* agentid);
  private:
  const std::string& _internal_agentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agentid(const std::string& value);
  std::string* _internal_mutable_agentid();
  public:

  // string requestId = 2;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // string command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string timeNS = 9;
  void clear_timens();
  const std::string& timens() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timens(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timens();
  PROTOBUF_NODISCARD std::string* release_timens();
  void set_allocated_timens(std::string* timens);
  private:
  const std::string& _internal_timens() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timens(const std::string& value);
  std::string* _internal_mutable_timens();
  public:

  // .grpcagent.Time recorded = 4;
  bool has_recorded() const;
  private:
  bool _internal_has_recorded() const;
  public:
  void clear_recorded();
  const ::grpcagent::Time& recorded() const;
  PROTOBUF_NODISCARD ::grpcagent::Time* release_recorded();
  ::grpcagent::Time* mutable_recorded();
  void set_allocated_recorded(::grpcagent::Time* recorded);
  private:
  const ::grpcagent::Time& _internal_recorded() const;
  ::grpcagent::Time* _internal_mutable_recorded();
  public:
  void unsafe_arena_set_allocated_recorded(
      ::grpcagent::Time* recorded);
  ::grpcagent::Time* unsafe_arena_release_recorded();

  // int32 duration = 5;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // int32 interval = 6;
  void clear_interval();
  int32_t interval() const;
  void set_interval(int32_t value);
  private:
  int32_t _internal_interval() const;
  void _internal_set_interval(int32_t value);
  public:

  // int64 time = 8;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int32 version = 7;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.CommonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timens_;
    ::grpcagent::Time* recorded_;
    int32_t duration_;
    int32_t interval_;
    int64_t time_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class InfoBody_VersionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InfoBody_VersionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InfoBody_VersionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  InfoBody_VersionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InfoBody_VersionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InfoBody_VersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InfoBody_VersionsEntry_DoNotUse& other);
  static const InfoBody_VersionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InfoBody_VersionsEntry_DoNotUse*>(&_InfoBody_VersionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpcagent.InfoBody.VersionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpcagent.InfoBody.VersionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nsolid_2eproto;
};

// -------------------------------------------------------------------

class InfoBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.InfoBody) */ {
 public:
  inline InfoBody() : InfoBody(nullptr) {}
  ~InfoBody() override;
  explicit PROTOBUF_CONSTEXPR InfoBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoBody(const InfoBody& from);
  InfoBody(InfoBody&& from) noexcept
    : InfoBody() {
    *this = ::std::move(from);
  }

  inline InfoBody& operator=(const InfoBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoBody& operator=(InfoBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoBody* internal_default_instance() {
    return reinterpret_cast<const InfoBody*>(
               &_InfoBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InfoBody& a, InfoBody& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfoBody& from) {
    InfoBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.InfoBody";
  }
  protected:
  explicit InfoBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 13,
    kVersionsFieldNumber = 15,
    kAppFieldNumber = 1,
    kArchFieldNumber = 2,
    kCpuModelFieldNumber = 4,
    kExecPathFieldNumber = 5,
    kHostnameFieldNumber = 6,
    kIdFieldNumber = 7,
    kMainFieldNumber = 8,
    kNodeEnvFieldNumber = 9,
    kPlatformFieldNumber = 11,
    kCpuCoresFieldNumber = 3,
    kPidFieldNumber = 10,
    kProcessStartFieldNumber = 12,
    kTotalMemFieldNumber = 14,
  };
  // repeated string tags = 13;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // map<string, string> versions = 15;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_versions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_versions();

  // string app = 1;
  void clear_app();
  const std::string& app() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app();
  PROTOBUF_NODISCARD std::string* release_app();
  void set_allocated_app(std::string* app);
  private:
  const std::string& _internal_app() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app(const std::string& value);
  std::string* _internal_mutable_app();
  public:

  // string arch = 2;
  void clear_arch();
  const std::string& arch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arch();
  PROTOBUF_NODISCARD std::string* release_arch();
  void set_allocated_arch(std::string* arch);
  private:
  const std::string& _internal_arch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arch(const std::string& value);
  std::string* _internal_mutable_arch();
  public:

  // string cpuModel = 4;
  void clear_cpumodel();
  const std::string& cpumodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpumodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpumodel();
  PROTOBUF_NODISCARD std::string* release_cpumodel();
  void set_allocated_cpumodel(std::string* cpumodel);
  private:
  const std::string& _internal_cpumodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpumodel(const std::string& value);
  std::string* _internal_mutable_cpumodel();
  public:

  // string execPath = 5;
  void clear_execpath();
  const std::string& execpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_execpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_execpath();
  PROTOBUF_NODISCARD std::string* release_execpath();
  void set_allocated_execpath(std::string* execpath);
  private:
  const std::string& _internal_execpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execpath(const std::string& value);
  std::string* _internal_mutable_execpath();
  public:

  // string hostname = 6;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string id = 7;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string main = 8;
  void clear_main();
  const std::string& main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main();
  PROTOBUF_NODISCARD std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // string nodeEnv = 9;
  void clear_nodeenv();
  const std::string& nodeenv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodeenv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodeenv();
  PROTOBUF_NODISCARD std::string* release_nodeenv();
  void set_allocated_nodeenv(std::string* nodeenv);
  private:
  const std::string& _internal_nodeenv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeenv(const std::string& value);
  std::string* _internal_mutable_nodeenv();
  public:

  // string platform = 11;
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // int32 cpuCores = 3;
  void clear_cpucores();
  int32_t cpucores() const;
  void set_cpucores(int32_t value);
  private:
  int32_t _internal_cpucores() const;
  void _internal_set_cpucores(int32_t value);
  public:

  // int32 pid = 10;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int64 processStart = 12;
  void clear_processstart();
  int64_t processstart() const;
  void set_processstart(int64_t value);
  private:
  int64_t _internal_processstart() const;
  void _internal_set_processstart(int64_t value);
  public:

  // int64 totalMem = 14;
  void clear_totalmem();
  int64_t totalmem() const;
  void set_totalmem(int64_t value);
  private:
  int64_t _internal_totalmem() const;
  void _internal_set_totalmem(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.InfoBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        InfoBody_VersionsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arch_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpumodel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execpath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeenv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
    int32_t cpucores_;
    int32_t pid_;
    int64_t processstart_;
    int64_t totalmem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class InfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.InfoResponse) */ {
 public:
  inline InfoResponse() : InfoResponse(nullptr) {}
  ~InfoResponse() override;
  explicit PROTOBUF_CONSTEXPR InfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoResponse(const InfoResponse& from);
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfoResponse& from) {
    InfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.InfoResponse";
  }
  protected:
  explicit InfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.InfoBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::InfoBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::InfoBody* release_body();
  ::grpcagent::InfoBody* mutable_body();
  void set_allocated_body(::grpcagent::InfoBody* body);
  private:
  const ::grpcagent::InfoBody& _internal_body() const;
  ::grpcagent::InfoBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::InfoBody* body);
  ::grpcagent::InfoBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.InfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::InfoBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class PackagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.PackagesResponse) */ {
 public:
  inline PackagesResponse() : PackagesResponse(nullptr) {}
  ~PackagesResponse() override;
  explicit PROTOBUF_CONSTEXPR PackagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackagesResponse(const PackagesResponse& from);
  PackagesResponse(PackagesResponse&& from) noexcept
    : PackagesResponse() {
    *this = ::std::move(from);
  }

  inline PackagesResponse& operator=(const PackagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackagesResponse& operator=(PackagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackagesResponse* internal_default_instance() {
    return reinterpret_cast<const PackagesResponse*>(
               &_PackagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PackagesResponse& a, PackagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PackagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackagesResponse& from) {
    PackagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.PackagesResponse";
  }
  protected:
  explicit PackagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.PackagesBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::PackagesBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::PackagesBody* release_body();
  ::grpcagent::PackagesBody* mutable_body();
  void set_allocated_body(::grpcagent::PackagesBody* body);
  private:
  const ::grpcagent::PackagesBody& _internal_body() const;
  ::grpcagent::PackagesBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::PackagesBody* body);
  ::grpcagent::PackagesBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.PackagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::PackagesBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class PackagesBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.PackagesBody) */ {
 public:
  inline PackagesBody() : PackagesBody(nullptr) {}
  ~PackagesBody() override;
  explicit PROTOBUF_CONSTEXPR PackagesBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackagesBody(const PackagesBody& from);
  PackagesBody(PackagesBody&& from) noexcept
    : PackagesBody() {
    *this = ::std::move(from);
  }

  inline PackagesBody& operator=(const PackagesBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackagesBody& operator=(PackagesBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackagesBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackagesBody* internal_default_instance() {
    return reinterpret_cast<const PackagesBody*>(
               &_PackagesBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PackagesBody& a, PackagesBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PackagesBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackagesBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackagesBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackagesBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackagesBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackagesBody& from) {
    PackagesBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackagesBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.PackagesBody";
  }
  protected:
  explicit PackagesBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .grpcagent.Package packages = 1;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::grpcagent::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >*
      mutable_packages();
  private:
  const ::grpcagent::Package& _internal_packages(int index) const;
  ::grpcagent::Package* _internal_add_packages();
  public:
  const ::grpcagent::Package& packages(int index) const;
  ::grpcagent::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >&
      packages() const;

  // @@protoc_insertion_point(class_scope:grpcagent.PackagesBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package > packages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// -------------------------------------------------------------------

class Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit PROTOBUF_CONSTEXPR Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Package& from) {
    Package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenciesFieldNumber = 5,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kMainFieldNumber = 4,
    kRequiredFieldNumber = 6,
  };
  // repeated string dependencies = 5;
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const std::string& value);
  void set_dependencies(int index, std::string&& value);
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  std::string* add_dependencies();
  void add_dependencies(const std::string& value);
  void add_dependencies(std::string&& value);
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependencies();
  private:
  const std::string& _internal_dependencies(int index) const;
  std::string* _internal_add_dependencies();
  public:

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string main = 4;
  void clear_main();
  const std::string& main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main();
  PROTOBUF_NODISCARD std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // bool required = 6;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependencies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
    bool required_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsolid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuntimeRequest

// string requestId = 1;
inline void RuntimeRequest::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RuntimeRequest::requestid() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeRequest::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.requestId)
}
inline std::string* RuntimeRequest::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeRequest.requestId)
  return _s;
}
inline const std::string& RuntimeRequest::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void RuntimeRequest::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeRequest::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeRequest::release_requestid() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void RuntimeRequest::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.RuntimeRequest.requestId)
}

// int32 version = 2;
inline void RuntimeRequest::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t RuntimeRequest::_internal_version() const {
  return _impl_.version_;
}
inline int32_t RuntimeRequest::version() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.version)
  return _internal_version();
}
inline void RuntimeRequest::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void RuntimeRequest::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.version)
}

// string id = 3;
inline void RuntimeRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& RuntimeRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.id)
}
inline std::string* RuntimeRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeRequest.id)
  return _s;
}
inline const std::string& RuntimeRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RuntimeRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeRequest.id)
  return _impl_.id_.Release();
}
inline void RuntimeRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.RuntimeRequest.id)
}

// string command = 4;
inline void RuntimeRequest::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& RuntimeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeRequest::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.command)
}
inline std::string* RuntimeRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeRequest.command)
  return _s;
}
inline const std::string& RuntimeRequest::_internal_command() const {
  return _impl_.command_.Get();
}
inline void RuntimeRequest::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeRequest::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeRequest.command)
  return _impl_.command_.Release();
}
inline void RuntimeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.RuntimeRequest.command)
}

// -------------------------------------------------------------------

// RuntimeResponse

// .grpcagent.InfoResponse info_response = 1;
inline bool RuntimeResponse::_internal_has_info_response() const {
  return response_type_case() == kInfoResponse;
}
inline bool RuntimeResponse::has_info_response() const {
  return _internal_has_info_response();
}
inline void RuntimeResponse::set_has_info_response() {
  _impl_._oneof_case_[0] = kInfoResponse;
}
inline void RuntimeResponse::clear_info_response() {
  if (_internal_has_info_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_type_.info_response_;
    }
    clear_has_response_type();
  }
}
inline ::grpcagent::InfoResponse* RuntimeResponse::release_info_response() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeResponse.info_response)
  if (_internal_has_info_response()) {
    clear_has_response_type();
    ::grpcagent::InfoResponse* temp = _impl_.response_type_.info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::InfoResponse& RuntimeResponse::_internal_info_response() const {
  return _internal_has_info_response()
      ? *_impl_.response_type_.info_response_
      : reinterpret_cast< ::grpcagent::InfoResponse&>(::grpcagent::_InfoResponse_default_instance_);
}
inline const ::grpcagent::InfoResponse& RuntimeResponse::info_response() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeResponse.info_response)
  return _internal_info_response();
}
inline ::grpcagent::InfoResponse* RuntimeResponse::unsafe_arena_release_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.RuntimeResponse.info_response)
  if (_internal_has_info_response()) {
    clear_has_response_type();
    ::grpcagent::InfoResponse* temp = _impl_.response_type_.info_response_;
    _impl_.response_type_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RuntimeResponse::unsafe_arena_set_allocated_info_response(::grpcagent::InfoResponse* info_response) {
  clear_response_type();
  if (info_response) {
    set_has_info_response();
    _impl_.response_type_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.RuntimeResponse.info_response)
}
inline ::grpcagent::InfoResponse* RuntimeResponse::_internal_mutable_info_response() {
  if (!_internal_has_info_response()) {
    clear_response_type();
    set_has_info_response();
    _impl_.response_type_.info_response_ = CreateMaybeMessage< ::grpcagent::InfoResponse >(GetArenaForAllocation());
  }
  return _impl_.response_type_.info_response_;
}
inline ::grpcagent::InfoResponse* RuntimeResponse::mutable_info_response() {
  ::grpcagent::InfoResponse* _msg = _internal_mutable_info_response();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeResponse.info_response)
  return _msg;
}

// .grpcagent.PackagesResponse metrics_response = 2;
inline bool RuntimeResponse::_internal_has_metrics_response() const {
  return response_type_case() == kMetricsResponse;
}
inline bool RuntimeResponse::has_metrics_response() const {
  return _internal_has_metrics_response();
}
inline void RuntimeResponse::set_has_metrics_response() {
  _impl_._oneof_case_[0] = kMetricsResponse;
}
inline void RuntimeResponse::clear_metrics_response() {
  if (_internal_has_metrics_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_type_.metrics_response_;
    }
    clear_has_response_type();
  }
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::release_metrics_response() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeResponse.metrics_response)
  if (_internal_has_metrics_response()) {
    clear_has_response_type();
    ::grpcagent::PackagesResponse* temp = _impl_.response_type_.metrics_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::PackagesResponse& RuntimeResponse::_internal_metrics_response() const {
  return _internal_has_metrics_response()
      ? *_impl_.response_type_.metrics_response_
      : reinterpret_cast< ::grpcagent::PackagesResponse&>(::grpcagent::_PackagesResponse_default_instance_);
}
inline const ::grpcagent::PackagesResponse& RuntimeResponse::metrics_response() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeResponse.metrics_response)
  return _internal_metrics_response();
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::unsafe_arena_release_metrics_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.RuntimeResponse.metrics_response)
  if (_internal_has_metrics_response()) {
    clear_has_response_type();
    ::grpcagent::PackagesResponse* temp = _impl_.response_type_.metrics_response_;
    _impl_.response_type_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RuntimeResponse::unsafe_arena_set_allocated_metrics_response(::grpcagent::PackagesResponse* metrics_response) {
  clear_response_type();
  if (metrics_response) {
    set_has_metrics_response();
    _impl_.response_type_.metrics_response_ = metrics_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.RuntimeResponse.metrics_response)
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::_internal_mutable_metrics_response() {
  if (!_internal_has_metrics_response()) {
    clear_response_type();
    set_has_metrics_response();
    _impl_.response_type_.metrics_response_ = CreateMaybeMessage< ::grpcagent::PackagesResponse >(GetArenaForAllocation());
  }
  return _impl_.response_type_.metrics_response_;
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::mutable_metrics_response() {
  ::grpcagent::PackagesResponse* _msg = _internal_mutable_metrics_response();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeResponse.metrics_response)
  return _msg;
}

inline bool RuntimeResponse::has_response_type() const {
  return response_type_case() != RESPONSE_TYPE_NOT_SET;
}
inline void RuntimeResponse::clear_has_response_type() {
  _impl_._oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}
inline RuntimeResponse::ResponseTypeCase RuntimeResponse::response_type_case() const {
  return RuntimeResponse::ResponseTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Time

// int64 seconds = 1;
inline void Time::clear_seconds() {
  _impl_.seconds_ = int64_t{0};
}
inline int64_t Time::_internal_seconds() const {
  return _impl_.seconds_;
}
inline int64_t Time::seconds() const {
  // @@protoc_insertion_point(field_get:grpcagent.Time.seconds)
  return _internal_seconds();
}
inline void Time::_internal_set_seconds(int64_t value) {
  
  _impl_.seconds_ = value;
}
inline void Time::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:grpcagent.Time.seconds)
}

// int32 nanoseconds = 2;
inline void Time::clear_nanoseconds() {
  _impl_.nanoseconds_ = 0;
}
inline int32_t Time::_internal_nanoseconds() const {
  return _impl_.nanoseconds_;
}
inline int32_t Time::nanoseconds() const {
  // @@protoc_insertion_point(field_get:grpcagent.Time.nanoseconds)
  return _internal_nanoseconds();
}
inline void Time::_internal_set_nanoseconds(int32_t value) {
  
  _impl_.nanoseconds_ = value;
}
inline void Time::set_nanoseconds(int32_t value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:grpcagent.Time.nanoseconds)
}

// -------------------------------------------------------------------

// CommonResponse

// string agentId = 1;
inline void CommonResponse::clear_agentid() {
  _impl_.agentid_.ClearToEmpty();
}
inline const std::string& CommonResponse::agentid() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.agentId)
  return _internal_agentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_agentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.agentId)
}
inline std::string* CommonResponse::mutable_agentid() {
  std::string* _s = _internal_mutable_agentid();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.agentId)
  return _s;
}
inline const std::string& CommonResponse::_internal_agentid() const {
  return _impl_.agentid_.Get();
}
inline void CommonResponse::_internal_set_agentid(const std::string& value) {
  
  _impl_.agentid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_agentid() {
  
  return _impl_.agentid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_agentid() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.agentId)
  return _impl_.agentid_.Release();
}
inline void CommonResponse::set_allocated_agentid(std::string* agentid) {
  if (agentid != nullptr) {
    
  } else {
    
  }
  _impl_.agentid_.SetAllocated(agentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agentid_.IsDefault()) {
    _impl_.agentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.agentId)
}

// string requestId = 2;
inline void CommonResponse::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& CommonResponse::requestid() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.requestId)
}
inline std::string* CommonResponse::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.requestId)
  return _s;
}
inline const std::string& CommonResponse::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void CommonResponse::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_requestid() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.requestId)
  return _impl_.requestid_.Release();
}
inline void CommonResponse::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.requestId)
}

// string command = 3;
inline void CommonResponse::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& CommonResponse::command() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.command)
}
inline std::string* CommonResponse::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.command)
  return _s;
}
inline const std::string& CommonResponse::_internal_command() const {
  return _impl_.command_.Get();
}
inline void CommonResponse::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.command)
  return _impl_.command_.Release();
}
inline void CommonResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.command)
}

// .grpcagent.Time recorded = 4;
inline bool CommonResponse::_internal_has_recorded() const {
  return this != internal_default_instance() && _impl_.recorded_ != nullptr;
}
inline bool CommonResponse::has_recorded() const {
  return _internal_has_recorded();
}
inline void CommonResponse::clear_recorded() {
  if (GetArenaForAllocation() == nullptr && _impl_.recorded_ != nullptr) {
    delete _impl_.recorded_;
  }
  _impl_.recorded_ = nullptr;
}
inline const ::grpcagent::Time& CommonResponse::_internal_recorded() const {
  const ::grpcagent::Time* p = _impl_.recorded_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::Time&>(
      ::grpcagent::_Time_default_instance_);
}
inline const ::grpcagent::Time& CommonResponse::recorded() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.recorded)
  return _internal_recorded();
}
inline void CommonResponse::unsafe_arena_set_allocated_recorded(
    ::grpcagent::Time* recorded) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recorded_);
  }
  _impl_.recorded_ = recorded;
  if (recorded) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.CommonResponse.recorded)
}
inline ::grpcagent::Time* CommonResponse::release_recorded() {
  
  ::grpcagent::Time* temp = _impl_.recorded_;
  _impl_.recorded_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::Time* CommonResponse::unsafe_arena_release_recorded() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.recorded)
  
  ::grpcagent::Time* temp = _impl_.recorded_;
  _impl_.recorded_ = nullptr;
  return temp;
}
inline ::grpcagent::Time* CommonResponse::_internal_mutable_recorded() {
  
  if (_impl_.recorded_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::Time>(GetArenaForAllocation());
    _impl_.recorded_ = p;
  }
  return _impl_.recorded_;
}
inline ::grpcagent::Time* CommonResponse::mutable_recorded() {
  ::grpcagent::Time* _msg = _internal_mutable_recorded();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.recorded)
  return _msg;
}
inline void CommonResponse::set_allocated_recorded(::grpcagent::Time* recorded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recorded_;
  }
  if (recorded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recorded);
    if (message_arena != submessage_arena) {
      recorded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recorded, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recorded_ = recorded;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.recorded)
}

// int32 duration = 5;
inline void CommonResponse::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t CommonResponse::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t CommonResponse::duration() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.duration)
  return _internal_duration();
}
inline void CommonResponse::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void CommonResponse::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.duration)
}

// int32 interval = 6;
inline void CommonResponse::clear_interval() {
  _impl_.interval_ = 0;
}
inline int32_t CommonResponse::_internal_interval() const {
  return _impl_.interval_;
}
inline int32_t CommonResponse::interval() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.interval)
  return _internal_interval();
}
inline void CommonResponse::_internal_set_interval(int32_t value) {
  
  _impl_.interval_ = value;
}
inline void CommonResponse::set_interval(int32_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.interval)
}

// int32 version = 7;
inline void CommonResponse::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t CommonResponse::_internal_version() const {
  return _impl_.version_;
}
inline int32_t CommonResponse::version() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.version)
  return _internal_version();
}
inline void CommonResponse::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void CommonResponse::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.version)
}

// int64 time = 8;
inline void CommonResponse::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t CommonResponse::_internal_time() const {
  return _impl_.time_;
}
inline int64_t CommonResponse::time() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.time)
  return _internal_time();
}
inline void CommonResponse::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void CommonResponse::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.time)
}

// string timeNS = 9;
inline void CommonResponse::clear_timens() {
  _impl_.timens_.ClearToEmpty();
}
inline const std::string& CommonResponse::timens() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.timeNS)
  return _internal_timens();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_timens(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timens_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.timeNS)
}
inline std::string* CommonResponse::mutable_timens() {
  std::string* _s = _internal_mutable_timens();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.timeNS)
  return _s;
}
inline const std::string& CommonResponse::_internal_timens() const {
  return _impl_.timens_.Get();
}
inline void CommonResponse::_internal_set_timens(const std::string& value) {
  
  _impl_.timens_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_timens() {
  
  return _impl_.timens_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_timens() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.timeNS)
  return _impl_.timens_.Release();
}
inline void CommonResponse::set_allocated_timens(std::string* timens) {
  if (timens != nullptr) {
    
  } else {
    
  }
  _impl_.timens_.SetAllocated(timens, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timens_.IsDefault()) {
    _impl_.timens_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.timeNS)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InfoBody

// string app = 1;
inline void InfoBody::clear_app() {
  _impl_.app_.ClearToEmpty();
}
inline const std::string& InfoBody::app() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.app)
  return _internal_app();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_app(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.app)
}
inline std::string* InfoBody::mutable_app() {
  std::string* _s = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.app)
  return _s;
}
inline const std::string& InfoBody::_internal_app() const {
  return _impl_.app_.Get();
}
inline void InfoBody::_internal_set_app(const std::string& value) {
  
  _impl_.app_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_app() {
  
  return _impl_.app_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_app() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.app)
  return _impl_.app_.Release();
}
inline void InfoBody::set_allocated_app(std::string* app) {
  if (app != nullptr) {
    
  } else {
    
  }
  _impl_.app_.SetAllocated(app, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_.IsDefault()) {
    _impl_.app_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.app)
}

// string arch = 2;
inline void InfoBody::clear_arch() {
  _impl_.arch_.ClearToEmpty();
}
inline const std::string& InfoBody::arch() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.arch)
  return _internal_arch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_arch(ArgT0&& arg0, ArgT... args) {
 
 _impl_.arch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.arch)
}
inline std::string* InfoBody::mutable_arch() {
  std::string* _s = _internal_mutable_arch();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.arch)
  return _s;
}
inline const std::string& InfoBody::_internal_arch() const {
  return _impl_.arch_.Get();
}
inline void InfoBody::_internal_set_arch(const std::string& value) {
  
  _impl_.arch_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_arch() {
  
  return _impl_.arch_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_arch() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.arch)
  return _impl_.arch_.Release();
}
inline void InfoBody::set_allocated_arch(std::string* arch) {
  if (arch != nullptr) {
    
  } else {
    
  }
  _impl_.arch_.SetAllocated(arch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arch_.IsDefault()) {
    _impl_.arch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.arch)
}

// int32 cpuCores = 3;
inline void InfoBody::clear_cpucores() {
  _impl_.cpucores_ = 0;
}
inline int32_t InfoBody::_internal_cpucores() const {
  return _impl_.cpucores_;
}
inline int32_t InfoBody::cpucores() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.cpuCores)
  return _internal_cpucores();
}
inline void InfoBody::_internal_set_cpucores(int32_t value) {
  
  _impl_.cpucores_ = value;
}
inline void InfoBody::set_cpucores(int32_t value) {
  _internal_set_cpucores(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.cpuCores)
}

// string cpuModel = 4;
inline void InfoBody::clear_cpumodel() {
  _impl_.cpumodel_.ClearToEmpty();
}
inline const std::string& InfoBody::cpumodel() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.cpuModel)
  return _internal_cpumodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_cpumodel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpumodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.cpuModel)
}
inline std::string* InfoBody::mutable_cpumodel() {
  std::string* _s = _internal_mutable_cpumodel();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.cpuModel)
  return _s;
}
inline const std::string& InfoBody::_internal_cpumodel() const {
  return _impl_.cpumodel_.Get();
}
inline void InfoBody::_internal_set_cpumodel(const std::string& value) {
  
  _impl_.cpumodel_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_cpumodel() {
  
  return _impl_.cpumodel_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_cpumodel() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.cpuModel)
  return _impl_.cpumodel_.Release();
}
inline void InfoBody::set_allocated_cpumodel(std::string* cpumodel) {
  if (cpumodel != nullptr) {
    
  } else {
    
  }
  _impl_.cpumodel_.SetAllocated(cpumodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpumodel_.IsDefault()) {
    _impl_.cpumodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.cpuModel)
}

// string execPath = 5;
inline void InfoBody::clear_execpath() {
  _impl_.execpath_.ClearToEmpty();
}
inline const std::string& InfoBody::execpath() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.execPath)
  return _internal_execpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_execpath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.execpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.execPath)
}
inline std::string* InfoBody::mutable_execpath() {
  std::string* _s = _internal_mutable_execpath();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.execPath)
  return _s;
}
inline const std::string& InfoBody::_internal_execpath() const {
  return _impl_.execpath_.Get();
}
inline void InfoBody::_internal_set_execpath(const std::string& value) {
  
  _impl_.execpath_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_execpath() {
  
  return _impl_.execpath_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_execpath() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.execPath)
  return _impl_.execpath_.Release();
}
inline void InfoBody::set_allocated_execpath(std::string* execpath) {
  if (execpath != nullptr) {
    
  } else {
    
  }
  _impl_.execpath_.SetAllocated(execpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.execpath_.IsDefault()) {
    _impl_.execpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.execPath)
}

// string hostname = 6;
inline void InfoBody::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& InfoBody::hostname() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.hostname)
}
inline std::string* InfoBody::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.hostname)
  return _s;
}
inline const std::string& InfoBody::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void InfoBody::_internal_set_hostname(const std::string& value) {
  
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_hostname() {
  
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_hostname() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.hostname)
  return _impl_.hostname_.Release();
}
inline void InfoBody::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.hostname)
}

// string id = 7;
inline void InfoBody::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& InfoBody::id() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.id)
}
inline std::string* InfoBody::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.id)
  return _s;
}
inline const std::string& InfoBody::_internal_id() const {
  return _impl_.id_.Get();
}
inline void InfoBody::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_id() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.id)
  return _impl_.id_.Release();
}
inline void InfoBody::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.id)
}

// string main = 8;
inline void InfoBody::clear_main() {
  _impl_.main_.ClearToEmpty();
}
inline const std::string& InfoBody::main() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.main)
  return _internal_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_main(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.main)
}
inline std::string* InfoBody::mutable_main() {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.main)
  return _s;
}
inline const std::string& InfoBody::_internal_main() const {
  return _impl_.main_.Get();
}
inline void InfoBody::_internal_set_main(const std::string& value) {
  
  _impl_.main_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_main() {
  
  return _impl_.main_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_main() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.main)
  return _impl_.main_.Release();
}
inline void InfoBody::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  _impl_.main_.SetAllocated(main, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_.IsDefault()) {
    _impl_.main_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.main)
}

// string nodeEnv = 9;
inline void InfoBody::clear_nodeenv() {
  _impl_.nodeenv_.ClearToEmpty();
}
inline const std::string& InfoBody::nodeenv() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.nodeEnv)
  return _internal_nodeenv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_nodeenv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodeenv_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.nodeEnv)
}
inline std::string* InfoBody::mutable_nodeenv() {
  std::string* _s = _internal_mutable_nodeenv();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.nodeEnv)
  return _s;
}
inline const std::string& InfoBody::_internal_nodeenv() const {
  return _impl_.nodeenv_.Get();
}
inline void InfoBody::_internal_set_nodeenv(const std::string& value) {
  
  _impl_.nodeenv_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_nodeenv() {
  
  return _impl_.nodeenv_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_nodeenv() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.nodeEnv)
  return _impl_.nodeenv_.Release();
}
inline void InfoBody::set_allocated_nodeenv(std::string* nodeenv) {
  if (nodeenv != nullptr) {
    
  } else {
    
  }
  _impl_.nodeenv_.SetAllocated(nodeenv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodeenv_.IsDefault()) {
    _impl_.nodeenv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.nodeEnv)
}

// int32 pid = 10;
inline void InfoBody::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t InfoBody::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t InfoBody::pid() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.pid)
  return _internal_pid();
}
inline void InfoBody::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void InfoBody::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.pid)
}

// string platform = 11;
inline void InfoBody::clear_platform() {
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& InfoBody::platform() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_platform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.platform)
}
inline std::string* InfoBody::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.platform)
  return _s;
}
inline const std::string& InfoBody::_internal_platform() const {
  return _impl_.platform_.Get();
}
inline void InfoBody::_internal_set_platform(const std::string& value) {
  
  _impl_.platform_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_platform() {
  
  return _impl_.platform_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_platform() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.platform)
  return _impl_.platform_.Release();
}
inline void InfoBody::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  _impl_.platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.platform)
}

// int64 processStart = 12;
inline void InfoBody::clear_processstart() {
  _impl_.processstart_ = int64_t{0};
}
inline int64_t InfoBody::_internal_processstart() const {
  return _impl_.processstart_;
}
inline int64_t InfoBody::processstart() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.processStart)
  return _internal_processstart();
}
inline void InfoBody::_internal_set_processstart(int64_t value) {
  
  _impl_.processstart_ = value;
}
inline void InfoBody::set_processstart(int64_t value) {
  _internal_set_processstart(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.processStart)
}

// repeated string tags = 13;
inline int InfoBody::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int InfoBody::tags_size() const {
  return _internal_tags_size();
}
inline void InfoBody::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* InfoBody::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:grpcagent.InfoBody.tags)
  return _s;
}
inline const std::string& InfoBody::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& InfoBody::tags(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.tags)
  return _internal_tags(index);
}
inline std::string* InfoBody::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.tags)
  return _impl_.tags_.Mutable(index);
}
inline void InfoBody::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.tags)
}
inline void InfoBody::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.tags)
}
inline void InfoBody::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpcagent.InfoBody.tags)
}
inline void InfoBody::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpcagent.InfoBody.tags)
}
inline std::string* InfoBody::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void InfoBody::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpcagent.InfoBody.tags)
}
inline void InfoBody::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpcagent.InfoBody.tags)
}
inline void InfoBody::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpcagent.InfoBody.tags)
}
inline void InfoBody::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpcagent.InfoBody.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InfoBody::tags() const {
  // @@protoc_insertion_point(field_list:grpcagent.InfoBody.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InfoBody::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.InfoBody.tags)
  return &_impl_.tags_;
}

// int64 totalMem = 14;
inline void InfoBody::clear_totalmem() {
  _impl_.totalmem_ = int64_t{0};
}
inline int64_t InfoBody::_internal_totalmem() const {
  return _impl_.totalmem_;
}
inline int64_t InfoBody::totalmem() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.totalMem)
  return _internal_totalmem();
}
inline void InfoBody::_internal_set_totalmem(int64_t value) {
  
  _impl_.totalmem_ = value;
}
inline void InfoBody::set_totalmem(int64_t value) {
  _internal_set_totalmem(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.totalMem)
}

// map<string, string> versions = 15;
inline int InfoBody::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int InfoBody::versions_size() const {
  return _internal_versions_size();
}
inline void InfoBody::clear_versions() {
  _impl_.versions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InfoBody::_internal_versions() const {
  return _impl_.versions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InfoBody::versions() const {
  // @@protoc_insertion_point(field_map:grpcagent.InfoBody.versions)
  return _internal_versions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InfoBody::_internal_mutable_versions() {
  return _impl_.versions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InfoBody::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_map:grpcagent.InfoBody.versions)
  return _internal_mutable_versions();
}

// -------------------------------------------------------------------

// InfoResponse

// .grpcagent.CommonResponse common = 1;
inline bool InfoResponse::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool InfoResponse::has_common() const {
  return _internal_has_common();
}
inline void InfoResponse::clear_common() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
}
inline const ::grpcagent::CommonResponse& InfoResponse::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& InfoResponse::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoResponse.common)
  return _internal_common();
}
inline void InfoResponse::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.InfoResponse.common)
}
inline ::grpcagent::CommonResponse* InfoResponse::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* InfoResponse::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoResponse.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* InfoResponse::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* InfoResponse::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoResponse.common)
  return _msg;
}
inline void InfoResponse::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoResponse.common)
}

// .grpcagent.InfoBody body = 2;
inline bool InfoResponse::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool InfoResponse::has_body() const {
  return _internal_has_body();
}
inline void InfoResponse::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::InfoBody& InfoResponse::_internal_body() const {
  const ::grpcagent::InfoBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::InfoBody&>(
      ::grpcagent::_InfoBody_default_instance_);
}
inline const ::grpcagent::InfoBody& InfoResponse::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoResponse.body)
  return _internal_body();
}
inline void InfoResponse::unsafe_arena_set_allocated_body(
    ::grpcagent::InfoBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.InfoResponse.body)
}
inline ::grpcagent::InfoBody* InfoResponse::release_body() {
  
  ::grpcagent::InfoBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::InfoBody* InfoResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoResponse.body)
  
  ::grpcagent::InfoBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::InfoBody* InfoResponse::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::InfoBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::InfoBody* InfoResponse::mutable_body() {
  ::grpcagent::InfoBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoResponse.body)
  return _msg;
}
inline void InfoResponse::set_allocated_body(::grpcagent::InfoBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoResponse.body)
}

// -------------------------------------------------------------------

// PackagesResponse

// .grpcagent.CommonResponse common = 1;
inline bool PackagesResponse::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool PackagesResponse::has_common() const {
  return _internal_has_common();
}
inline void PackagesResponse::clear_common() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
}
inline const ::grpcagent::CommonResponse& PackagesResponse::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& PackagesResponse::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.PackagesResponse.common)
  return _internal_common();
}
inline void PackagesResponse::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.PackagesResponse.common)
}
inline ::grpcagent::CommonResponse* PackagesResponse::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* PackagesResponse::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.PackagesResponse.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* PackagesResponse::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* PackagesResponse::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.PackagesResponse.common)
  return _msg;
}
inline void PackagesResponse::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.PackagesResponse.common)
}

// .grpcagent.PackagesBody body = 2;
inline bool PackagesResponse::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool PackagesResponse::has_body() const {
  return _internal_has_body();
}
inline void PackagesResponse::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::PackagesBody& PackagesResponse::_internal_body() const {
  const ::grpcagent::PackagesBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::PackagesBody&>(
      ::grpcagent::_PackagesBody_default_instance_);
}
inline const ::grpcagent::PackagesBody& PackagesResponse::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.PackagesResponse.body)
  return _internal_body();
}
inline void PackagesResponse::unsafe_arena_set_allocated_body(
    ::grpcagent::PackagesBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.PackagesResponse.body)
}
inline ::grpcagent::PackagesBody* PackagesResponse::release_body() {
  
  ::grpcagent::PackagesBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::PackagesBody* PackagesResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.PackagesResponse.body)
  
  ::grpcagent::PackagesBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::PackagesBody* PackagesResponse::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::PackagesBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::PackagesBody* PackagesResponse::mutable_body() {
  ::grpcagent::PackagesBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.PackagesResponse.body)
  return _msg;
}
inline void PackagesResponse::set_allocated_body(::grpcagent::PackagesBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.PackagesResponse.body)
}

// -------------------------------------------------------------------

// PackagesBody

// repeated .grpcagent.Package packages = 1;
inline int PackagesBody::_internal_packages_size() const {
  return _impl_.packages_.size();
}
inline int PackagesBody::packages_size() const {
  return _internal_packages_size();
}
inline void PackagesBody::clear_packages() {
  _impl_.packages_.Clear();
}
inline ::grpcagent::Package* PackagesBody::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.PackagesBody.packages)
  return _impl_.packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >*
PackagesBody::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.PackagesBody.packages)
  return &_impl_.packages_;
}
inline const ::grpcagent::Package& PackagesBody::_internal_packages(int index) const {
  return _impl_.packages_.Get(index);
}
inline const ::grpcagent::Package& PackagesBody::packages(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.PackagesBody.packages)
  return _internal_packages(index);
}
inline ::grpcagent::Package* PackagesBody::_internal_add_packages() {
  return _impl_.packages_.Add();
}
inline ::grpcagent::Package* PackagesBody::add_packages() {
  ::grpcagent::Package* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:grpcagent.PackagesBody.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >&
PackagesBody::packages() const {
  // @@protoc_insertion_point(field_list:grpcagent.PackagesBody.packages)
  return _impl_.packages_;
}

// -------------------------------------------------------------------

// Package

// string path = 1;
inline void Package::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Package::path() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.path)
}
inline std::string* Package::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.path)
  return _s;
}
inline const std::string& Package::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Package::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_path() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.path)
  return _impl_.path_.Release();
}
inline void Package::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.path)
}

// string name = 2;
inline void Package::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.name)
}
inline std::string* Package::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.name)
  return _s;
}
inline const std::string& Package::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Package::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.name)
  return _impl_.name_.Release();
}
inline void Package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.name)
}

// string version = 3;
inline void Package::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Package::version() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.version)
}
inline std::string* Package::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.version)
  return _s;
}
inline const std::string& Package::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Package::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_version() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.version)
  return _impl_.version_.Release();
}
inline void Package::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.version)
}

// string main = 4;
inline void Package::clear_main() {
  _impl_.main_.ClearToEmpty();
}
inline const std::string& Package::main() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.main)
  return _internal_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_main(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.main)
}
inline std::string* Package::mutable_main() {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.main)
  return _s;
}
inline const std::string& Package::_internal_main() const {
  return _impl_.main_.Get();
}
inline void Package::_internal_set_main(const std::string& value) {
  
  _impl_.main_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_main() {
  
  return _impl_.main_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_main() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.main)
  return _impl_.main_.Release();
}
inline void Package::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  _impl_.main_.SetAllocated(main, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_.IsDefault()) {
    _impl_.main_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.main)
}

// repeated string dependencies = 5;
inline int Package::_internal_dependencies_size() const {
  return _impl_.dependencies_.size();
}
inline int Package::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void Package::clear_dependencies() {
  _impl_.dependencies_.Clear();
}
inline std::string* Package::add_dependencies() {
  std::string* _s = _internal_add_dependencies();
  // @@protoc_insertion_point(field_add_mutable:grpcagent.Package.dependencies)
  return _s;
}
inline const std::string& Package::_internal_dependencies(int index) const {
  return _impl_.dependencies_.Get(index);
}
inline const std::string& Package::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.dependencies)
  return _internal_dependencies(index);
}
inline std::string* Package::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.dependencies)
  return _impl_.dependencies_.Mutable(index);
}
inline void Package::set_dependencies(int index, const std::string& value) {
  _impl_.dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:grpcagent.Package.dependencies)
}
inline void Package::set_dependencies(int index, std::string&& value) {
  _impl_.dependencies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:grpcagent.Package.dependencies)
}
inline void Package::set_dependencies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpcagent.Package.dependencies)
}
inline void Package::set_dependencies(int index, const char* value, size_t size) {
  _impl_.dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpcagent.Package.dependencies)
}
inline std::string* Package::_internal_add_dependencies() {
  return _impl_.dependencies_.Add();
}
inline void Package::add_dependencies(const std::string& value) {
  _impl_.dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpcagent.Package.dependencies)
}
inline void Package::add_dependencies(std::string&& value) {
  _impl_.dependencies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpcagent.Package.dependencies)
}
inline void Package::add_dependencies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpcagent.Package.dependencies)
}
inline void Package::add_dependencies(const char* value, size_t size) {
  _impl_.dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpcagent.Package.dependencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Package::dependencies() const {
  // @@protoc_insertion_point(field_list:grpcagent.Package.dependencies)
  return _impl_.dependencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Package::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.Package.dependencies)
  return &_impl_.dependencies_;
}

// bool required = 6;
inline void Package::clear_required() {
  _impl_.required_ = false;
}
inline bool Package::_internal_required() const {
  return _impl_.required_;
}
inline bool Package::required() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.required)
  return _internal_required();
}
inline void Package::_internal_set_required(bool value) {
  
  _impl_.required_ = value;
}
inline void Package::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:grpcagent.Package.required)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nsolid_2eproto
