// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nsolid_service.proto

#include "nsolid_service.pb.h"
#include "nsolid_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace grpcagent {

static const char* NSolidService_method_names[] = {
  "/grpcagent.NSolidService/ReqRespStream",
  "/grpcagent.NSolidService/Events",
};

std::unique_ptr< NSolidService::Stub> NSolidService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NSolidService::Stub> stub(new NSolidService::Stub(channel, options));
  return stub;
}

NSolidService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReqRespStream_(NSolidService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Events_(NSolidService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* NSolidService::Stub::ReqRespStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>::Create(channel_.get(), rpcmethod_ReqRespStream_, context);
}

void NSolidService::Stub::async::ReqRespStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpcagent::RuntimeResponse,::grpcagent::RuntimeRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::grpcagent::RuntimeResponse,::grpcagent::RuntimeRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ReqRespStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* NSolidService::Stub::AsyncReqRespStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>::Create(channel_.get(), cq, rpcmethod_ReqRespStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* NSolidService::Stub::PrepareAsyncReqRespStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>::Create(channel_.get(), cq, rpcmethod_ReqRespStream_, context, false, nullptr);
}

::grpc::Status NSolidService::Stub::Events(::grpc::ClientContext* context, const ::grpcagent::Event& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcagent::Event, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Events_, context, request, response);
}

void NSolidService::Stub::async::Events(::grpc::ClientContext* context, const ::grpcagent::Event* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcagent::Event, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Events_, context, request, response, std::move(f));
}

void NSolidService::Stub::async::Events(::grpc::ClientContext* context, const ::grpcagent::Event* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Events_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NSolidService::Stub::PrepareAsyncEventsRaw(::grpc::ClientContext* context, const ::grpcagent::Event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcagent::Event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Events_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NSolidService::Stub::AsyncEventsRaw(::grpc::ClientContext* context, const ::grpcagent::Event& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NSolidService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NSolidService::Service, ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::grpcagent::RuntimeRequest,
             ::grpcagent::RuntimeResponse>* stream) {
               return service->ReqRespStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSolidService::Service, ::grpcagent::Event, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcagent::Event* req,
             ::google::protobuf::Empty* resp) {
               return service->Events(ctx, req, resp);
             }, this)));
}

NSolidService::Service::~Service() {
}

::grpc::Status NSolidService::Service::ReqRespStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::Events(::grpc::ServerContext* context, const ::grpcagent::Event* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcagent

