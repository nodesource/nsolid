// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nsolid_service.proto
#ifndef GRPC_nsolid_5fservice_2eproto__INCLUDED
#define GRPC_nsolid_5fservice_2eproto__INCLUDED

#include "nsolid_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace grpcagent {

class NSolidService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcagent.NSolidService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>> ReqRespStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>>(ReqRespStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>> AsyncReqRespStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>>(AsyncReqRespStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>> PrepareAsyncReqRespStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>>(PrepareAsyncReqRespStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::grpcagent::Event>> EventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::grpcagent::Event>>(EventsStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Event>> AsyncEventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Event>>(AsyncEventsStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Event>> PrepareAsyncEventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Event>>(PrepareAsyncEventsStreamRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ReqRespStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpcagent::RuntimeResponse,::grpcagent::RuntimeRequest>* reactor) = 0;
      virtual void EventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::grpcagent::Event>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* ReqRespStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* AsyncReqRespStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* PrepareAsyncReqRespStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::grpcagent::Event>* EventsStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpcagent::Event>* AsyncEventsStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpcagent::Event>* PrepareAsyncEventsStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>> ReqRespStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>>(ReqRespStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>> AsyncReqRespStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>>(AsyncReqRespStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>> PrepareAsyncReqRespStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>>(PrepareAsyncReqRespStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::grpcagent::Event>> EventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::grpcagent::Event>>(EventsStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Event>> AsyncEventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Event>>(AsyncEventsStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Event>> PrepareAsyncEventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Event>>(PrepareAsyncEventsStreamRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReqRespStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpcagent::RuntimeResponse,::grpcagent::RuntimeRequest>* reactor) override;
      void EventsStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::grpcagent::Event>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* ReqRespStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* AsyncReqRespStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* PrepareAsyncReqRespStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::grpcagent::Event>* EventsStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::grpcagent::Event>* AsyncEventsStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::grpcagent::Event>* PrepareAsyncEventsStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReqRespStream_;
    const ::grpc::internal::RpcMethod rpcmethod_EventsStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReqRespStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* stream);
    virtual ::grpc::Status EventsStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpcagent::Event>* reader, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReqRespStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReqRespStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReqRespStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqRespStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReqRespStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EventsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EventsStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EventsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventsStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Event>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEventsStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::Empty, ::grpcagent::Event>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReqRespStream<WithAsyncMethod_EventsStream<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReqRespStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReqRespStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ReqRespStream(context); }));
    }
    ~WithCallbackMethod_ReqRespStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqRespStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpcagent::RuntimeResponse, ::grpcagent::RuntimeRequest>* ReqRespStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EventsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EventsStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpcagent::Event, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::google::protobuf::Empty* response) { return this->EventsStream(context, response); }));
    }
    ~WithCallbackMethod_EventsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventsStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Event>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpcagent::Event>* EventsStream(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReqRespStream<WithCallbackMethod_EventsStream<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReqRespStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReqRespStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReqRespStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqRespStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EventsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EventsStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EventsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventsStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Event>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReqRespStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReqRespStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReqRespStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqRespStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReqRespStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EventsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EventsStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EventsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventsStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Event>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEventsStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReqRespStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReqRespStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ReqRespStream(context); }));
    }
    ~WithRawCallbackMethod_ReqRespStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReqRespStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::RuntimeRequest, ::grpcagent::RuntimeResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ReqRespStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EventsStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EventsStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->EventsStream(context, response); }));
    }
    ~WithRawCallbackMethod_EventsStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventsStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Event>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* EventsStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace grpcagent


#endif  // GRPC_nsolid_5fservice_2eproto__INCLUDED
