// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packages_2eproto;
namespace grpcagent {
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PackagesBody;
struct PackagesBodyDefaultTypeInternal;
extern PackagesBodyDefaultTypeInternal _PackagesBody_default_instance_;
class PackagesResponse;
struct PackagesResponseDefaultTypeInternal;
extern PackagesResponseDefaultTypeInternal _PackagesResponse_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::Package* Arena::CreateMaybeMessage<::grpcagent::Package>(Arena*);
template<> ::grpcagent::PackagesBody* Arena::CreateMaybeMessage<::grpcagent::PackagesBody>(Arena*);
template<> ::grpcagent::PackagesResponse* Arena::CreateMaybeMessage<::grpcagent::PackagesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class PackagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.PackagesResponse) */ {
 public:
  inline PackagesResponse() : PackagesResponse(nullptr) {}
  ~PackagesResponse() override;
  explicit PROTOBUF_CONSTEXPR PackagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackagesResponse(const PackagesResponse& from);
  PackagesResponse(PackagesResponse&& from) noexcept
    : PackagesResponse() {
    *this = ::std::move(from);
  }

  inline PackagesResponse& operator=(const PackagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackagesResponse& operator=(PackagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackagesResponse* internal_default_instance() {
    return reinterpret_cast<const PackagesResponse*>(
               &_PackagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PackagesResponse& a, PackagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PackagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackagesResponse& from) {
    PackagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.PackagesResponse";
  }
  protected:
  explicit PackagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.PackagesBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::PackagesBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::PackagesBody* release_body();
  ::grpcagent::PackagesBody* mutable_body();
  void set_allocated_body(::grpcagent::PackagesBody* body);
  private:
  const ::grpcagent::PackagesBody& _internal_body() const;
  ::grpcagent::PackagesBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::PackagesBody* body);
  ::grpcagent::PackagesBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.PackagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::PackagesBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packages_2eproto;
};
// -------------------------------------------------------------------

class PackagesBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.PackagesBody) */ {
 public:
  inline PackagesBody() : PackagesBody(nullptr) {}
  ~PackagesBody() override;
  explicit PROTOBUF_CONSTEXPR PackagesBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackagesBody(const PackagesBody& from);
  PackagesBody(PackagesBody&& from) noexcept
    : PackagesBody() {
    *this = ::std::move(from);
  }

  inline PackagesBody& operator=(const PackagesBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackagesBody& operator=(PackagesBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackagesBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackagesBody* internal_default_instance() {
    return reinterpret_cast<const PackagesBody*>(
               &_PackagesBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PackagesBody& a, PackagesBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PackagesBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackagesBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackagesBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackagesBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackagesBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackagesBody& from) {
    PackagesBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackagesBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.PackagesBody";
  }
  protected:
  explicit PackagesBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .grpcagent.Package packages = 1;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::grpcagent::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >*
      mutable_packages();
  private:
  const ::grpcagent::Package& _internal_packages(int index) const;
  ::grpcagent::Package* _internal_add_packages();
  public:
  const ::grpcagent::Package& packages(int index) const;
  ::grpcagent::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >&
      packages() const;

  // @@protoc_insertion_point(class_scope:grpcagent.PackagesBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package > packages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packages_2eproto;
};
// -------------------------------------------------------------------

class Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit PROTOBUF_CONSTEXPR Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Package& from) {
    Package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenciesFieldNumber = 5,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kMainFieldNumber = 4,
    kRequiredFieldNumber = 6,
  };
  // repeated string dependencies = 5;
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const std::string& value);
  void set_dependencies(int index, std::string&& value);
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  std::string* add_dependencies();
  void add_dependencies(const std::string& value);
  void add_dependencies(std::string&& value);
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependencies();
  private:
  const std::string& _internal_dependencies(int index) const;
  std::string* _internal_add_dependencies();
  public:

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string main = 4;
  void clear_main();
  const std::string& main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main();
  PROTOBUF_NODISCARD std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // bool required = 6;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependencies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
    bool required_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackagesResponse

// .grpcagent.CommonResponse common = 1;
inline bool PackagesResponse::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool PackagesResponse::has_common() const {
  return _internal_has_common();
}
inline const ::grpcagent::CommonResponse& PackagesResponse::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& PackagesResponse::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.PackagesResponse.common)
  return _internal_common();
}
inline void PackagesResponse::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.PackagesResponse.common)
}
inline ::grpcagent::CommonResponse* PackagesResponse::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* PackagesResponse::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.PackagesResponse.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* PackagesResponse::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* PackagesResponse::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.PackagesResponse.common)
  return _msg;
}
inline void PackagesResponse::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common));
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.PackagesResponse.common)
}

// .grpcagent.PackagesBody body = 2;
inline bool PackagesResponse::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool PackagesResponse::has_body() const {
  return _internal_has_body();
}
inline void PackagesResponse::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::PackagesBody& PackagesResponse::_internal_body() const {
  const ::grpcagent::PackagesBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::PackagesBody&>(
      ::grpcagent::_PackagesBody_default_instance_);
}
inline const ::grpcagent::PackagesBody& PackagesResponse::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.PackagesResponse.body)
  return _internal_body();
}
inline void PackagesResponse::unsafe_arena_set_allocated_body(
    ::grpcagent::PackagesBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.PackagesResponse.body)
}
inline ::grpcagent::PackagesBody* PackagesResponse::release_body() {
  
  ::grpcagent::PackagesBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::PackagesBody* PackagesResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.PackagesResponse.body)
  
  ::grpcagent::PackagesBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::PackagesBody* PackagesResponse::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::PackagesBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::PackagesBody* PackagesResponse::mutable_body() {
  ::grpcagent::PackagesBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.PackagesResponse.body)
  return _msg;
}
inline void PackagesResponse::set_allocated_body(::grpcagent::PackagesBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.PackagesResponse.body)
}

// -------------------------------------------------------------------

// PackagesBody

// repeated .grpcagent.Package packages = 1;
inline int PackagesBody::_internal_packages_size() const {
  return _impl_.packages_.size();
}
inline int PackagesBody::packages_size() const {
  return _internal_packages_size();
}
inline void PackagesBody::clear_packages() {
  _impl_.packages_.Clear();
}
inline ::grpcagent::Package* PackagesBody::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.PackagesBody.packages)
  return _impl_.packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >*
PackagesBody::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.PackagesBody.packages)
  return &_impl_.packages_;
}
inline const ::grpcagent::Package& PackagesBody::_internal_packages(int index) const {
  return _impl_.packages_.Get(index);
}
inline const ::grpcagent::Package& PackagesBody::packages(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.PackagesBody.packages)
  return _internal_packages(index);
}
inline ::grpcagent::Package* PackagesBody::_internal_add_packages() {
  return _impl_.packages_.Add();
}
inline ::grpcagent::Package* PackagesBody::add_packages() {
  ::grpcagent::Package* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:grpcagent.PackagesBody.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::Package >&
PackagesBody::packages() const {
  // @@protoc_insertion_point(field_list:grpcagent.PackagesBody.packages)
  return _impl_.packages_;
}

// -------------------------------------------------------------------

// Package

// string path = 1;
inline void Package::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Package::path() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.path)
}
inline std::string* Package::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.path)
  return _s;
}
inline const std::string& Package::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Package::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_path() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.path)
  return _impl_.path_.Release();
}
inline void Package::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.path)
}

// string name = 2;
inline void Package::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.name)
}
inline std::string* Package::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.name)
  return _s;
}
inline const std::string& Package::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Package::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.name)
  return _impl_.name_.Release();
}
inline void Package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.name)
}

// string version = 3;
inline void Package::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Package::version() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.version)
}
inline std::string* Package::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.version)
  return _s;
}
inline const std::string& Package::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Package::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_version() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.version)
  return _impl_.version_.Release();
}
inline void Package::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.version)
}

// string main = 4;
inline void Package::clear_main() {
  _impl_.main_.ClearToEmpty();
}
inline const std::string& Package::main() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.main)
  return _internal_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_main(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.Package.main)
}
inline std::string* Package::mutable_main() {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.main)
  return _s;
}
inline const std::string& Package::_internal_main() const {
  return _impl_.main_.Get();
}
inline void Package::_internal_set_main(const std::string& value) {
  
  _impl_.main_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_main() {
  
  return _impl_.main_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_main() {
  // @@protoc_insertion_point(field_release:grpcagent.Package.main)
  return _impl_.main_.Release();
}
inline void Package::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  _impl_.main_.SetAllocated(main, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_.IsDefault()) {
    _impl_.main_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Package.main)
}

// repeated string dependencies = 5;
inline int Package::_internal_dependencies_size() const {
  return _impl_.dependencies_.size();
}
inline int Package::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void Package::clear_dependencies() {
  _impl_.dependencies_.Clear();
}
inline std::string* Package::add_dependencies() {
  std::string* _s = _internal_add_dependencies();
  // @@protoc_insertion_point(field_add_mutable:grpcagent.Package.dependencies)
  return _s;
}
inline const std::string& Package::_internal_dependencies(int index) const {
  return _impl_.dependencies_.Get(index);
}
inline const std::string& Package::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.dependencies)
  return _internal_dependencies(index);
}
inline std::string* Package::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.Package.dependencies)
  return _impl_.dependencies_.Mutable(index);
}
inline void Package::set_dependencies(int index, const std::string& value) {
  _impl_.dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:grpcagent.Package.dependencies)
}
inline void Package::set_dependencies(int index, std::string&& value) {
  _impl_.dependencies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:grpcagent.Package.dependencies)
}
inline void Package::set_dependencies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpcagent.Package.dependencies)
}
inline void Package::set_dependencies(int index, const char* value, size_t size) {
  _impl_.dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpcagent.Package.dependencies)
}
inline std::string* Package::_internal_add_dependencies() {
  return _impl_.dependencies_.Add();
}
inline void Package::add_dependencies(const std::string& value) {
  _impl_.dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpcagent.Package.dependencies)
}
inline void Package::add_dependencies(std::string&& value) {
  _impl_.dependencies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpcagent.Package.dependencies)
}
inline void Package::add_dependencies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpcagent.Package.dependencies)
}
inline void Package::add_dependencies(const char* value, size_t size) {
  _impl_.dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpcagent.Package.dependencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Package::dependencies() const {
  // @@protoc_insertion_point(field_list:grpcagent.Package.dependencies)
  return _impl_.dependencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Package::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.Package.dependencies)
  return &_impl_.dependencies_;
}

// bool required = 6;
inline void Package::clear_required() {
  _impl_.required_ = false;
}
inline bool Package::_internal_required() const {
  return _impl_.required_;
}
inline bool Package::required() const {
  // @@protoc_insertion_point(field_get:grpcagent.Package.required)
  return _internal_required();
}
inline void Package::_internal_set_required(bool value) {
  
  _impl_.required_ = value;
}
inline void Package::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:grpcagent.Package.required)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2eproto
