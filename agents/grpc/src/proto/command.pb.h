// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "reconfigure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace grpcagent {
class CommandArgs;
struct CommandArgsDefaultTypeInternal;
extern CommandArgsDefaultTypeInternal _CommandArgs_default_instance_;
class CommandRequest;
struct CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class CommandResponse;
struct CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::CommandArgs* Arena::CreateMaybeMessage<::grpcagent::CommandArgs>(Arena*);
template<> ::grpcagent::CommandRequest* Arena::CreateMaybeMessage<::grpcagent::CommandRequest>(Arena*);
template<> ::grpcagent::CommandResponse* Arena::CreateMaybeMessage<::grpcagent::CommandResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class CommandArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.CommandArgs) */ {
 public:
  inline CommandArgs() : CommandArgs(nullptr) {}
  ~CommandArgs() override;
  explicit PROTOBUF_CONSTEXPR CommandArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandArgs(const CommandArgs& from);
  CommandArgs(CommandArgs&& from) noexcept
    : CommandArgs() {
    *this = ::std::move(from);
  }

  inline CommandArgs& operator=(const CommandArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandArgs& operator=(CommandArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandArgs& default_instance() {
    return *internal_default_instance();
  }
  enum ArgsCase {
    kReconfigure = 1,
    ARGS_NOT_SET = 0,
  };

  static inline const CommandArgs* internal_default_instance() {
    return reinterpret_cast<const CommandArgs*>(
               &_CommandArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandArgs& a, CommandArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandArgs& from) {
    CommandArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CommandArgs";
  }
  protected:
  explicit CommandArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconfigureFieldNumber = 1,
  };
  // .grpcagent.ReconfigureBody reconfigure = 1;
  bool has_reconfigure() const;
  private:
  bool _internal_has_reconfigure() const;
  public:
  void clear_reconfigure();
  const ::grpcagent::ReconfigureBody& reconfigure() const;
  PROTOBUF_NODISCARD ::grpcagent::ReconfigureBody* release_reconfigure();
  ::grpcagent::ReconfigureBody* mutable_reconfigure();
  void set_allocated_reconfigure(::grpcagent::ReconfigureBody* reconfigure);
  private:
  const ::grpcagent::ReconfigureBody& _internal_reconfigure() const;
  ::grpcagent::ReconfigureBody* _internal_mutable_reconfigure();
  public:
  void unsafe_arena_set_allocated_reconfigure(
      ::grpcagent::ReconfigureBody* reconfigure);
  ::grpcagent::ReconfigureBody* unsafe_arena_release_reconfigure();

  void clear_args();
  ArgsCase args_case() const;
  // @@protoc_insertion_point(class_scope:grpcagent.CommandArgs)
 private:
  class _Internal;
  void set_has_reconfigure();

  inline bool has_args() const;
  inline void clear_has_args();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ArgsUnion {
      constexpr ArgsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::grpcagent::ReconfigureBody* reconfigure_;
    } args_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class CommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.CommandRequest) */ {
 public:
  inline CommandRequest() : CommandRequest(nullptr) {}
  ~CommandRequest() override;
  explicit PROTOBUF_CONSTEXPR CommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRequest& from) {
    CommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CommandRequest";
  }
  protected:
  explicit CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kIdFieldNumber = 3,
    kCommandFieldNumber = 4,
    kArgsFieldNumber = 5,
    kVersionFieldNumber = 2,
  };
  // string requestId = 1;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string command = 4;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // .grpcagent.CommandArgs args = 5;
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const ::grpcagent::CommandArgs& args() const;
  PROTOBUF_NODISCARD ::grpcagent::CommandArgs* release_args();
  ::grpcagent::CommandArgs* mutable_args();
  void set_allocated_args(::grpcagent::CommandArgs* args);
  private:
  const ::grpcagent::CommandArgs& _internal_args() const;
  ::grpcagent::CommandArgs* _internal_mutable_args();
  public:
  void unsafe_arena_set_allocated_args(
      ::grpcagent::CommandArgs* args);
  ::grpcagent::CommandArgs* unsafe_arena_release_args();

  // uint32 version = 2;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.CommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::grpcagent::CommandArgs* args_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {}
  ~CommandResponse() override;
  explicit PROTOBUF_CONSTEXPR CommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandResponse& from) {
    CommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CommandResponse";
  }
  protected:
  explicit CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string error_message = 1;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.CommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandArgs

// .grpcagent.ReconfigureBody reconfigure = 1;
inline bool CommandArgs::_internal_has_reconfigure() const {
  return args_case() == kReconfigure;
}
inline bool CommandArgs::has_reconfigure() const {
  return _internal_has_reconfigure();
}
inline void CommandArgs::set_has_reconfigure() {
  _impl_._oneof_case_[0] = kReconfigure;
}
inline ::grpcagent::ReconfigureBody* CommandArgs::release_reconfigure() {
  // @@protoc_insertion_point(field_release:grpcagent.CommandArgs.reconfigure)
  if (_internal_has_reconfigure()) {
    clear_has_args();
    ::grpcagent::ReconfigureBody* temp = _impl_.args_.reconfigure_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.reconfigure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::ReconfigureBody& CommandArgs::_internal_reconfigure() const {
  return _internal_has_reconfigure()
      ? *_impl_.args_.reconfigure_
      : reinterpret_cast< ::grpcagent::ReconfigureBody&>(::grpcagent::_ReconfigureBody_default_instance_);
}
inline const ::grpcagent::ReconfigureBody& CommandArgs::reconfigure() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandArgs.reconfigure)
  return _internal_reconfigure();
}
inline ::grpcagent::ReconfigureBody* CommandArgs::unsafe_arena_release_reconfigure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.CommandArgs.reconfigure)
  if (_internal_has_reconfigure()) {
    clear_has_args();
    ::grpcagent::ReconfigureBody* temp = _impl_.args_.reconfigure_;
    _impl_.args_.reconfigure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandArgs::unsafe_arena_set_allocated_reconfigure(::grpcagent::ReconfigureBody* reconfigure) {
  clear_args();
  if (reconfigure) {
    set_has_reconfigure();
    _impl_.args_.reconfigure_ = reconfigure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.CommandArgs.reconfigure)
}
inline ::grpcagent::ReconfigureBody* CommandArgs::_internal_mutable_reconfigure() {
  if (!_internal_has_reconfigure()) {
    clear_args();
    set_has_reconfigure();
    _impl_.args_.reconfigure_ = CreateMaybeMessage< ::grpcagent::ReconfigureBody >(GetArenaForAllocation());
  }
  return _impl_.args_.reconfigure_;
}
inline ::grpcagent::ReconfigureBody* CommandArgs::mutable_reconfigure() {
  ::grpcagent::ReconfigureBody* _msg = _internal_mutable_reconfigure();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommandArgs.reconfigure)
  return _msg;
}

inline bool CommandArgs::has_args() const {
  return args_case() != ARGS_NOT_SET;
}
inline void CommandArgs::clear_has_args() {
  _impl_._oneof_case_[0] = ARGS_NOT_SET;
}
inline CommandArgs::ArgsCase CommandArgs::args_case() const {
  return CommandArgs::ArgsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandRequest

// string requestId = 1;
inline void CommandRequest::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& CommandRequest::requestid() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandRequest.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRequest::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommandRequest.requestId)
}
inline std::string* CommandRequest::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommandRequest.requestId)
  return _s;
}
inline const std::string& CommandRequest::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void CommandRequest::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandRequest::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandRequest::release_requestid() {
  // @@protoc_insertion_point(field_release:grpcagent.CommandRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void CommandRequest::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommandRequest.requestId)
}

// uint32 version = 2;
inline void CommandRequest::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t CommandRequest::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CommandRequest::version() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandRequest.version)
  return _internal_version();
}
inline void CommandRequest::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void CommandRequest::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpcagent.CommandRequest.version)
}

// string id = 3;
inline void CommandRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CommandRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommandRequest.id)
}
inline std::string* CommandRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommandRequest.id)
  return _s;
}
inline const std::string& CommandRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CommandRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcagent.CommandRequest.id)
  return _impl_.id_.Release();
}
inline void CommandRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommandRequest.id)
}

// string command = 4;
inline void CommandRequest::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& CommandRequest::command() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRequest::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommandRequest.command)
}
inline std::string* CommandRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommandRequest.command)
  return _s;
}
inline const std::string& CommandRequest::_internal_command() const {
  return _impl_.command_.Get();
}
inline void CommandRequest::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandRequest::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpcagent.CommandRequest.command)
  return _impl_.command_.Release();
}
inline void CommandRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommandRequest.command)
}

// .grpcagent.CommandArgs args = 5;
inline bool CommandRequest::_internal_has_args() const {
  return this != internal_default_instance() && _impl_.args_ != nullptr;
}
inline bool CommandRequest::has_args() const {
  return _internal_has_args();
}
inline void CommandRequest::clear_args() {
  if (GetArenaForAllocation() == nullptr && _impl_.args_ != nullptr) {
    delete _impl_.args_;
  }
  _impl_.args_ = nullptr;
}
inline const ::grpcagent::CommandArgs& CommandRequest::_internal_args() const {
  const ::grpcagent::CommandArgs* p = _impl_.args_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommandArgs&>(
      ::grpcagent::_CommandArgs_default_instance_);
}
inline const ::grpcagent::CommandArgs& CommandRequest::args() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandRequest.args)
  return _internal_args();
}
inline void CommandRequest::unsafe_arena_set_allocated_args(
    ::grpcagent::CommandArgs* args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.args_);
  }
  _impl_.args_ = args;
  if (args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.CommandRequest.args)
}
inline ::grpcagent::CommandArgs* CommandRequest::release_args() {
  
  ::grpcagent::CommandArgs* temp = _impl_.args_;
  _impl_.args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommandArgs* CommandRequest::unsafe_arena_release_args() {
  // @@protoc_insertion_point(field_release:grpcagent.CommandRequest.args)
  
  ::grpcagent::CommandArgs* temp = _impl_.args_;
  _impl_.args_ = nullptr;
  return temp;
}
inline ::grpcagent::CommandArgs* CommandRequest::_internal_mutable_args() {
  
  if (_impl_.args_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommandArgs>(GetArenaForAllocation());
    _impl_.args_ = p;
  }
  return _impl_.args_;
}
inline ::grpcagent::CommandArgs* CommandRequest::mutable_args() {
  ::grpcagent::CommandArgs* _msg = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommandRequest.args)
  return _msg;
}
inline void CommandRequest::set_allocated_args(::grpcagent::CommandArgs* args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.args_;
  }
  if (args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(args);
    if (message_arena != submessage_arena) {
      args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.args_ = args;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommandRequest.args)
}

// -------------------------------------------------------------------

// CommandResponse

// string error_message = 1;
inline void CommandResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CommandResponse::error_message() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommandResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommandResponse.error_message)
}
inline std::string* CommandResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommandResponse.error_message)
  return _s;
}
inline const std::string& CommandResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CommandResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:grpcagent.CommandResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CommandResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommandResponse.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
