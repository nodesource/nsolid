// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace grpcagent {
class CommonResponse;
struct CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Time;
struct TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::CommonResponse* Arena::CreateMaybeMessage<::grpcagent::CommonResponse>(Arena*);
template<> ::grpcagent::Time* Arena::CreateMaybeMessage<::grpcagent::Time>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class Time final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  ~Time() override;
  explicit PROTOBUF_CONSTEXPR Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Time& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Time& from) {
    Time::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosecondsFieldNumber = 2,
  };
  // uint64 seconds = 1;
  void clear_seconds();
  uint64_t seconds() const;
  void set_seconds(uint64_t value);
  private:
  uint64_t _internal_seconds() const;
  void _internal_set_seconds(uint64_t value);
  public:

  // uint32 nanoseconds = 2;
  void clear_nanoseconds();
  uint32_t nanoseconds() const;
  void set_nanoseconds(uint32_t value);
  private:
  uint32_t _internal_nanoseconds() const;
  void _internal_set_nanoseconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t seconds_;
    uint32_t nanoseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CommonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.CommonResponse) */ {
 public:
  inline CommonResponse() : CommonResponse(nullptr) {}
  ~CommonResponse() override;
  explicit PROTOBUF_CONSTEXPR CommonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonResponse(const CommonResponse& from);
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonResponse& from) {
    CommonResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CommonResponse";
  }
  protected:
  explicit CommonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kCommandFieldNumber = 3,
    kRecordedFieldNumber = 4,
  };
  // string agentId = 1;
  void clear_agentid();
  const std::string& agentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agentid();
  PROTOBUF_NODISCARD std::string* release_agentid();
  void set_allocated_agentid(std::string* agentid);
  private:
  const std::string& _internal_agentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agentid(const std::string& value);
  std::string* _internal_mutable_agentid();
  public:

  // string requestId = 2;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // string command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // .grpcagent.Time recorded = 4;
  bool has_recorded() const;
  private:
  bool _internal_has_recorded() const;
  public:
  void clear_recorded();
  const ::grpcagent::Time& recorded() const;
  PROTOBUF_NODISCARD ::grpcagent::Time* release_recorded();
  ::grpcagent::Time* mutable_recorded();
  void set_allocated_recorded(::grpcagent::Time* recorded);
  private:
  const ::grpcagent::Time& _internal_recorded() const;
  ::grpcagent::Time* _internal_mutable_recorded();
  public:
  void unsafe_arena_set_allocated_recorded(
      ::grpcagent::Time* recorded);
  ::grpcagent::Time* unsafe_arena_release_recorded();

  // @@protoc_insertion_point(class_scope:grpcagent.CommonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::grpcagent::Time* recorded_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Time

// uint64 seconds = 1;
inline void Time::clear_seconds() {
  _impl_.seconds_ = uint64_t{0u};
}
inline uint64_t Time::_internal_seconds() const {
  return _impl_.seconds_;
}
inline uint64_t Time::seconds() const {
  // @@protoc_insertion_point(field_get:grpcagent.Time.seconds)
  return _internal_seconds();
}
inline void Time::_internal_set_seconds(uint64_t value) {
  
  _impl_.seconds_ = value;
}
inline void Time::set_seconds(uint64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:grpcagent.Time.seconds)
}

// uint32 nanoseconds = 2;
inline void Time::clear_nanoseconds() {
  _impl_.nanoseconds_ = 0u;
}
inline uint32_t Time::_internal_nanoseconds() const {
  return _impl_.nanoseconds_;
}
inline uint32_t Time::nanoseconds() const {
  // @@protoc_insertion_point(field_get:grpcagent.Time.nanoseconds)
  return _internal_nanoseconds();
}
inline void Time::_internal_set_nanoseconds(uint32_t value) {
  
  _impl_.nanoseconds_ = value;
}
inline void Time::set_nanoseconds(uint32_t value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:grpcagent.Time.nanoseconds)
}

// -------------------------------------------------------------------

// CommonResponse

// string agentId = 1;
inline void CommonResponse::clear_agentid() {
  _impl_.agentid_.ClearToEmpty();
}
inline const std::string& CommonResponse::agentid() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.agentId)
  return _internal_agentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_agentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.agentId)
}
inline std::string* CommonResponse::mutable_agentid() {
  std::string* _s = _internal_mutable_agentid();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.agentId)
  return _s;
}
inline const std::string& CommonResponse::_internal_agentid() const {
  return _impl_.agentid_.Get();
}
inline void CommonResponse::_internal_set_agentid(const std::string& value) {
  
  _impl_.agentid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_agentid() {
  
  return _impl_.agentid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_agentid() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.agentId)
  return _impl_.agentid_.Release();
}
inline void CommonResponse::set_allocated_agentid(std::string* agentid) {
  if (agentid != nullptr) {
    
  } else {
    
  }
  _impl_.agentid_.SetAllocated(agentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agentid_.IsDefault()) {
    _impl_.agentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.agentId)
}

// string requestId = 2;
inline void CommonResponse::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& CommonResponse::requestid() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.requestId)
}
inline std::string* CommonResponse::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.requestId)
  return _s;
}
inline const std::string& CommonResponse::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void CommonResponse::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_requestid() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.requestId)
  return _impl_.requestid_.Release();
}
inline void CommonResponse::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.requestId)
}

// string command = 3;
inline void CommonResponse::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& CommonResponse::command() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResponse::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.CommonResponse.command)
}
inline std::string* CommonResponse::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.command)
  return _s;
}
inline const std::string& CommonResponse::_internal_command() const {
  return _impl_.command_.Get();
}
inline void CommonResponse::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResponse::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.command)
  return _impl_.command_.Release();
}
inline void CommonResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.command)
}

// .grpcagent.Time recorded = 4;
inline bool CommonResponse::_internal_has_recorded() const {
  return this != internal_default_instance() && _impl_.recorded_ != nullptr;
}
inline bool CommonResponse::has_recorded() const {
  return _internal_has_recorded();
}
inline void CommonResponse::clear_recorded() {
  if (GetArenaForAllocation() == nullptr && _impl_.recorded_ != nullptr) {
    delete _impl_.recorded_;
  }
  _impl_.recorded_ = nullptr;
}
inline const ::grpcagent::Time& CommonResponse::_internal_recorded() const {
  const ::grpcagent::Time* p = _impl_.recorded_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::Time&>(
      ::grpcagent::_Time_default_instance_);
}
inline const ::grpcagent::Time& CommonResponse::recorded() const {
  // @@protoc_insertion_point(field_get:grpcagent.CommonResponse.recorded)
  return _internal_recorded();
}
inline void CommonResponse::unsafe_arena_set_allocated_recorded(
    ::grpcagent::Time* recorded) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recorded_);
  }
  _impl_.recorded_ = recorded;
  if (recorded) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.CommonResponse.recorded)
}
inline ::grpcagent::Time* CommonResponse::release_recorded() {
  
  ::grpcagent::Time* temp = _impl_.recorded_;
  _impl_.recorded_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::Time* CommonResponse::unsafe_arena_release_recorded() {
  // @@protoc_insertion_point(field_release:grpcagent.CommonResponse.recorded)
  
  ::grpcagent::Time* temp = _impl_.recorded_;
  _impl_.recorded_ = nullptr;
  return temp;
}
inline ::grpcagent::Time* CommonResponse::_internal_mutable_recorded() {
  
  if (_impl_.recorded_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::Time>(GetArenaForAllocation());
    _impl_.recorded_ = p;
  }
  return _impl_.recorded_;
}
inline ::grpcagent::Time* CommonResponse::mutable_recorded() {
  ::grpcagent::Time* _msg = _internal_mutable_recorded();
  // @@protoc_insertion_point(field_mutable:grpcagent.CommonResponse.recorded)
  return _msg;
}
inline void CommonResponse::set_allocated_recorded(::grpcagent::Time* recorded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recorded_;
  }
  if (recorded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recorded);
    if (message_arena != submessage_arena) {
      recorded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recorded, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recorded_ = recorded;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.CommonResponse.recorded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
