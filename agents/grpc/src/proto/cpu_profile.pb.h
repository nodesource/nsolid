// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fprofile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fprofile_2eproto;
namespace grpcagent {
class CPUProfileArgs;
struct CPUProfileArgsDefaultTypeInternal;
extern CPUProfileArgsDefaultTypeInternal _CPUProfileArgs_default_instance_;
class CPUProfileArgs_MetadataEntry_DoNotUse;
struct CPUProfileArgs_MetadataEntry_DoNotUseDefaultTypeInternal;
extern CPUProfileArgs_MetadataEntry_DoNotUseDefaultTypeInternal _CPUProfileArgs_MetadataEntry_DoNotUse_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::CPUProfileArgs* Arena::CreateMaybeMessage<::grpcagent::CPUProfileArgs>(Arena*);
template<> ::grpcagent::CPUProfileArgs_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::grpcagent::CPUProfileArgs_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class CPUProfileArgs_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CPUProfileArgs_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CPUProfileArgs_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CPUProfileArgs_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CPUProfileArgs_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CPUProfileArgs_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CPUProfileArgs_MetadataEntry_DoNotUse& other);
  static const CPUProfileArgs_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CPUProfileArgs_MetadataEntry_DoNotUse*>(&_CPUProfileArgs_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpcagent.CPUProfileArgs.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpcagent.CPUProfileArgs.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_cpu_5fprofile_2eproto;
};

// -------------------------------------------------------------------

class CPUProfileArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.CPUProfileArgs) */ {
 public:
  inline CPUProfileArgs() : CPUProfileArgs(nullptr) {}
  ~CPUProfileArgs() override;
  explicit PROTOBUF_CONSTEXPR CPUProfileArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPUProfileArgs(const CPUProfileArgs& from);
  CPUProfileArgs(CPUProfileArgs&& from) noexcept
    : CPUProfileArgs() {
    *this = ::std::move(from);
  }

  inline CPUProfileArgs& operator=(const CPUProfileArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUProfileArgs& operator=(CPUProfileArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPUProfileArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPUProfileArgs* internal_default_instance() {
    return reinterpret_cast<const CPUProfileArgs*>(
               &_CPUProfileArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPUProfileArgs& a, CPUProfileArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUProfileArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUProfileArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPUProfileArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPUProfileArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPUProfileArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CPUProfileArgs& from) {
    CPUProfileArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPUProfileArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CPUProfileArgs";
  }
  protected:
  explicit CPUProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kThreadIdFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // uint64 thread_id = 1;
  void clear_thread_id();
  uint64_t thread_id() const;
  void set_thread_id(uint64_t value);
  private:
  uint64_t _internal_thread_id() const;
  void _internal_set_thread_id(uint64_t value);
  public:

  // uint64 duration = 2;
  void clear_duration();
  uint64_t duration() const;
  void set_duration(uint64_t value);
  private:
  uint64_t _internal_duration() const;
  void _internal_set_duration(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.CPUProfileArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CPUProfileArgs_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    uint64_t thread_id_;
    uint64_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cpu_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CPUProfileArgs

// uint64 thread_id = 1;
inline void CPUProfileArgs::clear_thread_id() {
  _impl_.thread_id_ = uint64_t{0u};
}
inline uint64_t CPUProfileArgs::_internal_thread_id() const {
  return _impl_.thread_id_;
}
inline uint64_t CPUProfileArgs::thread_id() const {
  // @@protoc_insertion_point(field_get:grpcagent.CPUProfileArgs.thread_id)
  return _internal_thread_id();
}
inline void CPUProfileArgs::_internal_set_thread_id(uint64_t value) {
  
  _impl_.thread_id_ = value;
}
inline void CPUProfileArgs::set_thread_id(uint64_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:grpcagent.CPUProfileArgs.thread_id)
}

// uint64 duration = 2;
inline void CPUProfileArgs::clear_duration() {
  _impl_.duration_ = uint64_t{0u};
}
inline uint64_t CPUProfileArgs::_internal_duration() const {
  return _impl_.duration_;
}
inline uint64_t CPUProfileArgs::duration() const {
  // @@protoc_insertion_point(field_get:grpcagent.CPUProfileArgs.duration)
  return _internal_duration();
}
inline void CPUProfileArgs::_internal_set_duration(uint64_t value) {
  
  _impl_.duration_ = value;
}
inline void CPUProfileArgs::set_duration(uint64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:grpcagent.CPUProfileArgs.duration)
}

// map<string, string> metadata = 3;
inline int CPUProfileArgs::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int CPUProfileArgs::metadata_size() const {
  return _internal_metadata_size();
}
inline void CPUProfileArgs::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CPUProfileArgs::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CPUProfileArgs::metadata() const {
  // @@protoc_insertion_point(field_map:grpcagent.CPUProfileArgs.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CPUProfileArgs::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CPUProfileArgs::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:grpcagent.CPUProfileArgs.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fprofile_2eproto
