// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#include "info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcagent {
PROTOBUF_CONSTEXPR InfoBody_VersionsEntry_DoNotUse::InfoBody_VersionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InfoBody_VersionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal _InfoBody_VersionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InfoBody::InfoBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.versions_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.app_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpumodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.main_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeenv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpucores_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.processstart_)*/uint64_t{0u}
  , /*decltype(_impl_.totalmem_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoBodyDefaultTypeInternal() {}
  union {
    InfoBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoBodyDefaultTypeInternal _InfoBody_default_instance_;
PROTOBUF_CONSTEXPR InfoEvent::InfoEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoEventDefaultTypeInternal() {}
  union {
    InfoEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoEventDefaultTypeInternal _InfoEvent_default_instance_;
}  // namespace grpcagent
static ::_pb::Metadata file_level_metadata_info_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_info_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_info_2eproto = nullptr;

const uint32_t TableStruct_info_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody_VersionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody_VersionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody_VersionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody_VersionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.app_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.arch_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.cpucores_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.cpumodel_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.execpath_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.main_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.nodeenv_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.processstart_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.totalmem_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoBody, _impl_.versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoEvent, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::InfoEvent, _impl_.body_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::grpcagent::InfoBody_VersionsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::grpcagent::InfoBody)},
  { 31, -1, -1, sizeof(::grpcagent::InfoEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcagent::_InfoBody_VersionsEntry_DoNotUse_default_instance_._instance,
  &::grpcagent::_InfoBody_default_instance_._instance,
  &::grpcagent::_InfoEvent_default_instance_._instance,
};

const char descriptor_table_protodef_info_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ninfo.proto\022\tgrpcagent\032\014common.proto\"\323\002"
  "\n\010InfoBody\022\013\n\003app\030\001 \001(\t\022\014\n\004arch\030\002 \001(\t\022\020\n"
  "\010cpuCores\030\003 \001(\r\022\020\n\010cpuModel\030\004 \001(\t\022\020\n\010exe"
  "cPath\030\005 \001(\t\022\020\n\010hostname\030\006 \001(\t\022\n\n\002id\030\007 \001("
  "\t\022\014\n\004main\030\010 \001(\t\022\017\n\007nodeEnv\030\t \001(\t\022\013\n\003pid\030"
  "\n \001(\r\022\020\n\010platform\030\013 \001(\t\022\024\n\014processStart\030"
  "\014 \001(\004\022\014\n\004tags\030\r \003(\t\022\020\n\010totalMem\030\016 \001(\004\0223\n"
  "\010versions\030\017 \003(\0132!.grpcagent.InfoBody.Ver"
  "sionsEntry\032/\n\rVersionsEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"Y\n\tInfoEvent\022)\n\006comm"
  "on\030\001 \001(\0132\031.grpcagent.CommonResponse\022!\n\004b"
  "ody\030\002 \001(\0132\023.grpcagent.InfoBodyb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_info_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_info_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_info_2eproto = {
    false, false, 478, descriptor_table_protodef_info_2eproto,
    "info.proto",
    &descriptor_table_info_2eproto_once, descriptor_table_info_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_info_2eproto::offsets,
    file_level_metadata_info_2eproto, file_level_enum_descriptors_info_2eproto,
    file_level_service_descriptors_info_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_info_2eproto_getter() {
  return &descriptor_table_info_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_info_2eproto(&descriptor_table_info_2eproto);
namespace grpcagent {

// ===================================================================

InfoBody_VersionsEntry_DoNotUse::InfoBody_VersionsEntry_DoNotUse() {}
InfoBody_VersionsEntry_DoNotUse::InfoBody_VersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InfoBody_VersionsEntry_DoNotUse::MergeFrom(const InfoBody_VersionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InfoBody_VersionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_info_2eproto_getter, &descriptor_table_info_2eproto_once,
      file_level_metadata_info_2eproto[0]);
}

// ===================================================================

class InfoBody::_Internal {
 public:
};

InfoBody::InfoBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &InfoBody::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:grpcagent.InfoBody)
}
InfoBody::InfoBody(const InfoBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , /*decltype(_impl_.versions_)*/{}
    , decltype(_impl_.app_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.cpumodel_){}
    , decltype(_impl_.execpath_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.main_){}
    , decltype(_impl_.nodeenv_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.cpucores_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.processstart_){}
    , decltype(_impl_.totalmem_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  _impl_.app_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app().empty()) {
    _this->_impl_.app_.Set(from._internal_app(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arch().empty()) {
    _this->_impl_.arch_.Set(from._internal_arch(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpumodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpumodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpumodel().empty()) {
    _this->_impl_.cpumodel_.Set(from._internal_cpumodel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execpath().empty()) {
    _this->_impl_.execpath_.Set(from._internal_execpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.main_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_main().empty()) {
    _this->_impl_.main_.Set(from._internal_main(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nodeenv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodeenv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodeenv().empty()) {
    _this->_impl_.nodeenv_.Set(from._internal_nodeenv(), 
      _this->GetArenaForAllocation());
  }
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform().empty()) {
    _this->_impl_.platform_.Set(from._internal_platform(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cpucores_, &from._impl_.cpucores_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totalmem_) -
    reinterpret_cast<char*>(&_impl_.cpucores_)) + sizeof(_impl_.totalmem_));
  // @@protoc_insertion_point(copy_constructor:grpcagent.InfoBody)
}

inline void InfoBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , /*decltype(_impl_.versions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.app_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.cpumodel_){}
    , decltype(_impl_.execpath_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.main_){}
    , decltype(_impl_.nodeenv_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.cpucores_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.processstart_){uint64_t{0u}}
    , decltype(_impl_.totalmem_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpumodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpumodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.main_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nodeenv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodeenv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoBody::~InfoBody() {
  // @@protoc_insertion_point(destructor:grpcagent.InfoBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void InfoBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.versions_.Destruct();
  _impl_.versions_.~MapField();
  _impl_.app_.Destroy();
  _impl_.arch_.Destroy();
  _impl_.cpumodel_.Destroy();
  _impl_.execpath_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.id_.Destroy();
  _impl_.main_.Destroy();
  _impl_.nodeenv_.Destroy();
  _impl_.platform_.Destroy();
}

void InfoBody::ArenaDtor(void* object) {
  InfoBody* _this = reinterpret_cast< InfoBody* >(object);
  _this->_impl_.versions_.Destruct();
}
void InfoBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoBody::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.InfoBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.versions_.Clear();
  _impl_.app_.ClearToEmpty();
  _impl_.arch_.ClearToEmpty();
  _impl_.cpumodel_.ClearToEmpty();
  _impl_.execpath_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.main_.ClearToEmpty();
  _impl_.nodeenv_.ClearToEmpty();
  _impl_.platform_.ClearToEmpty();
  ::memset(&_impl_.cpucores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totalmem_) -
      reinterpret_cast<char*>(&_impl_.cpucores_)) + sizeof(_impl_.totalmem_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.app"));
        } else
          goto handle_unusual;
        continue;
      // string arch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.arch"));
        } else
          goto handle_unusual;
        continue;
      // uint32 cpuCores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cpucores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cpuModel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cpumodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.cpuModel"));
        } else
          goto handle_unusual;
        continue;
      // string execPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_execpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.execPath"));
        } else
          goto handle_unusual;
        continue;
      // string hostname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.hostname"));
        } else
          goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.id"));
        } else
          goto handle_unusual;
        continue;
      // string main = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_main();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.main"));
        } else
          goto handle_unusual;
        continue;
      // string nodeEnv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_nodeenv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.nodeEnv"));
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string platform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.platform"));
        } else
          goto handle_unusual;
        continue;
      // uint64 processStart = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.processstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "grpcagent.InfoBody.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 totalMem = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.totalmem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> versions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.versions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.InfoBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app = 1;
  if (!this->_internal_app().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app().data(), static_cast<int>(this->_internal_app().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.app");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app(), target);
  }

  // string arch = 2;
  if (!this->_internal_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.arch");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arch(), target);
  }

  // uint32 cpuCores = 3;
  if (this->_internal_cpucores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cpucores(), target);
  }

  // string cpuModel = 4;
  if (!this->_internal_cpumodel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpumodel().data(), static_cast<int>(this->_internal_cpumodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.cpuModel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cpumodel(), target);
  }

  // string execPath = 5;
  if (!this->_internal_execpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execpath().data(), static_cast<int>(this->_internal_execpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.execPath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_execpath(), target);
  }

  // string hostname = 6;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.hostname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hostname(), target);
  }

  // string id = 7;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  // string main = 8;
  if (!this->_internal_main().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main().data(), static_cast<int>(this->_internal_main().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.main");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_main(), target);
  }

  // string nodeEnv = 9;
  if (!this->_internal_nodeenv().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeenv().data(), static_cast<int>(this->_internal_nodeenv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.nodeEnv");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nodeenv(), target);
  }

  // uint32 pid = 10;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pid(), target);
  }

  // string platform = 11;
  if (!this->_internal_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.platform");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_platform(), target);
  }

  // uint64 processStart = 12;
  if (this->_internal_processstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_processstart(), target);
  }

  // repeated string tags = 13;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.InfoBody.tags");
    target = stream->WriteString(13, s, target);
  }

  // uint64 totalMem = 14;
  if (this->_internal_totalmem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_totalmem(), target);
  }

  // map<string, string> versions = 15;
  if (!this->_internal_versions().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = InfoBody_VersionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_versions();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "grpcagent.InfoBody.VersionsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "grpcagent.InfoBody.VersionsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.InfoBody)
  return target;
}

size_t InfoBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.InfoBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // map<string, string> versions = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_versions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_versions().begin();
      it != this->_internal_versions().end(); ++it) {
    total_size += InfoBody_VersionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string app = 1;
  if (!this->_internal_app().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app());
  }

  // string arch = 2;
  if (!this->_internal_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string cpuModel = 4;
  if (!this->_internal_cpumodel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpumodel());
  }

  // string execPath = 5;
  if (!this->_internal_execpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execpath());
  }

  // string hostname = 6;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string id = 7;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string main = 8;
  if (!this->_internal_main().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main());
  }

  // string nodeEnv = 9;
  if (!this->_internal_nodeenv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeenv());
  }

  // string platform = 11;
  if (!this->_internal_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // uint32 cpuCores = 3;
  if (this->_internal_cpucores() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpucores());
  }

  // uint32 pid = 10;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint64 processStart = 12;
  if (this->_internal_processstart() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_processstart());
  }

  // uint64 totalMem = 14;
  if (this->_internal_totalmem() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_totalmem());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoBody::GetClassData() const { return &_class_data_; }


void InfoBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoBody*>(&to_msg);
  auto& from = static_cast<const InfoBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.InfoBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.versions_.MergeFrom(from._impl_.versions_);
  if (!from._internal_app().empty()) {
    _this->_internal_set_app(from._internal_app());
  }
  if (!from._internal_arch().empty()) {
    _this->_internal_set_arch(from._internal_arch());
  }
  if (!from._internal_cpumodel().empty()) {
    _this->_internal_set_cpumodel(from._internal_cpumodel());
  }
  if (!from._internal_execpath().empty()) {
    _this->_internal_set_execpath(from._internal_execpath());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_main().empty()) {
    _this->_internal_set_main(from._internal_main());
  }
  if (!from._internal_nodeenv().empty()) {
    _this->_internal_set_nodeenv(from._internal_nodeenv());
  }
  if (!from._internal_platform().empty()) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (from._internal_cpucores() != 0) {
    _this->_internal_set_cpucores(from._internal_cpucores());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_processstart() != 0) {
    _this->_internal_set_processstart(from._internal_processstart());
  }
  if (from._internal_totalmem() != 0) {
    _this->_internal_set_totalmem(from._internal_totalmem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoBody::CopyFrom(const InfoBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.InfoBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoBody::IsInitialized() const {
  return true;
}

void InfoBody::InternalSwap(InfoBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.versions_.InternalSwap(&other->_impl_.versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_, lhs_arena,
      &other->_impl_.app_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arch_, lhs_arena,
      &other->_impl_.arch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpumodel_, lhs_arena,
      &other->_impl_.cpumodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execpath_, lhs_arena,
      &other->_impl_.execpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.main_, lhs_arena,
      &other->_impl_.main_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodeenv_, lhs_arena,
      &other->_impl_.nodeenv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platform_, lhs_arena,
      &other->_impl_.platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoBody, _impl_.totalmem_)
      + sizeof(InfoBody::_impl_.totalmem_)
      - PROTOBUF_FIELD_OFFSET(InfoBody, _impl_.cpucores_)>(
          reinterpret_cast<char*>(&_impl_.cpucores_),
          reinterpret_cast<char*>(&other->_impl_.cpucores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_info_2eproto_getter, &descriptor_table_info_2eproto_once,
      file_level_metadata_info_2eproto[1]);
}

// ===================================================================

class InfoEvent::_Internal {
 public:
  static const ::grpcagent::CommonResponse& common(const InfoEvent* msg);
  static const ::grpcagent::InfoBody& body(const InfoEvent* msg);
};

const ::grpcagent::CommonResponse&
InfoEvent::_Internal::common(const InfoEvent* msg) {
  return *msg->_impl_.common_;
}
const ::grpcagent::InfoBody&
InfoEvent::_Internal::body(const InfoEvent* msg) {
  return *msg->_impl_.body_;
}
void InfoEvent::clear_common() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
}
InfoEvent::InfoEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.InfoEvent)
}
InfoEvent::InfoEvent(const InfoEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::grpcagent::CommonResponse(*from._impl_.common_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::grpcagent::InfoBody(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:grpcagent.InfoEvent)
}

inline void InfoEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InfoEvent::~InfoEvent() {
  // @@protoc_insertion_point(destructor:grpcagent.InfoEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void InfoEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.InfoEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpcagent.CommonResponse common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpcagent.InfoBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.InfoEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpcagent.CommonResponse common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .grpcagent.InfoBody body = 2;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.InfoEvent)
  return target;
}

size_t InfoEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.InfoEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpcagent.CommonResponse common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .grpcagent.InfoBody body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoEvent::GetClassData() const { return &_class_data_; }


void InfoEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoEvent*>(&to_msg);
  auto& from = static_cast<const InfoEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.InfoEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::grpcagent::CommonResponse::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::grpcagent::InfoBody::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoEvent::CopyFrom(const InfoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.InfoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoEvent::IsInitialized() const {
  return true;
}

void InfoEvent::InternalSwap(InfoEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoEvent, _impl_.body_)
      + sizeof(InfoEvent::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(InfoEvent, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_info_2eproto_getter, &descriptor_table_info_2eproto_once,
      file_level_metadata_info_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcagent::InfoBody_VersionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::grpcagent::InfoBody_VersionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::InfoBody_VersionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::InfoBody*
Arena::CreateMaybeMessage< ::grpcagent::InfoBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::InfoBody >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::InfoEvent*
Arena::CreateMaybeMessage< ::grpcagent::InfoEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::InfoEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
