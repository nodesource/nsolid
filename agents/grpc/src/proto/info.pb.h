// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_info_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_info_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_info_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_info_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_info_2eproto;
namespace grpcagent {
class InfoBody;
struct InfoBodyDefaultTypeInternal;
extern InfoBodyDefaultTypeInternal _InfoBody_default_instance_;
class InfoBody_VersionsEntry_DoNotUse;
struct InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal;
extern InfoBody_VersionsEntry_DoNotUseDefaultTypeInternal _InfoBody_VersionsEntry_DoNotUse_default_instance_;
class InfoEvent;
struct InfoEventDefaultTypeInternal;
extern InfoEventDefaultTypeInternal _InfoEvent_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::InfoBody* Arena::CreateMaybeMessage<::grpcagent::InfoBody>(Arena*);
template<> ::grpcagent::InfoBody_VersionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpcagent::InfoBody_VersionsEntry_DoNotUse>(Arena*);
template<> ::grpcagent::InfoEvent* Arena::CreateMaybeMessage<::grpcagent::InfoEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class InfoBody_VersionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InfoBody_VersionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InfoBody_VersionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  InfoBody_VersionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InfoBody_VersionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InfoBody_VersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InfoBody_VersionsEntry_DoNotUse& other);
  static const InfoBody_VersionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InfoBody_VersionsEntry_DoNotUse*>(&_InfoBody_VersionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpcagent.InfoBody.VersionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpcagent.InfoBody.VersionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_info_2eproto;
};

// -------------------------------------------------------------------

class InfoBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.InfoBody) */ {
 public:
  inline InfoBody() : InfoBody(nullptr) {}
  ~InfoBody() override;
  explicit PROTOBUF_CONSTEXPR InfoBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoBody(const InfoBody& from);
  InfoBody(InfoBody&& from) noexcept
    : InfoBody() {
    *this = ::std::move(from);
  }

  inline InfoBody& operator=(const InfoBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoBody& operator=(InfoBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoBody* internal_default_instance() {
    return reinterpret_cast<const InfoBody*>(
               &_InfoBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InfoBody& a, InfoBody& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfoBody& from) {
    InfoBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.InfoBody";
  }
  protected:
  explicit InfoBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 13,
    kVersionsFieldNumber = 15,
    kAppFieldNumber = 1,
    kArchFieldNumber = 2,
    kCpuModelFieldNumber = 4,
    kExecPathFieldNumber = 5,
    kHostnameFieldNumber = 6,
    kIdFieldNumber = 7,
    kMainFieldNumber = 8,
    kNodeEnvFieldNumber = 9,
    kPlatformFieldNumber = 11,
    kCpuCoresFieldNumber = 3,
    kPidFieldNumber = 10,
    kProcessStartFieldNumber = 12,
    kTotalMemFieldNumber = 14,
  };
  // repeated string tags = 13;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // map<string, string> versions = 15;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_versions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_versions();

  // string app = 1;
  void clear_app();
  const std::string& app() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app();
  PROTOBUF_NODISCARD std::string* release_app();
  void set_allocated_app(std::string* app);
  private:
  const std::string& _internal_app() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app(const std::string& value);
  std::string* _internal_mutable_app();
  public:

  // string arch = 2;
  void clear_arch();
  const std::string& arch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arch();
  PROTOBUF_NODISCARD std::string* release_arch();
  void set_allocated_arch(std::string* arch);
  private:
  const std::string& _internal_arch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arch(const std::string& value);
  std::string* _internal_mutable_arch();
  public:

  // string cpuModel = 4;
  void clear_cpumodel();
  const std::string& cpumodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpumodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpumodel();
  PROTOBUF_NODISCARD std::string* release_cpumodel();
  void set_allocated_cpumodel(std::string* cpumodel);
  private:
  const std::string& _internal_cpumodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpumodel(const std::string& value);
  std::string* _internal_mutable_cpumodel();
  public:

  // string execPath = 5;
  void clear_execpath();
  const std::string& execpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_execpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_execpath();
  PROTOBUF_NODISCARD std::string* release_execpath();
  void set_allocated_execpath(std::string* execpath);
  private:
  const std::string& _internal_execpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execpath(const std::string& value);
  std::string* _internal_mutable_execpath();
  public:

  // string hostname = 6;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string id = 7;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string main = 8;
  void clear_main();
  const std::string& main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main();
  PROTOBUF_NODISCARD std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // string nodeEnv = 9;
  void clear_nodeenv();
  const std::string& nodeenv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodeenv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodeenv();
  PROTOBUF_NODISCARD std::string* release_nodeenv();
  void set_allocated_nodeenv(std::string* nodeenv);
  private:
  const std::string& _internal_nodeenv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeenv(const std::string& value);
  std::string* _internal_mutable_nodeenv();
  public:

  // string platform = 11;
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // uint32 cpuCores = 3;
  void clear_cpucores();
  uint32_t cpucores() const;
  void set_cpucores(uint32_t value);
  private:
  uint32_t _internal_cpucores() const;
  void _internal_set_cpucores(uint32_t value);
  public:

  // uint32 pid = 10;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint64 processStart = 12;
  void clear_processstart();
  uint64_t processstart() const;
  void set_processstart(uint64_t value);
  private:
  uint64_t _internal_processstart() const;
  void _internal_set_processstart(uint64_t value);
  public:

  // uint64 totalMem = 14;
  void clear_totalmem();
  uint64_t totalmem() const;
  void set_totalmem(uint64_t value);
  private:
  uint64_t _internal_totalmem() const;
  void _internal_set_totalmem(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.InfoBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        InfoBody_VersionsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arch_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpumodel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execpath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeenv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
    uint32_t cpucores_;
    uint32_t pid_;
    uint64_t processstart_;
    uint64_t totalmem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_info_2eproto;
};
// -------------------------------------------------------------------

class InfoEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.InfoEvent) */ {
 public:
  inline InfoEvent() : InfoEvent(nullptr) {}
  ~InfoEvent() override;
  explicit PROTOBUF_CONSTEXPR InfoEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoEvent(const InfoEvent& from);
  InfoEvent(InfoEvent&& from) noexcept
    : InfoEvent() {
    *this = ::std::move(from);
  }

  inline InfoEvent& operator=(const InfoEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoEvent& operator=(InfoEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoEvent* internal_default_instance() {
    return reinterpret_cast<const InfoEvent*>(
               &_InfoEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InfoEvent& a, InfoEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfoEvent& from) {
    InfoEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.InfoEvent";
  }
  protected:
  explicit InfoEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.InfoBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::InfoBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::InfoBody* release_body();
  ::grpcagent::InfoBody* mutable_body();
  void set_allocated_body(::grpcagent::InfoBody* body);
  private:
  const ::grpcagent::InfoBody& _internal_body() const;
  ::grpcagent::InfoBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::InfoBody* body);
  ::grpcagent::InfoBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.InfoEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::InfoBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_info_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InfoBody

// string app = 1;
inline void InfoBody::clear_app() {
  _impl_.app_.ClearToEmpty();
}
inline const std::string& InfoBody::app() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.app)
  return _internal_app();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_app(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.app)
}
inline std::string* InfoBody::mutable_app() {
  std::string* _s = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.app)
  return _s;
}
inline const std::string& InfoBody::_internal_app() const {
  return _impl_.app_.Get();
}
inline void InfoBody::_internal_set_app(const std::string& value) {
  
  _impl_.app_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_app() {
  
  return _impl_.app_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_app() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.app)
  return _impl_.app_.Release();
}
inline void InfoBody::set_allocated_app(std::string* app) {
  if (app != nullptr) {
    
  } else {
    
  }
  _impl_.app_.SetAllocated(app, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_.IsDefault()) {
    _impl_.app_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.app)
}

// string arch = 2;
inline void InfoBody::clear_arch() {
  _impl_.arch_.ClearToEmpty();
}
inline const std::string& InfoBody::arch() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.arch)
  return _internal_arch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_arch(ArgT0&& arg0, ArgT... args) {
 
 _impl_.arch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.arch)
}
inline std::string* InfoBody::mutable_arch() {
  std::string* _s = _internal_mutable_arch();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.arch)
  return _s;
}
inline const std::string& InfoBody::_internal_arch() const {
  return _impl_.arch_.Get();
}
inline void InfoBody::_internal_set_arch(const std::string& value) {
  
  _impl_.arch_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_arch() {
  
  return _impl_.arch_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_arch() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.arch)
  return _impl_.arch_.Release();
}
inline void InfoBody::set_allocated_arch(std::string* arch) {
  if (arch != nullptr) {
    
  } else {
    
  }
  _impl_.arch_.SetAllocated(arch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arch_.IsDefault()) {
    _impl_.arch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.arch)
}

// uint32 cpuCores = 3;
inline void InfoBody::clear_cpucores() {
  _impl_.cpucores_ = 0u;
}
inline uint32_t InfoBody::_internal_cpucores() const {
  return _impl_.cpucores_;
}
inline uint32_t InfoBody::cpucores() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.cpuCores)
  return _internal_cpucores();
}
inline void InfoBody::_internal_set_cpucores(uint32_t value) {
  
  _impl_.cpucores_ = value;
}
inline void InfoBody::set_cpucores(uint32_t value) {
  _internal_set_cpucores(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.cpuCores)
}

// string cpuModel = 4;
inline void InfoBody::clear_cpumodel() {
  _impl_.cpumodel_.ClearToEmpty();
}
inline const std::string& InfoBody::cpumodel() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.cpuModel)
  return _internal_cpumodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_cpumodel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpumodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.cpuModel)
}
inline std::string* InfoBody::mutable_cpumodel() {
  std::string* _s = _internal_mutable_cpumodel();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.cpuModel)
  return _s;
}
inline const std::string& InfoBody::_internal_cpumodel() const {
  return _impl_.cpumodel_.Get();
}
inline void InfoBody::_internal_set_cpumodel(const std::string& value) {
  
  _impl_.cpumodel_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_cpumodel() {
  
  return _impl_.cpumodel_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_cpumodel() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.cpuModel)
  return _impl_.cpumodel_.Release();
}
inline void InfoBody::set_allocated_cpumodel(std::string* cpumodel) {
  if (cpumodel != nullptr) {
    
  } else {
    
  }
  _impl_.cpumodel_.SetAllocated(cpumodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpumodel_.IsDefault()) {
    _impl_.cpumodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.cpuModel)
}

// string execPath = 5;
inline void InfoBody::clear_execpath() {
  _impl_.execpath_.ClearToEmpty();
}
inline const std::string& InfoBody::execpath() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.execPath)
  return _internal_execpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_execpath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.execpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.execPath)
}
inline std::string* InfoBody::mutable_execpath() {
  std::string* _s = _internal_mutable_execpath();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.execPath)
  return _s;
}
inline const std::string& InfoBody::_internal_execpath() const {
  return _impl_.execpath_.Get();
}
inline void InfoBody::_internal_set_execpath(const std::string& value) {
  
  _impl_.execpath_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_execpath() {
  
  return _impl_.execpath_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_execpath() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.execPath)
  return _impl_.execpath_.Release();
}
inline void InfoBody::set_allocated_execpath(std::string* execpath) {
  if (execpath != nullptr) {
    
  } else {
    
  }
  _impl_.execpath_.SetAllocated(execpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.execpath_.IsDefault()) {
    _impl_.execpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.execPath)
}

// string hostname = 6;
inline void InfoBody::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& InfoBody::hostname() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.hostname)
}
inline std::string* InfoBody::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.hostname)
  return _s;
}
inline const std::string& InfoBody::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void InfoBody::_internal_set_hostname(const std::string& value) {
  
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_hostname() {
  
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_hostname() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.hostname)
  return _impl_.hostname_.Release();
}
inline void InfoBody::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.hostname)
}

// string id = 7;
inline void InfoBody::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& InfoBody::id() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.id)
}
inline std::string* InfoBody::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.id)
  return _s;
}
inline const std::string& InfoBody::_internal_id() const {
  return _impl_.id_.Get();
}
inline void InfoBody::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_id() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.id)
  return _impl_.id_.Release();
}
inline void InfoBody::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.id)
}

// string main = 8;
inline void InfoBody::clear_main() {
  _impl_.main_.ClearToEmpty();
}
inline const std::string& InfoBody::main() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.main)
  return _internal_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_main(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.main)
}
inline std::string* InfoBody::mutable_main() {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.main)
  return _s;
}
inline const std::string& InfoBody::_internal_main() const {
  return _impl_.main_.Get();
}
inline void InfoBody::_internal_set_main(const std::string& value) {
  
  _impl_.main_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_main() {
  
  return _impl_.main_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_main() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.main)
  return _impl_.main_.Release();
}
inline void InfoBody::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  _impl_.main_.SetAllocated(main, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_.IsDefault()) {
    _impl_.main_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.main)
}

// string nodeEnv = 9;
inline void InfoBody::clear_nodeenv() {
  _impl_.nodeenv_.ClearToEmpty();
}
inline const std::string& InfoBody::nodeenv() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.nodeEnv)
  return _internal_nodeenv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_nodeenv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodeenv_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.nodeEnv)
}
inline std::string* InfoBody::mutable_nodeenv() {
  std::string* _s = _internal_mutable_nodeenv();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.nodeEnv)
  return _s;
}
inline const std::string& InfoBody::_internal_nodeenv() const {
  return _impl_.nodeenv_.Get();
}
inline void InfoBody::_internal_set_nodeenv(const std::string& value) {
  
  _impl_.nodeenv_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_nodeenv() {
  
  return _impl_.nodeenv_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_nodeenv() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.nodeEnv)
  return _impl_.nodeenv_.Release();
}
inline void InfoBody::set_allocated_nodeenv(std::string* nodeenv) {
  if (nodeenv != nullptr) {
    
  } else {
    
  }
  _impl_.nodeenv_.SetAllocated(nodeenv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodeenv_.IsDefault()) {
    _impl_.nodeenv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.nodeEnv)
}

// uint32 pid = 10;
inline void InfoBody::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t InfoBody::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t InfoBody::pid() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.pid)
  return _internal_pid();
}
inline void InfoBody::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void InfoBody::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.pid)
}

// string platform = 11;
inline void InfoBody::clear_platform() {
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& InfoBody::platform() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoBody::set_platform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.platform)
}
inline std::string* InfoBody::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.platform)
  return _s;
}
inline const std::string& InfoBody::_internal_platform() const {
  return _impl_.platform_.Get();
}
inline void InfoBody::_internal_set_platform(const std::string& value) {
  
  _impl_.platform_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoBody::_internal_mutable_platform() {
  
  return _impl_.platform_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoBody::release_platform() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoBody.platform)
  return _impl_.platform_.Release();
}
inline void InfoBody::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  _impl_.platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoBody.platform)
}

// uint64 processStart = 12;
inline void InfoBody::clear_processstart() {
  _impl_.processstart_ = uint64_t{0u};
}
inline uint64_t InfoBody::_internal_processstart() const {
  return _impl_.processstart_;
}
inline uint64_t InfoBody::processstart() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.processStart)
  return _internal_processstart();
}
inline void InfoBody::_internal_set_processstart(uint64_t value) {
  
  _impl_.processstart_ = value;
}
inline void InfoBody::set_processstart(uint64_t value) {
  _internal_set_processstart(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.processStart)
}

// repeated string tags = 13;
inline int InfoBody::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int InfoBody::tags_size() const {
  return _internal_tags_size();
}
inline void InfoBody::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* InfoBody::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:grpcagent.InfoBody.tags)
  return _s;
}
inline const std::string& InfoBody::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& InfoBody::tags(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.tags)
  return _internal_tags(index);
}
inline std::string* InfoBody::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoBody.tags)
  return _impl_.tags_.Mutable(index);
}
inline void InfoBody::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.tags)
}
inline void InfoBody::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.tags)
}
inline void InfoBody::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpcagent.InfoBody.tags)
}
inline void InfoBody::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpcagent.InfoBody.tags)
}
inline std::string* InfoBody::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void InfoBody::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpcagent.InfoBody.tags)
}
inline void InfoBody::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpcagent.InfoBody.tags)
}
inline void InfoBody::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpcagent.InfoBody.tags)
}
inline void InfoBody::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpcagent.InfoBody.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InfoBody::tags() const {
  // @@protoc_insertion_point(field_list:grpcagent.InfoBody.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InfoBody::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.InfoBody.tags)
  return &_impl_.tags_;
}

// uint64 totalMem = 14;
inline void InfoBody::clear_totalmem() {
  _impl_.totalmem_ = uint64_t{0u};
}
inline uint64_t InfoBody::_internal_totalmem() const {
  return _impl_.totalmem_;
}
inline uint64_t InfoBody::totalmem() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoBody.totalMem)
  return _internal_totalmem();
}
inline void InfoBody::_internal_set_totalmem(uint64_t value) {
  
  _impl_.totalmem_ = value;
}
inline void InfoBody::set_totalmem(uint64_t value) {
  _internal_set_totalmem(value);
  // @@protoc_insertion_point(field_set:grpcagent.InfoBody.totalMem)
}

// map<string, string> versions = 15;
inline int InfoBody::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int InfoBody::versions_size() const {
  return _internal_versions_size();
}
inline void InfoBody::clear_versions() {
  _impl_.versions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InfoBody::_internal_versions() const {
  return _impl_.versions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InfoBody::versions() const {
  // @@protoc_insertion_point(field_map:grpcagent.InfoBody.versions)
  return _internal_versions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InfoBody::_internal_mutable_versions() {
  return _impl_.versions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InfoBody::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_map:grpcagent.InfoBody.versions)
  return _internal_mutable_versions();
}

// -------------------------------------------------------------------

// InfoEvent

// .grpcagent.CommonResponse common = 1;
inline bool InfoEvent::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool InfoEvent::has_common() const {
  return _internal_has_common();
}
inline const ::grpcagent::CommonResponse& InfoEvent::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& InfoEvent::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoEvent.common)
  return _internal_common();
}
inline void InfoEvent::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.InfoEvent.common)
}
inline ::grpcagent::CommonResponse* InfoEvent::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* InfoEvent::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoEvent.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* InfoEvent::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* InfoEvent::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoEvent.common)
  return _msg;
}
inline void InfoEvent::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common));
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoEvent.common)
}

// .grpcagent.InfoBody body = 2;
inline bool InfoEvent::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool InfoEvent::has_body() const {
  return _internal_has_body();
}
inline void InfoEvent::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::InfoBody& InfoEvent::_internal_body() const {
  const ::grpcagent::InfoBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::InfoBody&>(
      ::grpcagent::_InfoBody_default_instance_);
}
inline const ::grpcagent::InfoBody& InfoEvent::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.InfoEvent.body)
  return _internal_body();
}
inline void InfoEvent::unsafe_arena_set_allocated_body(
    ::grpcagent::InfoBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.InfoEvent.body)
}
inline ::grpcagent::InfoBody* InfoEvent::release_body() {
  
  ::grpcagent::InfoBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::InfoBody* InfoEvent::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.InfoEvent.body)
  
  ::grpcagent::InfoBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::InfoBody* InfoEvent::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::InfoBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::InfoBody* InfoEvent::mutable_body() {
  ::grpcagent::InfoBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.InfoEvent.body)
  return _msg;
}
inline void InfoEvent::set_allocated_body(::grpcagent::InfoBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.InfoEvent.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_info_2eproto
