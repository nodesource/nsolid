// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#include "metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcagent {
PROTOBUF_CONSTEXPR ProcessMetrics::ProcessMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.uptime_)*/0
  , /*decltype(_impl_.systemuptime_)*/0
  , /*decltype(_impl_.freemem_)*/int64_t{0}
  , /*decltype(_impl_.blockinputopcount_)*/0
  , /*decltype(_impl_.blockoutputopcount_)*/0
  , /*decltype(_impl_.ctxswitchinvoluntarycount_)*/0
  , /*decltype(_impl_.ctxswitchvoluntarycount_)*/0
  , /*decltype(_impl_.ipcreceivedcount_)*/0
  , /*decltype(_impl_.ipcsentcount_)*/0
  , /*decltype(_impl_.pagefaulthardcount_)*/0
  , /*decltype(_impl_.pagefaultsoftcount_)*/0
  , /*decltype(_impl_.signalcount_)*/0
  , /*decltype(_impl_.swapcount_)*/0
  , /*decltype(_impl_.rss_)*/int64_t{0}
  , /*decltype(_impl_.load1m_)*/0
  , /*decltype(_impl_.load5m_)*/0
  , /*decltype(_impl_.load15m_)*/0
  , /*decltype(_impl_.cpuuserpercent_)*/0
  , /*decltype(_impl_.cpusystempercent_)*/0
  , /*decltype(_impl_.cpupercent_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessMetricsDefaultTypeInternal() {}
  union {
    ProcessMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessMetricsDefaultTypeInternal _ProcessMetrics_default_instance_;
PROTOBUF_CONSTEXPR ThreadMetrics::ThreadMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.threadname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.threadid_)*/0
  , /*decltype(_impl_.activehandles_)*/0
  , /*decltype(_impl_.heaptotal_)*/int64_t{0}
  , /*decltype(_impl_.totalheapsizeexecutable_)*/int64_t{0}
  , /*decltype(_impl_.totalphysicalsize_)*/int64_t{0}
  , /*decltype(_impl_.totalavailablesize_)*/int64_t{0}
  , /*decltype(_impl_.heapused_)*/int64_t{0}
  , /*decltype(_impl_.activerequests_)*/0
  , /*decltype(_impl_.numberofnativecontexts_)*/0
  , /*decltype(_impl_.heapsizelimit_)*/int64_t{0}
  , /*decltype(_impl_.mallocedmemory_)*/int64_t{0}
  , /*decltype(_impl_.externalmem_)*/int64_t{0}
  , /*decltype(_impl_.peakmallocedmemory_)*/int64_t{0}
  , /*decltype(_impl_.numberofdetachedcontexts_)*/0
  , /*decltype(_impl_.gccount_)*/0
  , /*decltype(_impl_.gcforcedcount_)*/0
  , /*decltype(_impl_.gcfullcount_)*/0
  , /*decltype(_impl_.gcmajorcount_)*/0
  , /*decltype(_impl_.dnscount_)*/0
  , /*decltype(_impl_.httpclientabortcount_)*/0
  , /*decltype(_impl_.httpclientcount_)*/0
  , /*decltype(_impl_.httpserverabortcount_)*/0
  , /*decltype(_impl_.httpservercount_)*/0
  , /*decltype(_impl_.loopidletime_)*/int64_t{0}
  , /*decltype(_impl_.loopiterations_)*/0
  , /*decltype(_impl_.loopiterwithevents_)*/0
  , /*decltype(_impl_.eventsprocessed_)*/0
  , /*decltype(_impl_.eventswaiting_)*/0
  , /*decltype(_impl_.providerdelay_)*/int64_t{0}
  , /*decltype(_impl_.processingdelay_)*/int64_t{0}
  , /*decltype(_impl_.looptotalcount_)*/0
  , /*decltype(_impl_.pipeservercreatedcount_)*/0
  , /*decltype(_impl_.pipeserverdestroyedcount_)*/0
  , /*decltype(_impl_.pipesocketcreatedcount_)*/0
  , /*decltype(_impl_.pipesocketdestroyedcount_)*/0
  , /*decltype(_impl_.tcpservercreatedcount_)*/0
  , /*decltype(_impl_.tcpserverdestroyedcount_)*/0
  , /*decltype(_impl_.tcpsocketcreatedcount_)*/0
  , /*decltype(_impl_.tcpsocketdestroyedcount_)*/0
  , /*decltype(_impl_.udpsocketcreatedcount_)*/0
  , /*decltype(_impl_.udpsocketdestroyedcount_)*/0
  , /*decltype(_impl_.promisecreatedcount_)*/0
  , /*decltype(_impl_.promiseresolvedcount_)*/0
  , /*decltype(_impl_.fshandlesopenedcount_)*/0
  , /*decltype(_impl_.gcdurus99ptile_)*/int64_t{0}
  , /*decltype(_impl_.gcdurusmedian_)*/int64_t{0}
  , /*decltype(_impl_.dns99ptile_)*/int64_t{0}
  , /*decltype(_impl_.dnsmedian_)*/int64_t{0}
  , /*decltype(_impl_.httpclient99ptile_)*/int64_t{0}
  , /*decltype(_impl_.httpclientmedian_)*/int64_t{0}
  , /*decltype(_impl_.httpserver99ptile_)*/int64_t{0}
  , /*decltype(_impl_.fshandlesclosedcount_)*/0
  , /*decltype(_impl_.loopavgtasks_)*/0
  , /*decltype(_impl_.httpservermedian_)*/int64_t{0}
  , /*decltype(_impl_.looputilization_)*/0
  , /*decltype(_impl_.res5s_)*/0
  , /*decltype(_impl_.res1m_)*/0
  , /*decltype(_impl_.res5m_)*/0
  , /*decltype(_impl_.res15m_)*/0
  , /*decltype(_impl_.loopestimatedlag_)*/0
  , /*decltype(_impl_.loopidlepercent_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThreadMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadMetricsDefaultTypeInternal() {}
  union {
    ThreadMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadMetricsDefaultTypeInternal _ThreadMetrics_default_instance_;
PROTOBUF_CONSTEXPR MetricsBody::MetricsBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.threadmetrics_)*/{}
  , /*decltype(_impl_.processmetrics_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsBodyDefaultTypeInternal() {}
  union {
    MetricsBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsBodyDefaultTypeInternal _MetricsBody_default_instance_;
PROTOBUF_CONSTEXPR Metrics::Metrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsDefaultTypeInternal() {}
  union {
    Metrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsDefaultTypeInternal _Metrics_default_instance_;
}  // namespace grpcagent
static ::_pb::Metadata file_level_metadata_metrics_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_metrics_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_metrics_2eproto = nullptr;

const uint32_t TableStruct_metrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.uptime_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.systemuptime_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.freemem_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.blockinputopcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.blockoutputopcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.ctxswitchinvoluntarycount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.ctxswitchvoluntarycount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.ipcreceivedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.ipcsentcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.pagefaulthardcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.pagefaultsoftcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.signalcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.swapcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.rss_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.load1m_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.load5m_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.load15m_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.cpuuserpercent_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.cpusystempercent_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.cpupercent_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProcessMetrics, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.threadid_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.activehandles_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.activerequests_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.heaptotal_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.totalheapsizeexecutable_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.totalphysicalsize_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.totalavailablesize_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.heapused_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.heapsizelimit_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.mallocedmemory_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.externalmem_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.peakmallocedmemory_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.numberofnativecontexts_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.numberofdetachedcontexts_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.gccount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.gcforcedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.gcfullcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.gcmajorcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.dnscount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpclientabortcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpclientcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpserverabortcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpservercount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.loopidletime_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.loopiterations_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.loopiterwithevents_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.eventsprocessed_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.eventswaiting_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.providerdelay_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.processingdelay_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.looptotalcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.pipeservercreatedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.pipeserverdestroyedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.pipesocketcreatedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.pipesocketdestroyedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.tcpservercreatedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.tcpserverdestroyedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.tcpsocketcreatedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.tcpsocketdestroyedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.udpsocketcreatedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.udpsocketdestroyedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.promisecreatedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.promiseresolvedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.fshandlesopenedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.fshandlesclosedcount_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.gcdurus99ptile_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.gcdurusmedian_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.dns99ptile_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.dnsmedian_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpclient99ptile_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpclientmedian_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpserver99ptile_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.httpservermedian_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.looputilization_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.res5s_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.res1m_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.res5m_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.res15m_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.loopavgtasks_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.loopestimatedlag_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.loopidlepercent_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ThreadMetrics, _impl_.threadname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::MetricsBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::MetricsBody, _impl_.processmetrics_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::MetricsBody, _impl_.threadmetrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::Metrics, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::Metrics, _impl_.body_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcagent::ProcessMetrics)},
  { 29, -1, -1, sizeof(::grpcagent::ThreadMetrics)},
  { 98, -1, -1, sizeof(::grpcagent::MetricsBody)},
  { 106, -1, -1, sizeof(::grpcagent::Metrics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcagent::_ProcessMetrics_default_instance_._instance,
  &::grpcagent::_ThreadMetrics_default_instance_._instance,
  &::grpcagent::_MetricsBody_default_instance_._instance,
  &::grpcagent::_Metrics_default_instance_._instance,
};

const char descriptor_table_protodef_metrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmetrics.proto\022\tgrpcagent\032\014common.proto"
  "\"\206\004\n\016ProcessMetrics\022\021\n\ttimestamp\030\001 \001(\003\022\016"
  "\n\006uptime\030\002 \001(\005\022\024\n\014systemUptime\030\003 \001(\005\022\017\n\007"
  "freeMem\030\004 \001(\003\022\031\n\021blockInputOpCount\030\005 \001(\005"
  "\022\032\n\022blockOutputOpCount\030\006 \001(\005\022!\n\031ctxSwitc"
  "hInvoluntaryCount\030\007 \001(\005\022\037\n\027ctxSwitchVolu"
  "ntaryCount\030\010 \001(\005\022\030\n\020ipcReceivedCount\030\t \001"
  "(\005\022\024\n\014ipcSentCount\030\n \001(\005\022\032\n\022pageFaultHar"
  "dCount\030\013 \001(\005\022\032\n\022pageFaultSoftCount\030\014 \001(\005"
  "\022\023\n\013signalCount\030\r \001(\005\022\021\n\tswapCount\030\016 \001(\005"
  "\022\013\n\003rss\030\017 \001(\003\022\016\n\006load1m\030\020 \001(\001\022\016\n\006load5m\030"
  "\021 \001(\001\022\017\n\007load15m\030\022 \001(\001\022\026\n\016cpuUserPercent"
  "\030\023 \001(\001\022\030\n\020cpuSystemPercent\030\024 \001(\001\022\022\n\ncpuP"
  "ercent\030\025 \001(\001\022\r\n\005title\030\026 \001(\t\022\014\n\004user\030\027 \001("
  "\t\"\305\014\n\rThreadMetrics\022\020\n\010threadId\030\001 \001(\005\022\021\n"
  "\ttimestamp\030\002 \001(\003\022\025\n\ractiveHandles\030\003 \001(\005\022"
  "\026\n\016activeRequests\030\004 \001(\005\022\021\n\theapTotal\030\005 \001"
  "(\003\022\037\n\027totalHeapSizeExecutable\030\006 \001(\003\022\031\n\021t"
  "otalPhysicalSize\030\007 \001(\003\022\032\n\022totalAvailable"
  "Size\030\010 \001(\003\022\020\n\010heapUsed\030\t \001(\003\022\025\n\rheapSize"
  "Limit\030\n \001(\003\022\026\n\016mallocedMemory\030\013 \001(\003\022\023\n\013e"
  "xternalMem\030\014 \001(\003\022\032\n\022peakMallocedMemory\030\r"
  " \001(\003\022\036\n\026numberOfNativeContexts\030\016 \001(\005\022 \n\030"
  "numberOfDetachedContexts\030\017 \001(\005\022\017\n\007gcCoun"
  "t\030\020 \001(\005\022\025\n\rgcForcedCount\030\021 \001(\005\022\023\n\013gcFull"
  "Count\030\022 \001(\005\022\024\n\014gcMajorCount\030\023 \001(\005\022\020\n\010dns"
  "Count\030\024 \001(\005\022\034\n\024httpClientAbortCount\030\025 \001("
  "\005\022\027\n\017httpClientCount\030\026 \001(\005\022\034\n\024httpServer"
  "AbortCount\030\027 \001(\005\022\027\n\017httpServerCount\030\030 \001("
  "\005\022\024\n\014loopIdleTime\030\031 \001(\003\022\026\n\016loopIteration"
  "s\030\032 \001(\005\022\032\n\022loopIterWithEvents\030\033 \001(\005\022\027\n\017e"
  "ventsProcessed\030\034 \001(\005\022\025\n\reventsWaiting\030\035 "
  "\001(\005\022\025\n\rproviderDelay\030\036 \001(\003\022\027\n\017processing"
  "Delay\030\037 \001(\003\022\026\n\016loopTotalCount\030  \001(\005\022\036\n\026p"
  "ipeServerCreatedCount\030! \001(\005\022 \n\030pipeServe"
  "rDestroyedCount\030\" \001(\005\022\036\n\026pipeSocketCreat"
  "edCount\030# \001(\005\022 \n\030pipeSocketDestroyedCoun"
  "t\030$ \001(\005\022\035\n\025tcpServerCreatedCount\030% \001(\005\022\037"
  "\n\027tcpServerDestroyedCount\030& \001(\005\022\035\n\025tcpSo"
  "cketCreatedCount\030\' \001(\005\022\037\n\027tcpSocketDestr"
  "oyedCount\030( \001(\005\022\035\n\025udpSocketCreatedCount"
  "\030) \001(\005\022\037\n\027udpSocketDestroyedCount\030* \001(\005\022"
  "\033\n\023promiseCreatedCount\030+ \001(\005\022\034\n\024promiseR"
  "esolvedCount\030, \001(\005\022\034\n\024fsHandlesOpenedCou"
  "nt\030- \001(\005\022\034\n\024fsHandlesClosedCount\030. \001(\005\022\026"
  "\n\016gcDurUs99Ptile\030/ \001(\003\022\025\n\rgcDurUsMedian\030"
  "0 \001(\003\022\022\n\ndns99Ptile\0301 \001(\003\022\021\n\tdnsMedian\0302"
  " \001(\003\022\031\n\021httpClient99Ptile\0303 \001(\003\022\030\n\020httpC"
  "lientMedian\0304 \001(\003\022\031\n\021httpServer99Ptile\0305"
  " \001(\003\022\030\n\020httpServerMedian\0306 \001(\003\022\027\n\017loopUt"
  "ilization\0307 \001(\001\022\r\n\005res5s\0308 \001(\001\022\r\n\005res1m\030"
  "9 \001(\001\022\r\n\005res5m\030: \001(\001\022\016\n\006res15m\030; \001(\001\022\024\n\014"
  "loopAvgTasks\030< \001(\005\022\030\n\020loopEstimatedLag\030="
  " \001(\001\022\027\n\017loopIdlePercent\030> \001(\001\022\022\n\nthreadN"
  "ame\030\? \001(\t\"q\n\013MetricsBody\0221\n\016processMetri"
  "cs\030\001 \001(\0132\031.grpcagent.ProcessMetrics\022/\n\rt"
  "hreadMetrics\030\002 \003(\0132\030.grpcagent.ThreadMet"
  "rics\"Z\n\007Metrics\022)\n\006common\030\001 \001(\0132\031.grpcag"
  "ent.CommonResponse\022$\n\004body\030\002 \001(\0132\026.grpca"
  "gent.MetricsBodyb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_metrics_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_metrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metrics_2eproto = {
    false, false, 2384, descriptor_table_protodef_metrics_2eproto,
    "metrics.proto",
    &descriptor_table_metrics_2eproto_once, descriptor_table_metrics_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_metrics_2eproto::offsets,
    file_level_metadata_metrics_2eproto, file_level_enum_descriptors_metrics_2eproto,
    file_level_service_descriptors_metrics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metrics_2eproto_getter() {
  return &descriptor_table_metrics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metrics_2eproto(&descriptor_table_metrics_2eproto);
namespace grpcagent {

// ===================================================================

class ProcessMetrics::_Internal {
 public:
};

ProcessMetrics::ProcessMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.ProcessMetrics)
}
ProcessMetrics::ProcessMetrics(const ProcessMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.systemuptime_){}
    , decltype(_impl_.freemem_){}
    , decltype(_impl_.blockinputopcount_){}
    , decltype(_impl_.blockoutputopcount_){}
    , decltype(_impl_.ctxswitchinvoluntarycount_){}
    , decltype(_impl_.ctxswitchvoluntarycount_){}
    , decltype(_impl_.ipcreceivedcount_){}
    , decltype(_impl_.ipcsentcount_){}
    , decltype(_impl_.pagefaulthardcount_){}
    , decltype(_impl_.pagefaultsoftcount_){}
    , decltype(_impl_.signalcount_){}
    , decltype(_impl_.swapcount_){}
    , decltype(_impl_.rss_){}
    , decltype(_impl_.load1m_){}
    , decltype(_impl_.load5m_){}
    , decltype(_impl_.load15m_){}
    , decltype(_impl_.cpuuserpercent_){}
    , decltype(_impl_.cpusystempercent_){}
    , decltype(_impl_.cpupercent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpupercent_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.cpupercent_));
  // @@protoc_insertion_point(copy_constructor:grpcagent.ProcessMetrics)
}

inline void ProcessMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.uptime_){0}
    , decltype(_impl_.systemuptime_){0}
    , decltype(_impl_.freemem_){int64_t{0}}
    , decltype(_impl_.blockinputopcount_){0}
    , decltype(_impl_.blockoutputopcount_){0}
    , decltype(_impl_.ctxswitchinvoluntarycount_){0}
    , decltype(_impl_.ctxswitchvoluntarycount_){0}
    , decltype(_impl_.ipcreceivedcount_){0}
    , decltype(_impl_.ipcsentcount_){0}
    , decltype(_impl_.pagefaulthardcount_){0}
    , decltype(_impl_.pagefaultsoftcount_){0}
    , decltype(_impl_.signalcount_){0}
    , decltype(_impl_.swapcount_){0}
    , decltype(_impl_.rss_){int64_t{0}}
    , decltype(_impl_.load1m_){0}
    , decltype(_impl_.load5m_){0}
    , decltype(_impl_.load15m_){0}
    , decltype(_impl_.cpuuserpercent_){0}
    , decltype(_impl_.cpusystempercent_){0}
    , decltype(_impl_.cpupercent_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessMetrics::~ProcessMetrics() {
  // @@protoc_insertion_point(destructor:grpcagent.ProcessMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.user_.Destroy();
}

void ProcessMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.ProcessMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cpupercent_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.cpupercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 systemUptime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.systemuptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 freeMem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.freemem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 blockInputOpCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.blockinputopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 blockOutputOpCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.blockoutputopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ctxSwitchInvoluntaryCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ctxswitchinvoluntarycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ctxSwitchVoluntaryCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ctxswitchvoluntarycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ipcReceivedCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ipcreceivedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ipcSentCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ipcsentcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pageFaultHardCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.pagefaulthardcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pageFaultSoftCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.pagefaultsoftcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 signalCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.signalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 swapCount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.swapcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rss = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.rss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double load1m = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.load1m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double load5m = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.load5m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double load15m = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.load15m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpuUserPercent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.cpuuserpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpuSystemPercent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.cpusystempercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpuPercent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.cpupercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string title = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.ProcessMetrics.title"));
        } else
          goto handle_unusual;
        continue;
      // string user = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.ProcessMetrics.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.ProcessMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 uptime = 2;
  if (this->_internal_uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uptime(), target);
  }

  // int32 systemUptime = 3;
  if (this->_internal_systemuptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_systemuptime(), target);
  }

  // int64 freeMem = 4;
  if (this->_internal_freemem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_freemem(), target);
  }

  // int32 blockInputOpCount = 5;
  if (this->_internal_blockinputopcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_blockinputopcount(), target);
  }

  // int32 blockOutputOpCount = 6;
  if (this->_internal_blockoutputopcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_blockoutputopcount(), target);
  }

  // int32 ctxSwitchInvoluntaryCount = 7;
  if (this->_internal_ctxswitchinvoluntarycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ctxswitchinvoluntarycount(), target);
  }

  // int32 ctxSwitchVoluntaryCount = 8;
  if (this->_internal_ctxswitchvoluntarycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_ctxswitchvoluntarycount(), target);
  }

  // int32 ipcReceivedCount = 9;
  if (this->_internal_ipcreceivedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_ipcreceivedcount(), target);
  }

  // int32 ipcSentCount = 10;
  if (this->_internal_ipcsentcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_ipcsentcount(), target);
  }

  // int32 pageFaultHardCount = 11;
  if (this->_internal_pagefaulthardcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_pagefaulthardcount(), target);
  }

  // int32 pageFaultSoftCount = 12;
  if (this->_internal_pagefaultsoftcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_pagefaultsoftcount(), target);
  }

  // int32 signalCount = 13;
  if (this->_internal_signalcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_signalcount(), target);
  }

  // int32 swapCount = 14;
  if (this->_internal_swapcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_swapcount(), target);
  }

  // int64 rss = 15;
  if (this->_internal_rss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_rss(), target);
  }

  // double load1m = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load1m = this->_internal_load1m();
  uint64_t raw_load1m;
  memcpy(&raw_load1m, &tmp_load1m, sizeof(tmp_load1m));
  if (raw_load1m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_load1m(), target);
  }

  // double load5m = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load5m = this->_internal_load5m();
  uint64_t raw_load5m;
  memcpy(&raw_load5m, &tmp_load5m, sizeof(tmp_load5m));
  if (raw_load5m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_load5m(), target);
  }

  // double load15m = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load15m = this->_internal_load15m();
  uint64_t raw_load15m;
  memcpy(&raw_load15m, &tmp_load15m, sizeof(tmp_load15m));
  if (raw_load15m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_load15m(), target);
  }

  // double cpuUserPercent = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpuuserpercent = this->_internal_cpuuserpercent();
  uint64_t raw_cpuuserpercent;
  memcpy(&raw_cpuuserpercent, &tmp_cpuuserpercent, sizeof(tmp_cpuuserpercent));
  if (raw_cpuuserpercent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_cpuuserpercent(), target);
  }

  // double cpuSystemPercent = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpusystempercent = this->_internal_cpusystempercent();
  uint64_t raw_cpusystempercent;
  memcpy(&raw_cpusystempercent, &tmp_cpusystempercent, sizeof(tmp_cpusystempercent));
  if (raw_cpusystempercent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_cpusystempercent(), target);
  }

  // double cpuPercent = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpupercent = this->_internal_cpupercent();
  uint64_t raw_cpupercent;
  memcpy(&raw_cpupercent, &tmp_cpupercent, sizeof(tmp_cpupercent));
  if (raw_cpupercent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_cpupercent(), target);
  }

  // string title = 22;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.ProcessMetrics.title");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_title(), target);
  }

  // string user = 23;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.ProcessMetrics.user");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.ProcessMetrics)
  return target;
}

size_t ProcessMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.ProcessMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 22;
  if (!this->_internal_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string user = 23;
  if (!this->_internal_user().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 uptime = 2;
  if (this->_internal_uptime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uptime());
  }

  // int32 systemUptime = 3;
  if (this->_internal_systemuptime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_systemuptime());
  }

  // int64 freeMem = 4;
  if (this->_internal_freemem() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_freemem());
  }

  // int32 blockInputOpCount = 5;
  if (this->_internal_blockinputopcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blockinputopcount());
  }

  // int32 blockOutputOpCount = 6;
  if (this->_internal_blockoutputopcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blockoutputopcount());
  }

  // int32 ctxSwitchInvoluntaryCount = 7;
  if (this->_internal_ctxswitchinvoluntarycount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ctxswitchinvoluntarycount());
  }

  // int32 ctxSwitchVoluntaryCount = 8;
  if (this->_internal_ctxswitchvoluntarycount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ctxswitchvoluntarycount());
  }

  // int32 ipcReceivedCount = 9;
  if (this->_internal_ipcreceivedcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ipcreceivedcount());
  }

  // int32 ipcSentCount = 10;
  if (this->_internal_ipcsentcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ipcsentcount());
  }

  // int32 pageFaultHardCount = 11;
  if (this->_internal_pagefaulthardcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pagefaulthardcount());
  }

  // int32 pageFaultSoftCount = 12;
  if (this->_internal_pagefaultsoftcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pagefaultsoftcount());
  }

  // int32 signalCount = 13;
  if (this->_internal_signalcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signalcount());
  }

  // int32 swapCount = 14;
  if (this->_internal_swapcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_swapcount());
  }

  // int64 rss = 15;
  if (this->_internal_rss() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rss());
  }

  // double load1m = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load1m = this->_internal_load1m();
  uint64_t raw_load1m;
  memcpy(&raw_load1m, &tmp_load1m, sizeof(tmp_load1m));
  if (raw_load1m != 0) {
    total_size += 2 + 8;
  }

  // double load5m = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load5m = this->_internal_load5m();
  uint64_t raw_load5m;
  memcpy(&raw_load5m, &tmp_load5m, sizeof(tmp_load5m));
  if (raw_load5m != 0) {
    total_size += 2 + 8;
  }

  // double load15m = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load15m = this->_internal_load15m();
  uint64_t raw_load15m;
  memcpy(&raw_load15m, &tmp_load15m, sizeof(tmp_load15m));
  if (raw_load15m != 0) {
    total_size += 2 + 8;
  }

  // double cpuUserPercent = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpuuserpercent = this->_internal_cpuuserpercent();
  uint64_t raw_cpuuserpercent;
  memcpy(&raw_cpuuserpercent, &tmp_cpuuserpercent, sizeof(tmp_cpuuserpercent));
  if (raw_cpuuserpercent != 0) {
    total_size += 2 + 8;
  }

  // double cpuSystemPercent = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpusystempercent = this->_internal_cpusystempercent();
  uint64_t raw_cpusystempercent;
  memcpy(&raw_cpusystempercent, &tmp_cpusystempercent, sizeof(tmp_cpusystempercent));
  if (raw_cpusystempercent != 0) {
    total_size += 2 + 8;
  }

  // double cpuPercent = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpupercent = this->_internal_cpupercent();
  uint64_t raw_cpupercent;
  memcpy(&raw_cpupercent, &tmp_cpupercent, sizeof(tmp_cpupercent));
  if (raw_cpupercent != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessMetrics::GetClassData() const { return &_class_data_; }


void ProcessMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessMetrics*>(&to_msg);
  auto& from = static_cast<const ProcessMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.ProcessMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_uptime() != 0) {
    _this->_internal_set_uptime(from._internal_uptime());
  }
  if (from._internal_systemuptime() != 0) {
    _this->_internal_set_systemuptime(from._internal_systemuptime());
  }
  if (from._internal_freemem() != 0) {
    _this->_internal_set_freemem(from._internal_freemem());
  }
  if (from._internal_blockinputopcount() != 0) {
    _this->_internal_set_blockinputopcount(from._internal_blockinputopcount());
  }
  if (from._internal_blockoutputopcount() != 0) {
    _this->_internal_set_blockoutputopcount(from._internal_blockoutputopcount());
  }
  if (from._internal_ctxswitchinvoluntarycount() != 0) {
    _this->_internal_set_ctxswitchinvoluntarycount(from._internal_ctxswitchinvoluntarycount());
  }
  if (from._internal_ctxswitchvoluntarycount() != 0) {
    _this->_internal_set_ctxswitchvoluntarycount(from._internal_ctxswitchvoluntarycount());
  }
  if (from._internal_ipcreceivedcount() != 0) {
    _this->_internal_set_ipcreceivedcount(from._internal_ipcreceivedcount());
  }
  if (from._internal_ipcsentcount() != 0) {
    _this->_internal_set_ipcsentcount(from._internal_ipcsentcount());
  }
  if (from._internal_pagefaulthardcount() != 0) {
    _this->_internal_set_pagefaulthardcount(from._internal_pagefaulthardcount());
  }
  if (from._internal_pagefaultsoftcount() != 0) {
    _this->_internal_set_pagefaultsoftcount(from._internal_pagefaultsoftcount());
  }
  if (from._internal_signalcount() != 0) {
    _this->_internal_set_signalcount(from._internal_signalcount());
  }
  if (from._internal_swapcount() != 0) {
    _this->_internal_set_swapcount(from._internal_swapcount());
  }
  if (from._internal_rss() != 0) {
    _this->_internal_set_rss(from._internal_rss());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load1m = from._internal_load1m();
  uint64_t raw_load1m;
  memcpy(&raw_load1m, &tmp_load1m, sizeof(tmp_load1m));
  if (raw_load1m != 0) {
    _this->_internal_set_load1m(from._internal_load1m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load5m = from._internal_load5m();
  uint64_t raw_load5m;
  memcpy(&raw_load5m, &tmp_load5m, sizeof(tmp_load5m));
  if (raw_load5m != 0) {
    _this->_internal_set_load5m(from._internal_load5m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_load15m = from._internal_load15m();
  uint64_t raw_load15m;
  memcpy(&raw_load15m, &tmp_load15m, sizeof(tmp_load15m));
  if (raw_load15m != 0) {
    _this->_internal_set_load15m(from._internal_load15m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpuuserpercent = from._internal_cpuuserpercent();
  uint64_t raw_cpuuserpercent;
  memcpy(&raw_cpuuserpercent, &tmp_cpuuserpercent, sizeof(tmp_cpuuserpercent));
  if (raw_cpuuserpercent != 0) {
    _this->_internal_set_cpuuserpercent(from._internal_cpuuserpercent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpusystempercent = from._internal_cpusystempercent();
  uint64_t raw_cpusystempercent;
  memcpy(&raw_cpusystempercent, &tmp_cpusystempercent, sizeof(tmp_cpusystempercent));
  if (raw_cpusystempercent != 0) {
    _this->_internal_set_cpusystempercent(from._internal_cpusystempercent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpupercent = from._internal_cpupercent();
  uint64_t raw_cpupercent;
  memcpy(&raw_cpupercent, &tmp_cpupercent, sizeof(tmp_cpupercent));
  if (raw_cpupercent != 0) {
    _this->_internal_set_cpupercent(from._internal_cpupercent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessMetrics::CopyFrom(const ProcessMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.ProcessMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMetrics::IsInitialized() const {
  return true;
}

void ProcessMetrics::InternalSwap(ProcessMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessMetrics, _impl_.cpupercent_)
      + sizeof(ProcessMetrics::_impl_.cpupercent_)
      - PROTOBUF_FIELD_OFFSET(ProcessMetrics, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[0]);
}

// ===================================================================

class ThreadMetrics::_Internal {
 public:
};

ThreadMetrics::ThreadMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.ThreadMetrics)
}
ThreadMetrics::ThreadMetrics(const ThreadMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThreadMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.threadname_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.threadid_){}
    , decltype(_impl_.activehandles_){}
    , decltype(_impl_.heaptotal_){}
    , decltype(_impl_.totalheapsizeexecutable_){}
    , decltype(_impl_.totalphysicalsize_){}
    , decltype(_impl_.totalavailablesize_){}
    , decltype(_impl_.heapused_){}
    , decltype(_impl_.activerequests_){}
    , decltype(_impl_.numberofnativecontexts_){}
    , decltype(_impl_.heapsizelimit_){}
    , decltype(_impl_.mallocedmemory_){}
    , decltype(_impl_.externalmem_){}
    , decltype(_impl_.peakmallocedmemory_){}
    , decltype(_impl_.numberofdetachedcontexts_){}
    , decltype(_impl_.gccount_){}
    , decltype(_impl_.gcforcedcount_){}
    , decltype(_impl_.gcfullcount_){}
    , decltype(_impl_.gcmajorcount_){}
    , decltype(_impl_.dnscount_){}
    , decltype(_impl_.httpclientabortcount_){}
    , decltype(_impl_.httpclientcount_){}
    , decltype(_impl_.httpserverabortcount_){}
    , decltype(_impl_.httpservercount_){}
    , decltype(_impl_.loopidletime_){}
    , decltype(_impl_.loopiterations_){}
    , decltype(_impl_.loopiterwithevents_){}
    , decltype(_impl_.eventsprocessed_){}
    , decltype(_impl_.eventswaiting_){}
    , decltype(_impl_.providerdelay_){}
    , decltype(_impl_.processingdelay_){}
    , decltype(_impl_.looptotalcount_){}
    , decltype(_impl_.pipeservercreatedcount_){}
    , decltype(_impl_.pipeserverdestroyedcount_){}
    , decltype(_impl_.pipesocketcreatedcount_){}
    , decltype(_impl_.pipesocketdestroyedcount_){}
    , decltype(_impl_.tcpservercreatedcount_){}
    , decltype(_impl_.tcpserverdestroyedcount_){}
    , decltype(_impl_.tcpsocketcreatedcount_){}
    , decltype(_impl_.tcpsocketdestroyedcount_){}
    , decltype(_impl_.udpsocketcreatedcount_){}
    , decltype(_impl_.udpsocketdestroyedcount_){}
    , decltype(_impl_.promisecreatedcount_){}
    , decltype(_impl_.promiseresolvedcount_){}
    , decltype(_impl_.fshandlesopenedcount_){}
    , decltype(_impl_.gcdurus99ptile_){}
    , decltype(_impl_.gcdurusmedian_){}
    , decltype(_impl_.dns99ptile_){}
    , decltype(_impl_.dnsmedian_){}
    , decltype(_impl_.httpclient99ptile_){}
    , decltype(_impl_.httpclientmedian_){}
    , decltype(_impl_.httpserver99ptile_){}
    , decltype(_impl_.fshandlesclosedcount_){}
    , decltype(_impl_.loopavgtasks_){}
    , decltype(_impl_.httpservermedian_){}
    , decltype(_impl_.looputilization_){}
    , decltype(_impl_.res5s_){}
    , decltype(_impl_.res1m_){}
    , decltype(_impl_.res5m_){}
    , decltype(_impl_.res15m_){}
    , decltype(_impl_.loopestimatedlag_){}
    , decltype(_impl_.loopidlepercent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.threadname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threadname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_threadname().empty()) {
    _this->_impl_.threadname_.Set(from._internal_threadname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.loopidlepercent_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.loopidlepercent_));
  // @@protoc_insertion_point(copy_constructor:grpcagent.ThreadMetrics)
}

inline void ThreadMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.threadname_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.threadid_){0}
    , decltype(_impl_.activehandles_){0}
    , decltype(_impl_.heaptotal_){int64_t{0}}
    , decltype(_impl_.totalheapsizeexecutable_){int64_t{0}}
    , decltype(_impl_.totalphysicalsize_){int64_t{0}}
    , decltype(_impl_.totalavailablesize_){int64_t{0}}
    , decltype(_impl_.heapused_){int64_t{0}}
    , decltype(_impl_.activerequests_){0}
    , decltype(_impl_.numberofnativecontexts_){0}
    , decltype(_impl_.heapsizelimit_){int64_t{0}}
    , decltype(_impl_.mallocedmemory_){int64_t{0}}
    , decltype(_impl_.externalmem_){int64_t{0}}
    , decltype(_impl_.peakmallocedmemory_){int64_t{0}}
    , decltype(_impl_.numberofdetachedcontexts_){0}
    , decltype(_impl_.gccount_){0}
    , decltype(_impl_.gcforcedcount_){0}
    , decltype(_impl_.gcfullcount_){0}
    , decltype(_impl_.gcmajorcount_){0}
    , decltype(_impl_.dnscount_){0}
    , decltype(_impl_.httpclientabortcount_){0}
    , decltype(_impl_.httpclientcount_){0}
    , decltype(_impl_.httpserverabortcount_){0}
    , decltype(_impl_.httpservercount_){0}
    , decltype(_impl_.loopidletime_){int64_t{0}}
    , decltype(_impl_.loopiterations_){0}
    , decltype(_impl_.loopiterwithevents_){0}
    , decltype(_impl_.eventsprocessed_){0}
    , decltype(_impl_.eventswaiting_){0}
    , decltype(_impl_.providerdelay_){int64_t{0}}
    , decltype(_impl_.processingdelay_){int64_t{0}}
    , decltype(_impl_.looptotalcount_){0}
    , decltype(_impl_.pipeservercreatedcount_){0}
    , decltype(_impl_.pipeserverdestroyedcount_){0}
    , decltype(_impl_.pipesocketcreatedcount_){0}
    , decltype(_impl_.pipesocketdestroyedcount_){0}
    , decltype(_impl_.tcpservercreatedcount_){0}
    , decltype(_impl_.tcpserverdestroyedcount_){0}
    , decltype(_impl_.tcpsocketcreatedcount_){0}
    , decltype(_impl_.tcpsocketdestroyedcount_){0}
    , decltype(_impl_.udpsocketcreatedcount_){0}
    , decltype(_impl_.udpsocketdestroyedcount_){0}
    , decltype(_impl_.promisecreatedcount_){0}
    , decltype(_impl_.promiseresolvedcount_){0}
    , decltype(_impl_.fshandlesopenedcount_){0}
    , decltype(_impl_.gcdurus99ptile_){int64_t{0}}
    , decltype(_impl_.gcdurusmedian_){int64_t{0}}
    , decltype(_impl_.dns99ptile_){int64_t{0}}
    , decltype(_impl_.dnsmedian_){int64_t{0}}
    , decltype(_impl_.httpclient99ptile_){int64_t{0}}
    , decltype(_impl_.httpclientmedian_){int64_t{0}}
    , decltype(_impl_.httpserver99ptile_){int64_t{0}}
    , decltype(_impl_.fshandlesclosedcount_){0}
    , decltype(_impl_.loopavgtasks_){0}
    , decltype(_impl_.httpservermedian_){int64_t{0}}
    , decltype(_impl_.looputilization_){0}
    , decltype(_impl_.res5s_){0}
    , decltype(_impl_.res1m_){0}
    , decltype(_impl_.res5m_){0}
    , decltype(_impl_.res15m_){0}
    , decltype(_impl_.loopestimatedlag_){0}
    , decltype(_impl_.loopidlepercent_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.threadname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threadname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThreadMetrics::~ThreadMetrics() {
  // @@protoc_insertion_point(destructor:grpcagent.ThreadMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThreadMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threadname_.Destroy();
}

void ThreadMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThreadMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.ThreadMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threadname_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.loopidlepercent_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.loopidlepercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 threadId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.threadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 activeHandles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.activehandles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 activeRequests = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.activerequests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 heapTotal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.heaptotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 totalHeapSizeExecutable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.totalheapsizeexecutable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 totalPhysicalSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.totalphysicalsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 totalAvailableSize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.totalavailablesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 heapUsed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.heapused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 heapSizeLimit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.heapsizelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mallocedMemory = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.mallocedmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 externalMem = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.externalmem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 peakMallocedMemory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.peakmallocedmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 numberOfNativeContexts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.numberofnativecontexts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 numberOfDetachedContexts = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.numberofdetachedcontexts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gcCount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.gccount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gcForcedCount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.gcforcedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gcFullCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.gcfullcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gcMajorCount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.gcmajorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dnsCount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.dnscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 httpClientAbortCount = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.httpclientabortcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 httpClientCount = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.httpclientcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 httpServerAbortCount = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.httpserverabortcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 httpServerCount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.httpservercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 loopIdleTime = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.loopidletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 loopIterations = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.loopiterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 loopIterWithEvents = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.loopiterwithevents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 eventsProcessed = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.eventsprocessed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 eventsWaiting = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.eventswaiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 providerDelay = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.providerdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 processingDelay = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.processingdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 loopTotalCount = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.looptotalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pipeServerCreatedCount = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pipeservercreatedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pipeServerDestroyedCount = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pipeserverdestroyedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pipeSocketCreatedCount = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pipesocketcreatedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pipeSocketDestroyedCount = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pipesocketdestroyedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcpServerCreatedCount = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tcpservercreatedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcpServerDestroyedCount = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tcpserverdestroyedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcpSocketCreatedCount = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tcpsocketcreatedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tcpSocketDestroyedCount = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tcpsocketdestroyedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udpSocketCreatedCount = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.udpsocketcreatedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udpSocketDestroyedCount = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.udpsocketdestroyedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 promiseCreatedCount = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.promisecreatedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 promiseResolvedCount = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.promiseresolvedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fsHandlesOpenedCount = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.fshandlesopenedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fsHandlesClosedCount = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.fshandlesclosedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gcDurUs99Ptile = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.gcdurus99ptile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gcDurUsMedian = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.gcdurusmedian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dns99Ptile = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.dns99ptile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dnsMedian = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.dnsmedian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 httpClient99Ptile = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.httpclient99ptile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 httpClientMedian = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.httpclientmedian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 httpServer99Ptile = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.httpserver99ptile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 httpServerMedian = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.httpservermedian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double loopUtilization = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.looputilization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double res5s = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.res5s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double res1m = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.res1m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double res5m = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.res5m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double res15m = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.res15m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 loopAvgTasks = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.loopavgtasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double loopEstimatedLag = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.loopestimatedlag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double loopIdlePercent = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.loopidlepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string threadName = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_threadname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcagent.ThreadMetrics.threadName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreadMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.ThreadMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threadId = 1;
  if (this->_internal_threadid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_threadid(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // int32 activeHandles = 3;
  if (this->_internal_activehandles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_activehandles(), target);
  }

  // int32 activeRequests = 4;
  if (this->_internal_activerequests() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_activerequests(), target);
  }

  // int64 heapTotal = 5;
  if (this->_internal_heaptotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_heaptotal(), target);
  }

  // int64 totalHeapSizeExecutable = 6;
  if (this->_internal_totalheapsizeexecutable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_totalheapsizeexecutable(), target);
  }

  // int64 totalPhysicalSize = 7;
  if (this->_internal_totalphysicalsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_totalphysicalsize(), target);
  }

  // int64 totalAvailableSize = 8;
  if (this->_internal_totalavailablesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_totalavailablesize(), target);
  }

  // int64 heapUsed = 9;
  if (this->_internal_heapused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_heapused(), target);
  }

  // int64 heapSizeLimit = 10;
  if (this->_internal_heapsizelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_heapsizelimit(), target);
  }

  // int64 mallocedMemory = 11;
  if (this->_internal_mallocedmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_mallocedmemory(), target);
  }

  // int64 externalMem = 12;
  if (this->_internal_externalmem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_externalmem(), target);
  }

  // int64 peakMallocedMemory = 13;
  if (this->_internal_peakmallocedmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_peakmallocedmemory(), target);
  }

  // int32 numberOfNativeContexts = 14;
  if (this->_internal_numberofnativecontexts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_numberofnativecontexts(), target);
  }

  // int32 numberOfDetachedContexts = 15;
  if (this->_internal_numberofdetachedcontexts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_numberofdetachedcontexts(), target);
  }

  // int32 gcCount = 16;
  if (this->_internal_gccount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_gccount(), target);
  }

  // int32 gcForcedCount = 17;
  if (this->_internal_gcforcedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_gcforcedcount(), target);
  }

  // int32 gcFullCount = 18;
  if (this->_internal_gcfullcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_gcfullcount(), target);
  }

  // int32 gcMajorCount = 19;
  if (this->_internal_gcmajorcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_gcmajorcount(), target);
  }

  // int32 dnsCount = 20;
  if (this->_internal_dnscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_dnscount(), target);
  }

  // int32 httpClientAbortCount = 21;
  if (this->_internal_httpclientabortcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_httpclientabortcount(), target);
  }

  // int32 httpClientCount = 22;
  if (this->_internal_httpclientcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_httpclientcount(), target);
  }

  // int32 httpServerAbortCount = 23;
  if (this->_internal_httpserverabortcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_httpserverabortcount(), target);
  }

  // int32 httpServerCount = 24;
  if (this->_internal_httpservercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_httpservercount(), target);
  }

  // int64 loopIdleTime = 25;
  if (this->_internal_loopidletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_loopidletime(), target);
  }

  // int32 loopIterations = 26;
  if (this->_internal_loopiterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_loopiterations(), target);
  }

  // int32 loopIterWithEvents = 27;
  if (this->_internal_loopiterwithevents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_loopiterwithevents(), target);
  }

  // int32 eventsProcessed = 28;
  if (this->_internal_eventsprocessed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_eventsprocessed(), target);
  }

  // int32 eventsWaiting = 29;
  if (this->_internal_eventswaiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_eventswaiting(), target);
  }

  // int64 providerDelay = 30;
  if (this->_internal_providerdelay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_providerdelay(), target);
  }

  // int64 processingDelay = 31;
  if (this->_internal_processingdelay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_processingdelay(), target);
  }

  // int32 loopTotalCount = 32;
  if (this->_internal_looptotalcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_looptotalcount(), target);
  }

  // int32 pipeServerCreatedCount = 33;
  if (this->_internal_pipeservercreatedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_pipeservercreatedcount(), target);
  }

  // int32 pipeServerDestroyedCount = 34;
  if (this->_internal_pipeserverdestroyedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_pipeserverdestroyedcount(), target);
  }

  // int32 pipeSocketCreatedCount = 35;
  if (this->_internal_pipesocketcreatedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_pipesocketcreatedcount(), target);
  }

  // int32 pipeSocketDestroyedCount = 36;
  if (this->_internal_pipesocketdestroyedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_pipesocketdestroyedcount(), target);
  }

  // int32 tcpServerCreatedCount = 37;
  if (this->_internal_tcpservercreatedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_tcpservercreatedcount(), target);
  }

  // int32 tcpServerDestroyedCount = 38;
  if (this->_internal_tcpserverdestroyedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_tcpserverdestroyedcount(), target);
  }

  // int32 tcpSocketCreatedCount = 39;
  if (this->_internal_tcpsocketcreatedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_tcpsocketcreatedcount(), target);
  }

  // int32 tcpSocketDestroyedCount = 40;
  if (this->_internal_tcpsocketdestroyedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_tcpsocketdestroyedcount(), target);
  }

  // int32 udpSocketCreatedCount = 41;
  if (this->_internal_udpsocketcreatedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_udpsocketcreatedcount(), target);
  }

  // int32 udpSocketDestroyedCount = 42;
  if (this->_internal_udpsocketdestroyedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(42, this->_internal_udpsocketdestroyedcount(), target);
  }

  // int32 promiseCreatedCount = 43;
  if (this->_internal_promisecreatedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_promisecreatedcount(), target);
  }

  // int32 promiseResolvedCount = 44;
  if (this->_internal_promiseresolvedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_promiseresolvedcount(), target);
  }

  // int32 fsHandlesOpenedCount = 45;
  if (this->_internal_fshandlesopenedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_fshandlesopenedcount(), target);
  }

  // int32 fsHandlesClosedCount = 46;
  if (this->_internal_fshandlesclosedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_fshandlesclosedcount(), target);
  }

  // int64 gcDurUs99Ptile = 47;
  if (this->_internal_gcdurus99ptile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_gcdurus99ptile(), target);
  }

  // int64 gcDurUsMedian = 48;
  if (this->_internal_gcdurusmedian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(48, this->_internal_gcdurusmedian(), target);
  }

  // int64 dns99Ptile = 49;
  if (this->_internal_dns99ptile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(49, this->_internal_dns99ptile(), target);
  }

  // int64 dnsMedian = 50;
  if (this->_internal_dnsmedian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(50, this->_internal_dnsmedian(), target);
  }

  // int64 httpClient99Ptile = 51;
  if (this->_internal_httpclient99ptile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(51, this->_internal_httpclient99ptile(), target);
  }

  // int64 httpClientMedian = 52;
  if (this->_internal_httpclientmedian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(52, this->_internal_httpclientmedian(), target);
  }

  // int64 httpServer99Ptile = 53;
  if (this->_internal_httpserver99ptile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(53, this->_internal_httpserver99ptile(), target);
  }

  // int64 httpServerMedian = 54;
  if (this->_internal_httpservermedian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(54, this->_internal_httpservermedian(), target);
  }

  // double loopUtilization = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_looputilization = this->_internal_looputilization();
  uint64_t raw_looputilization;
  memcpy(&raw_looputilization, &tmp_looputilization, sizeof(tmp_looputilization));
  if (raw_looputilization != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(55, this->_internal_looputilization(), target);
  }

  // double res5s = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res5s = this->_internal_res5s();
  uint64_t raw_res5s;
  memcpy(&raw_res5s, &tmp_res5s, sizeof(tmp_res5s));
  if (raw_res5s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(56, this->_internal_res5s(), target);
  }

  // double res1m = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res1m = this->_internal_res1m();
  uint64_t raw_res1m;
  memcpy(&raw_res1m, &tmp_res1m, sizeof(tmp_res1m));
  if (raw_res1m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(57, this->_internal_res1m(), target);
  }

  // double res5m = 58;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res5m = this->_internal_res5m();
  uint64_t raw_res5m;
  memcpy(&raw_res5m, &tmp_res5m, sizeof(tmp_res5m));
  if (raw_res5m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(58, this->_internal_res5m(), target);
  }

  // double res15m = 59;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res15m = this->_internal_res15m();
  uint64_t raw_res15m;
  memcpy(&raw_res15m, &tmp_res15m, sizeof(tmp_res15m));
  if (raw_res15m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(59, this->_internal_res15m(), target);
  }

  // int32 loopAvgTasks = 60;
  if (this->_internal_loopavgtasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(60, this->_internal_loopavgtasks(), target);
  }

  // double loopEstimatedLag = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loopestimatedlag = this->_internal_loopestimatedlag();
  uint64_t raw_loopestimatedlag;
  memcpy(&raw_loopestimatedlag, &tmp_loopestimatedlag, sizeof(tmp_loopestimatedlag));
  if (raw_loopestimatedlag != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(61, this->_internal_loopestimatedlag(), target);
  }

  // double loopIdlePercent = 62;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loopidlepercent = this->_internal_loopidlepercent();
  uint64_t raw_loopidlepercent;
  memcpy(&raw_loopidlepercent, &tmp_loopidlepercent, sizeof(tmp_loopidlepercent));
  if (raw_loopidlepercent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(62, this->_internal_loopidlepercent(), target);
  }

  // string threadName = 63;
  if (!this->_internal_threadname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_threadname().data(), static_cast<int>(this->_internal_threadname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcagent.ThreadMetrics.threadName");
    target = stream->WriteStringMaybeAliased(
        63, this->_internal_threadname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.ThreadMetrics)
  return target;
}

size_t ThreadMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.ThreadMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string threadName = 63;
  if (!this->_internal_threadname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_threadname());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 threadId = 1;
  if (this->_internal_threadid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threadid());
  }

  // int32 activeHandles = 3;
  if (this->_internal_activehandles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activehandles());
  }

  // int64 heapTotal = 5;
  if (this->_internal_heaptotal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_heaptotal());
  }

  // int64 totalHeapSizeExecutable = 6;
  if (this->_internal_totalheapsizeexecutable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalheapsizeexecutable());
  }

  // int64 totalPhysicalSize = 7;
  if (this->_internal_totalphysicalsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalphysicalsize());
  }

  // int64 totalAvailableSize = 8;
  if (this->_internal_totalavailablesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalavailablesize());
  }

  // int64 heapUsed = 9;
  if (this->_internal_heapused() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_heapused());
  }

  // int32 activeRequests = 4;
  if (this->_internal_activerequests() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activerequests());
  }

  // int32 numberOfNativeContexts = 14;
  if (this->_internal_numberofnativecontexts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numberofnativecontexts());
  }

  // int64 heapSizeLimit = 10;
  if (this->_internal_heapsizelimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_heapsizelimit());
  }

  // int64 mallocedMemory = 11;
  if (this->_internal_mallocedmemory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mallocedmemory());
  }

  // int64 externalMem = 12;
  if (this->_internal_externalmem() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_externalmem());
  }

  // int64 peakMallocedMemory = 13;
  if (this->_internal_peakmallocedmemory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peakmallocedmemory());
  }

  // int32 numberOfDetachedContexts = 15;
  if (this->_internal_numberofdetachedcontexts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numberofdetachedcontexts());
  }

  // int32 gcCount = 16;
  if (this->_internal_gccount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gccount());
  }

  // int32 gcForcedCount = 17;
  if (this->_internal_gcforcedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gcforcedcount());
  }

  // int32 gcFullCount = 18;
  if (this->_internal_gcfullcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gcfullcount());
  }

  // int32 gcMajorCount = 19;
  if (this->_internal_gcmajorcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gcmajorcount());
  }

  // int32 dnsCount = 20;
  if (this->_internal_dnscount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dnscount());
  }

  // int32 httpClientAbortCount = 21;
  if (this->_internal_httpclientabortcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_httpclientabortcount());
  }

  // int32 httpClientCount = 22;
  if (this->_internal_httpclientcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_httpclientcount());
  }

  // int32 httpServerAbortCount = 23;
  if (this->_internal_httpserverabortcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_httpserverabortcount());
  }

  // int32 httpServerCount = 24;
  if (this->_internal_httpservercount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_httpservercount());
  }

  // int64 loopIdleTime = 25;
  if (this->_internal_loopidletime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_loopidletime());
  }

  // int32 loopIterations = 26;
  if (this->_internal_loopiterations() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_loopiterations());
  }

  // int32 loopIterWithEvents = 27;
  if (this->_internal_loopiterwithevents() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_loopiterwithevents());
  }

  // int32 eventsProcessed = 28;
  if (this->_internal_eventsprocessed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_eventsprocessed());
  }

  // int32 eventsWaiting = 29;
  if (this->_internal_eventswaiting() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_eventswaiting());
  }

  // int64 providerDelay = 30;
  if (this->_internal_providerdelay() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_providerdelay());
  }

  // int64 processingDelay = 31;
  if (this->_internal_processingdelay() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_processingdelay());
  }

  // int32 loopTotalCount = 32;
  if (this->_internal_looptotalcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_looptotalcount());
  }

  // int32 pipeServerCreatedCount = 33;
  if (this->_internal_pipeservercreatedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pipeservercreatedcount());
  }

  // int32 pipeServerDestroyedCount = 34;
  if (this->_internal_pipeserverdestroyedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pipeserverdestroyedcount());
  }

  // int32 pipeSocketCreatedCount = 35;
  if (this->_internal_pipesocketcreatedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pipesocketcreatedcount());
  }

  // int32 pipeSocketDestroyedCount = 36;
  if (this->_internal_pipesocketdestroyedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pipesocketdestroyedcount());
  }

  // int32 tcpServerCreatedCount = 37;
  if (this->_internal_tcpservercreatedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tcpservercreatedcount());
  }

  // int32 tcpServerDestroyedCount = 38;
  if (this->_internal_tcpserverdestroyedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tcpserverdestroyedcount());
  }

  // int32 tcpSocketCreatedCount = 39;
  if (this->_internal_tcpsocketcreatedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tcpsocketcreatedcount());
  }

  // int32 tcpSocketDestroyedCount = 40;
  if (this->_internal_tcpsocketdestroyedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tcpsocketdestroyedcount());
  }

  // int32 udpSocketCreatedCount = 41;
  if (this->_internal_udpsocketcreatedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_udpsocketcreatedcount());
  }

  // int32 udpSocketDestroyedCount = 42;
  if (this->_internal_udpsocketdestroyedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_udpsocketdestroyedcount());
  }

  // int32 promiseCreatedCount = 43;
  if (this->_internal_promisecreatedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_promisecreatedcount());
  }

  // int32 promiseResolvedCount = 44;
  if (this->_internal_promiseresolvedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_promiseresolvedcount());
  }

  // int32 fsHandlesOpenedCount = 45;
  if (this->_internal_fshandlesopenedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fshandlesopenedcount());
  }

  // int64 gcDurUs99Ptile = 47;
  if (this->_internal_gcdurus99ptile() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_gcdurus99ptile());
  }

  // int64 gcDurUsMedian = 48;
  if (this->_internal_gcdurusmedian() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_gcdurusmedian());
  }

  // int64 dns99Ptile = 49;
  if (this->_internal_dns99ptile() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_dns99ptile());
  }

  // int64 dnsMedian = 50;
  if (this->_internal_dnsmedian() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_dnsmedian());
  }

  // int64 httpClient99Ptile = 51;
  if (this->_internal_httpclient99ptile() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_httpclient99ptile());
  }

  // int64 httpClientMedian = 52;
  if (this->_internal_httpclientmedian() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_httpclientmedian());
  }

  // int64 httpServer99Ptile = 53;
  if (this->_internal_httpserver99ptile() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_httpserver99ptile());
  }

  // int32 fsHandlesClosedCount = 46;
  if (this->_internal_fshandlesclosedcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fshandlesclosedcount());
  }

  // int32 loopAvgTasks = 60;
  if (this->_internal_loopavgtasks() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_loopavgtasks());
  }

  // int64 httpServerMedian = 54;
  if (this->_internal_httpservermedian() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_httpservermedian());
  }

  // double loopUtilization = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_looputilization = this->_internal_looputilization();
  uint64_t raw_looputilization;
  memcpy(&raw_looputilization, &tmp_looputilization, sizeof(tmp_looputilization));
  if (raw_looputilization != 0) {
    total_size += 2 + 8;
  }

  // double res5s = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res5s = this->_internal_res5s();
  uint64_t raw_res5s;
  memcpy(&raw_res5s, &tmp_res5s, sizeof(tmp_res5s));
  if (raw_res5s != 0) {
    total_size += 2 + 8;
  }

  // double res1m = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res1m = this->_internal_res1m();
  uint64_t raw_res1m;
  memcpy(&raw_res1m, &tmp_res1m, sizeof(tmp_res1m));
  if (raw_res1m != 0) {
    total_size += 2 + 8;
  }

  // double res5m = 58;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res5m = this->_internal_res5m();
  uint64_t raw_res5m;
  memcpy(&raw_res5m, &tmp_res5m, sizeof(tmp_res5m));
  if (raw_res5m != 0) {
    total_size += 2 + 8;
  }

  // double res15m = 59;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res15m = this->_internal_res15m();
  uint64_t raw_res15m;
  memcpy(&raw_res15m, &tmp_res15m, sizeof(tmp_res15m));
  if (raw_res15m != 0) {
    total_size += 2 + 8;
  }

  // double loopEstimatedLag = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loopestimatedlag = this->_internal_loopestimatedlag();
  uint64_t raw_loopestimatedlag;
  memcpy(&raw_loopestimatedlag, &tmp_loopestimatedlag, sizeof(tmp_loopestimatedlag));
  if (raw_loopestimatedlag != 0) {
    total_size += 2 + 8;
  }

  // double loopIdlePercent = 62;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loopidlepercent = this->_internal_loopidlepercent();
  uint64_t raw_loopidlepercent;
  memcpy(&raw_loopidlepercent, &tmp_loopidlepercent, sizeof(tmp_loopidlepercent));
  if (raw_loopidlepercent != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreadMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThreadMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreadMetrics::GetClassData() const { return &_class_data_; }


void ThreadMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThreadMetrics*>(&to_msg);
  auto& from = static_cast<const ThreadMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.ThreadMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_threadname().empty()) {
    _this->_internal_set_threadname(from._internal_threadname());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_threadid() != 0) {
    _this->_internal_set_threadid(from._internal_threadid());
  }
  if (from._internal_activehandles() != 0) {
    _this->_internal_set_activehandles(from._internal_activehandles());
  }
  if (from._internal_heaptotal() != 0) {
    _this->_internal_set_heaptotal(from._internal_heaptotal());
  }
  if (from._internal_totalheapsizeexecutable() != 0) {
    _this->_internal_set_totalheapsizeexecutable(from._internal_totalheapsizeexecutable());
  }
  if (from._internal_totalphysicalsize() != 0) {
    _this->_internal_set_totalphysicalsize(from._internal_totalphysicalsize());
  }
  if (from._internal_totalavailablesize() != 0) {
    _this->_internal_set_totalavailablesize(from._internal_totalavailablesize());
  }
  if (from._internal_heapused() != 0) {
    _this->_internal_set_heapused(from._internal_heapused());
  }
  if (from._internal_activerequests() != 0) {
    _this->_internal_set_activerequests(from._internal_activerequests());
  }
  if (from._internal_numberofnativecontexts() != 0) {
    _this->_internal_set_numberofnativecontexts(from._internal_numberofnativecontexts());
  }
  if (from._internal_heapsizelimit() != 0) {
    _this->_internal_set_heapsizelimit(from._internal_heapsizelimit());
  }
  if (from._internal_mallocedmemory() != 0) {
    _this->_internal_set_mallocedmemory(from._internal_mallocedmemory());
  }
  if (from._internal_externalmem() != 0) {
    _this->_internal_set_externalmem(from._internal_externalmem());
  }
  if (from._internal_peakmallocedmemory() != 0) {
    _this->_internal_set_peakmallocedmemory(from._internal_peakmallocedmemory());
  }
  if (from._internal_numberofdetachedcontexts() != 0) {
    _this->_internal_set_numberofdetachedcontexts(from._internal_numberofdetachedcontexts());
  }
  if (from._internal_gccount() != 0) {
    _this->_internal_set_gccount(from._internal_gccount());
  }
  if (from._internal_gcforcedcount() != 0) {
    _this->_internal_set_gcforcedcount(from._internal_gcforcedcount());
  }
  if (from._internal_gcfullcount() != 0) {
    _this->_internal_set_gcfullcount(from._internal_gcfullcount());
  }
  if (from._internal_gcmajorcount() != 0) {
    _this->_internal_set_gcmajorcount(from._internal_gcmajorcount());
  }
  if (from._internal_dnscount() != 0) {
    _this->_internal_set_dnscount(from._internal_dnscount());
  }
  if (from._internal_httpclientabortcount() != 0) {
    _this->_internal_set_httpclientabortcount(from._internal_httpclientabortcount());
  }
  if (from._internal_httpclientcount() != 0) {
    _this->_internal_set_httpclientcount(from._internal_httpclientcount());
  }
  if (from._internal_httpserverabortcount() != 0) {
    _this->_internal_set_httpserverabortcount(from._internal_httpserverabortcount());
  }
  if (from._internal_httpservercount() != 0) {
    _this->_internal_set_httpservercount(from._internal_httpservercount());
  }
  if (from._internal_loopidletime() != 0) {
    _this->_internal_set_loopidletime(from._internal_loopidletime());
  }
  if (from._internal_loopiterations() != 0) {
    _this->_internal_set_loopiterations(from._internal_loopiterations());
  }
  if (from._internal_loopiterwithevents() != 0) {
    _this->_internal_set_loopiterwithevents(from._internal_loopiterwithevents());
  }
  if (from._internal_eventsprocessed() != 0) {
    _this->_internal_set_eventsprocessed(from._internal_eventsprocessed());
  }
  if (from._internal_eventswaiting() != 0) {
    _this->_internal_set_eventswaiting(from._internal_eventswaiting());
  }
  if (from._internal_providerdelay() != 0) {
    _this->_internal_set_providerdelay(from._internal_providerdelay());
  }
  if (from._internal_processingdelay() != 0) {
    _this->_internal_set_processingdelay(from._internal_processingdelay());
  }
  if (from._internal_looptotalcount() != 0) {
    _this->_internal_set_looptotalcount(from._internal_looptotalcount());
  }
  if (from._internal_pipeservercreatedcount() != 0) {
    _this->_internal_set_pipeservercreatedcount(from._internal_pipeservercreatedcount());
  }
  if (from._internal_pipeserverdestroyedcount() != 0) {
    _this->_internal_set_pipeserverdestroyedcount(from._internal_pipeserverdestroyedcount());
  }
  if (from._internal_pipesocketcreatedcount() != 0) {
    _this->_internal_set_pipesocketcreatedcount(from._internal_pipesocketcreatedcount());
  }
  if (from._internal_pipesocketdestroyedcount() != 0) {
    _this->_internal_set_pipesocketdestroyedcount(from._internal_pipesocketdestroyedcount());
  }
  if (from._internal_tcpservercreatedcount() != 0) {
    _this->_internal_set_tcpservercreatedcount(from._internal_tcpservercreatedcount());
  }
  if (from._internal_tcpserverdestroyedcount() != 0) {
    _this->_internal_set_tcpserverdestroyedcount(from._internal_tcpserverdestroyedcount());
  }
  if (from._internal_tcpsocketcreatedcount() != 0) {
    _this->_internal_set_tcpsocketcreatedcount(from._internal_tcpsocketcreatedcount());
  }
  if (from._internal_tcpsocketdestroyedcount() != 0) {
    _this->_internal_set_tcpsocketdestroyedcount(from._internal_tcpsocketdestroyedcount());
  }
  if (from._internal_udpsocketcreatedcount() != 0) {
    _this->_internal_set_udpsocketcreatedcount(from._internal_udpsocketcreatedcount());
  }
  if (from._internal_udpsocketdestroyedcount() != 0) {
    _this->_internal_set_udpsocketdestroyedcount(from._internal_udpsocketdestroyedcount());
  }
  if (from._internal_promisecreatedcount() != 0) {
    _this->_internal_set_promisecreatedcount(from._internal_promisecreatedcount());
  }
  if (from._internal_promiseresolvedcount() != 0) {
    _this->_internal_set_promiseresolvedcount(from._internal_promiseresolvedcount());
  }
  if (from._internal_fshandlesopenedcount() != 0) {
    _this->_internal_set_fshandlesopenedcount(from._internal_fshandlesopenedcount());
  }
  if (from._internal_gcdurus99ptile() != 0) {
    _this->_internal_set_gcdurus99ptile(from._internal_gcdurus99ptile());
  }
  if (from._internal_gcdurusmedian() != 0) {
    _this->_internal_set_gcdurusmedian(from._internal_gcdurusmedian());
  }
  if (from._internal_dns99ptile() != 0) {
    _this->_internal_set_dns99ptile(from._internal_dns99ptile());
  }
  if (from._internal_dnsmedian() != 0) {
    _this->_internal_set_dnsmedian(from._internal_dnsmedian());
  }
  if (from._internal_httpclient99ptile() != 0) {
    _this->_internal_set_httpclient99ptile(from._internal_httpclient99ptile());
  }
  if (from._internal_httpclientmedian() != 0) {
    _this->_internal_set_httpclientmedian(from._internal_httpclientmedian());
  }
  if (from._internal_httpserver99ptile() != 0) {
    _this->_internal_set_httpserver99ptile(from._internal_httpserver99ptile());
  }
  if (from._internal_fshandlesclosedcount() != 0) {
    _this->_internal_set_fshandlesclosedcount(from._internal_fshandlesclosedcount());
  }
  if (from._internal_loopavgtasks() != 0) {
    _this->_internal_set_loopavgtasks(from._internal_loopavgtasks());
  }
  if (from._internal_httpservermedian() != 0) {
    _this->_internal_set_httpservermedian(from._internal_httpservermedian());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_looputilization = from._internal_looputilization();
  uint64_t raw_looputilization;
  memcpy(&raw_looputilization, &tmp_looputilization, sizeof(tmp_looputilization));
  if (raw_looputilization != 0) {
    _this->_internal_set_looputilization(from._internal_looputilization());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res5s = from._internal_res5s();
  uint64_t raw_res5s;
  memcpy(&raw_res5s, &tmp_res5s, sizeof(tmp_res5s));
  if (raw_res5s != 0) {
    _this->_internal_set_res5s(from._internal_res5s());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res1m = from._internal_res1m();
  uint64_t raw_res1m;
  memcpy(&raw_res1m, &tmp_res1m, sizeof(tmp_res1m));
  if (raw_res1m != 0) {
    _this->_internal_set_res1m(from._internal_res1m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res5m = from._internal_res5m();
  uint64_t raw_res5m;
  memcpy(&raw_res5m, &tmp_res5m, sizeof(tmp_res5m));
  if (raw_res5m != 0) {
    _this->_internal_set_res5m(from._internal_res5m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res15m = from._internal_res15m();
  uint64_t raw_res15m;
  memcpy(&raw_res15m, &tmp_res15m, sizeof(tmp_res15m));
  if (raw_res15m != 0) {
    _this->_internal_set_res15m(from._internal_res15m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loopestimatedlag = from._internal_loopestimatedlag();
  uint64_t raw_loopestimatedlag;
  memcpy(&raw_loopestimatedlag, &tmp_loopestimatedlag, sizeof(tmp_loopestimatedlag));
  if (raw_loopestimatedlag != 0) {
    _this->_internal_set_loopestimatedlag(from._internal_loopestimatedlag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loopidlepercent = from._internal_loopidlepercent();
  uint64_t raw_loopidlepercent;
  memcpy(&raw_loopidlepercent, &tmp_loopidlepercent, sizeof(tmp_loopidlepercent));
  if (raw_loopidlepercent != 0) {
    _this->_internal_set_loopidlepercent(from._internal_loopidlepercent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadMetrics::CopyFrom(const ThreadMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.ThreadMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadMetrics::IsInitialized() const {
  return true;
}

void ThreadMetrics::InternalSwap(ThreadMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.threadname_, lhs_arena,
      &other->_impl_.threadname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadMetrics, _impl_.loopidlepercent_)
      + sizeof(ThreadMetrics::_impl_.loopidlepercent_)
      - PROTOBUF_FIELD_OFFSET(ThreadMetrics, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[1]);
}

// ===================================================================

class MetricsBody::_Internal {
 public:
  static const ::grpcagent::ProcessMetrics& processmetrics(const MetricsBody* msg);
};

const ::grpcagent::ProcessMetrics&
MetricsBody::_Internal::processmetrics(const MetricsBody* msg) {
  return *msg->_impl_.processmetrics_;
}
MetricsBody::MetricsBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.MetricsBody)
}
MetricsBody::MetricsBody(const MetricsBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricsBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.threadmetrics_){from._impl_.threadmetrics_}
    , decltype(_impl_.processmetrics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_processmetrics()) {
    _this->_impl_.processmetrics_ = new ::grpcagent::ProcessMetrics(*from._impl_.processmetrics_);
  }
  // @@protoc_insertion_point(copy_constructor:grpcagent.MetricsBody)
}

inline void MetricsBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.threadmetrics_){arena}
    , decltype(_impl_.processmetrics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricsBody::~MetricsBody() {
  // @@protoc_insertion_point(destructor:grpcagent.MetricsBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricsBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threadmetrics_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.processmetrics_;
}

void MetricsBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricsBody::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.MetricsBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threadmetrics_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.processmetrics_ != nullptr) {
    delete _impl_.processmetrics_;
  }
  _impl_.processmetrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpcagent.ProcessMetrics processMetrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processmetrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grpcagent.ThreadMetrics threadMetrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threadmetrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.MetricsBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpcagent.ProcessMetrics processMetrics = 1;
  if (this->_internal_has_processmetrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::processmetrics(this),
        _Internal::processmetrics(this).GetCachedSize(), target, stream);
  }

  // repeated .grpcagent.ThreadMetrics threadMetrics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threadmetrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_threadmetrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.MetricsBody)
  return target;
}

size_t MetricsBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.MetricsBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpcagent.ThreadMetrics threadMetrics = 2;
  total_size += 1UL * this->_internal_threadmetrics_size();
  for (const auto& msg : this->_impl_.threadmetrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpcagent.ProcessMetrics processMetrics = 1;
  if (this->_internal_has_processmetrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processmetrics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricsBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsBody::GetClassData() const { return &_class_data_; }


void MetricsBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricsBody*>(&to_msg);
  auto& from = static_cast<const MetricsBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.MetricsBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.threadmetrics_.MergeFrom(from._impl_.threadmetrics_);
  if (from._internal_has_processmetrics()) {
    _this->_internal_mutable_processmetrics()->::grpcagent::ProcessMetrics::MergeFrom(
        from._internal_processmetrics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsBody::CopyFrom(const MetricsBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.MetricsBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsBody::IsInitialized() const {
  return true;
}

void MetricsBody::InternalSwap(MetricsBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.threadmetrics_.InternalSwap(&other->_impl_.threadmetrics_);
  swap(_impl_.processmetrics_, other->_impl_.processmetrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[2]);
}

// ===================================================================

class Metrics::_Internal {
 public:
  static const ::grpcagent::CommonResponse& common(const Metrics* msg);
  static const ::grpcagent::MetricsBody& body(const Metrics* msg);
};

const ::grpcagent::CommonResponse&
Metrics::_Internal::common(const Metrics* msg) {
  return *msg->_impl_.common_;
}
const ::grpcagent::MetricsBody&
Metrics::_Internal::body(const Metrics* msg) {
  return *msg->_impl_.body_;
}
void Metrics::clear_common() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
}
Metrics::Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::grpcagent::CommonResponse(*from._impl_.common_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::grpcagent::MetricsBody(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:grpcagent.Metrics)
}

inline void Metrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:grpcagent.Metrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void Metrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.Metrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpcagent.CommonResponse common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpcagent.MetricsBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.Metrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpcagent.CommonResponse common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .grpcagent.MetricsBody body = 2;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.Metrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpcagent.CommonResponse common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .grpcagent.MetricsBody body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metrics::GetClassData() const { return &_class_data_; }


void Metrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metrics*>(&to_msg);
  auto& from = static_cast<const Metrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.Metrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::grpcagent::CommonResponse::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::grpcagent::MetricsBody::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metrics, _impl_.body_)
      + sizeof(Metrics::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(Metrics, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcagent::ProcessMetrics*
Arena::CreateMaybeMessage< ::grpcagent::ProcessMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::ProcessMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::ThreadMetrics*
Arena::CreateMaybeMessage< ::grpcagent::ThreadMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::ThreadMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::MetricsBody*
Arena::CreateMaybeMessage< ::grpcagent::MetricsBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::MetricsBody >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::Metrics*
Arena::CreateMaybeMessage< ::grpcagent::Metrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::Metrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
