// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metrics_2eproto;
namespace grpcagent {
class Metrics;
struct MetricsDefaultTypeInternal;
extern MetricsDefaultTypeInternal _Metrics_default_instance_;
class MetricsBody;
struct MetricsBodyDefaultTypeInternal;
extern MetricsBodyDefaultTypeInternal _MetricsBody_default_instance_;
class ProcessMetrics;
struct ProcessMetricsDefaultTypeInternal;
extern ProcessMetricsDefaultTypeInternal _ProcessMetrics_default_instance_;
class ThreadMetrics;
struct ThreadMetricsDefaultTypeInternal;
extern ThreadMetricsDefaultTypeInternal _ThreadMetrics_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::Metrics* Arena::CreateMaybeMessage<::grpcagent::Metrics>(Arena*);
template<> ::grpcagent::MetricsBody* Arena::CreateMaybeMessage<::grpcagent::MetricsBody>(Arena*);
template<> ::grpcagent::ProcessMetrics* Arena::CreateMaybeMessage<::grpcagent::ProcessMetrics>(Arena*);
template<> ::grpcagent::ThreadMetrics* Arena::CreateMaybeMessage<::grpcagent::ThreadMetrics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class ProcessMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.ProcessMetrics) */ {
 public:
  inline ProcessMetrics() : ProcessMetrics(nullptr) {}
  ~ProcessMetrics() override;
  explicit PROTOBUF_CONSTEXPR ProcessMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessMetrics(const ProcessMetrics& from);
  ProcessMetrics(ProcessMetrics&& from) noexcept
    : ProcessMetrics() {
    *this = ::std::move(from);
  }

  inline ProcessMetrics& operator=(const ProcessMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMetrics& operator=(ProcessMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessMetrics* internal_default_instance() {
    return reinterpret_cast<const ProcessMetrics*>(
               &_ProcessMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessMetrics& a, ProcessMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessMetrics& from) {
    ProcessMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.ProcessMetrics";
  }
  protected:
  explicit ProcessMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 22,
    kUserFieldNumber = 23,
    kTimestampFieldNumber = 1,
    kUptimeFieldNumber = 2,
    kSystemUptimeFieldNumber = 3,
    kFreeMemFieldNumber = 4,
    kBlockInputOpCountFieldNumber = 5,
    kBlockOutputOpCountFieldNumber = 6,
    kCtxSwitchInvoluntaryCountFieldNumber = 7,
    kCtxSwitchVoluntaryCountFieldNumber = 8,
    kIpcReceivedCountFieldNumber = 9,
    kIpcSentCountFieldNumber = 10,
    kPageFaultHardCountFieldNumber = 11,
    kPageFaultSoftCountFieldNumber = 12,
    kSignalCountFieldNumber = 13,
    kSwapCountFieldNumber = 14,
    kRssFieldNumber = 15,
    kLoad1MFieldNumber = 16,
    kLoad5MFieldNumber = 17,
    kLoad15MFieldNumber = 18,
    kCpuUserPercentFieldNumber = 19,
    kCpuSystemPercentFieldNumber = 20,
    kCpuPercentFieldNumber = 21,
  };
  // string title = 22;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string user = 23;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 uptime = 2;
  void clear_uptime();
  int32_t uptime() const;
  void set_uptime(int32_t value);
  private:
  int32_t _internal_uptime() const;
  void _internal_set_uptime(int32_t value);
  public:

  // int32 systemUptime = 3;
  void clear_systemuptime();
  int32_t systemuptime() const;
  void set_systemuptime(int32_t value);
  private:
  int32_t _internal_systemuptime() const;
  void _internal_set_systemuptime(int32_t value);
  public:

  // int64 freeMem = 4;
  void clear_freemem();
  int64_t freemem() const;
  void set_freemem(int64_t value);
  private:
  int64_t _internal_freemem() const;
  void _internal_set_freemem(int64_t value);
  public:

  // int32 blockInputOpCount = 5;
  void clear_blockinputopcount();
  int32_t blockinputopcount() const;
  void set_blockinputopcount(int32_t value);
  private:
  int32_t _internal_blockinputopcount() const;
  void _internal_set_blockinputopcount(int32_t value);
  public:

  // int32 blockOutputOpCount = 6;
  void clear_blockoutputopcount();
  int32_t blockoutputopcount() const;
  void set_blockoutputopcount(int32_t value);
  private:
  int32_t _internal_blockoutputopcount() const;
  void _internal_set_blockoutputopcount(int32_t value);
  public:

  // int32 ctxSwitchInvoluntaryCount = 7;
  void clear_ctxswitchinvoluntarycount();
  int32_t ctxswitchinvoluntarycount() const;
  void set_ctxswitchinvoluntarycount(int32_t value);
  private:
  int32_t _internal_ctxswitchinvoluntarycount() const;
  void _internal_set_ctxswitchinvoluntarycount(int32_t value);
  public:

  // int32 ctxSwitchVoluntaryCount = 8;
  void clear_ctxswitchvoluntarycount();
  int32_t ctxswitchvoluntarycount() const;
  void set_ctxswitchvoluntarycount(int32_t value);
  private:
  int32_t _internal_ctxswitchvoluntarycount() const;
  void _internal_set_ctxswitchvoluntarycount(int32_t value);
  public:

  // int32 ipcReceivedCount = 9;
  void clear_ipcreceivedcount();
  int32_t ipcreceivedcount() const;
  void set_ipcreceivedcount(int32_t value);
  private:
  int32_t _internal_ipcreceivedcount() const;
  void _internal_set_ipcreceivedcount(int32_t value);
  public:

  // int32 ipcSentCount = 10;
  void clear_ipcsentcount();
  int32_t ipcsentcount() const;
  void set_ipcsentcount(int32_t value);
  private:
  int32_t _internal_ipcsentcount() const;
  void _internal_set_ipcsentcount(int32_t value);
  public:

  // int32 pageFaultHardCount = 11;
  void clear_pagefaulthardcount();
  int32_t pagefaulthardcount() const;
  void set_pagefaulthardcount(int32_t value);
  private:
  int32_t _internal_pagefaulthardcount() const;
  void _internal_set_pagefaulthardcount(int32_t value);
  public:

  // int32 pageFaultSoftCount = 12;
  void clear_pagefaultsoftcount();
  int32_t pagefaultsoftcount() const;
  void set_pagefaultsoftcount(int32_t value);
  private:
  int32_t _internal_pagefaultsoftcount() const;
  void _internal_set_pagefaultsoftcount(int32_t value);
  public:

  // int32 signalCount = 13;
  void clear_signalcount();
  int32_t signalcount() const;
  void set_signalcount(int32_t value);
  private:
  int32_t _internal_signalcount() const;
  void _internal_set_signalcount(int32_t value);
  public:

  // int32 swapCount = 14;
  void clear_swapcount();
  int32_t swapcount() const;
  void set_swapcount(int32_t value);
  private:
  int32_t _internal_swapcount() const;
  void _internal_set_swapcount(int32_t value);
  public:

  // int64 rss = 15;
  void clear_rss();
  int64_t rss() const;
  void set_rss(int64_t value);
  private:
  int64_t _internal_rss() const;
  void _internal_set_rss(int64_t value);
  public:

  // double load1m = 16;
  void clear_load1m();
  double load1m() const;
  void set_load1m(double value);
  private:
  double _internal_load1m() const;
  void _internal_set_load1m(double value);
  public:

  // double load5m = 17;
  void clear_load5m();
  double load5m() const;
  void set_load5m(double value);
  private:
  double _internal_load5m() const;
  void _internal_set_load5m(double value);
  public:

  // double load15m = 18;
  void clear_load15m();
  double load15m() const;
  void set_load15m(double value);
  private:
  double _internal_load15m() const;
  void _internal_set_load15m(double value);
  public:

  // double cpuUserPercent = 19;
  void clear_cpuuserpercent();
  double cpuuserpercent() const;
  void set_cpuuserpercent(double value);
  private:
  double _internal_cpuuserpercent() const;
  void _internal_set_cpuuserpercent(double value);
  public:

  // double cpuSystemPercent = 20;
  void clear_cpusystempercent();
  double cpusystempercent() const;
  void set_cpusystempercent(double value);
  private:
  double _internal_cpusystempercent() const;
  void _internal_set_cpusystempercent(double value);
  public:

  // double cpuPercent = 21;
  void clear_cpupercent();
  double cpupercent() const;
  void set_cpupercent(double value);
  private:
  double _internal_cpupercent() const;
  void _internal_set_cpupercent(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.ProcessMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    int64_t timestamp_;
    int32_t uptime_;
    int32_t systemuptime_;
    int64_t freemem_;
    int32_t blockinputopcount_;
    int32_t blockoutputopcount_;
    int32_t ctxswitchinvoluntarycount_;
    int32_t ctxswitchvoluntarycount_;
    int32_t ipcreceivedcount_;
    int32_t ipcsentcount_;
    int32_t pagefaulthardcount_;
    int32_t pagefaultsoftcount_;
    int32_t signalcount_;
    int32_t swapcount_;
    int64_t rss_;
    double load1m_;
    double load5m_;
    double load15m_;
    double cpuuserpercent_;
    double cpusystempercent_;
    double cpupercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class ThreadMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.ThreadMetrics) */ {
 public:
  inline ThreadMetrics() : ThreadMetrics(nullptr) {}
  ~ThreadMetrics() override;
  explicit PROTOBUF_CONSTEXPR ThreadMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadMetrics(const ThreadMetrics& from);
  ThreadMetrics(ThreadMetrics&& from) noexcept
    : ThreadMetrics() {
    *this = ::std::move(from);
  }

  inline ThreadMetrics& operator=(const ThreadMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadMetrics& operator=(ThreadMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadMetrics* internal_default_instance() {
    return reinterpret_cast<const ThreadMetrics*>(
               &_ThreadMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThreadMetrics& a, ThreadMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThreadMetrics& from) {
    ThreadMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.ThreadMetrics";
  }
  protected:
  explicit ThreadMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadNameFieldNumber = 63,
    kTimestampFieldNumber = 2,
    kThreadIdFieldNumber = 1,
    kActiveHandlesFieldNumber = 3,
    kHeapTotalFieldNumber = 5,
    kTotalHeapSizeExecutableFieldNumber = 6,
    kTotalPhysicalSizeFieldNumber = 7,
    kTotalAvailableSizeFieldNumber = 8,
    kHeapUsedFieldNumber = 9,
    kActiveRequestsFieldNumber = 4,
    kNumberOfNativeContextsFieldNumber = 14,
    kHeapSizeLimitFieldNumber = 10,
    kMallocedMemoryFieldNumber = 11,
    kExternalMemFieldNumber = 12,
    kPeakMallocedMemoryFieldNumber = 13,
    kNumberOfDetachedContextsFieldNumber = 15,
    kGcCountFieldNumber = 16,
    kGcForcedCountFieldNumber = 17,
    kGcFullCountFieldNumber = 18,
    kGcMajorCountFieldNumber = 19,
    kDnsCountFieldNumber = 20,
    kHttpClientAbortCountFieldNumber = 21,
    kHttpClientCountFieldNumber = 22,
    kHttpServerAbortCountFieldNumber = 23,
    kHttpServerCountFieldNumber = 24,
    kLoopIdleTimeFieldNumber = 25,
    kLoopIterationsFieldNumber = 26,
    kLoopIterWithEventsFieldNumber = 27,
    kEventsProcessedFieldNumber = 28,
    kEventsWaitingFieldNumber = 29,
    kProviderDelayFieldNumber = 30,
    kProcessingDelayFieldNumber = 31,
    kLoopTotalCountFieldNumber = 32,
    kPipeServerCreatedCountFieldNumber = 33,
    kPipeServerDestroyedCountFieldNumber = 34,
    kPipeSocketCreatedCountFieldNumber = 35,
    kPipeSocketDestroyedCountFieldNumber = 36,
    kTcpServerCreatedCountFieldNumber = 37,
    kTcpServerDestroyedCountFieldNumber = 38,
    kTcpSocketCreatedCountFieldNumber = 39,
    kTcpSocketDestroyedCountFieldNumber = 40,
    kUdpSocketCreatedCountFieldNumber = 41,
    kUdpSocketDestroyedCountFieldNumber = 42,
    kPromiseCreatedCountFieldNumber = 43,
    kPromiseResolvedCountFieldNumber = 44,
    kFsHandlesOpenedCountFieldNumber = 45,
    kGcDurUs99PtileFieldNumber = 47,
    kGcDurUsMedianFieldNumber = 48,
    kDns99PtileFieldNumber = 49,
    kDnsMedianFieldNumber = 50,
    kHttpClient99PtileFieldNumber = 51,
    kHttpClientMedianFieldNumber = 52,
    kHttpServer99PtileFieldNumber = 53,
    kFsHandlesClosedCountFieldNumber = 46,
    kLoopAvgTasksFieldNumber = 60,
    kHttpServerMedianFieldNumber = 54,
    kLoopUtilizationFieldNumber = 55,
    kRes5SFieldNumber = 56,
    kRes1MFieldNumber = 57,
    kRes5MFieldNumber = 58,
    kRes15MFieldNumber = 59,
    kLoopEstimatedLagFieldNumber = 61,
    kLoopIdlePercentFieldNumber = 62,
  };
  // string threadName = 63;
  void clear_threadname();
  const std::string& threadname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threadname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threadname();
  PROTOBUF_NODISCARD std::string* release_threadname();
  void set_allocated_threadname(std::string* threadname);
  private:
  const std::string& _internal_threadname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threadname(const std::string& value);
  std::string* _internal_mutable_threadname();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 threadId = 1;
  void clear_threadid();
  int32_t threadid() const;
  void set_threadid(int32_t value);
  private:
  int32_t _internal_threadid() const;
  void _internal_set_threadid(int32_t value);
  public:

  // int32 activeHandles = 3;
  void clear_activehandles();
  int32_t activehandles() const;
  void set_activehandles(int32_t value);
  private:
  int32_t _internal_activehandles() const;
  void _internal_set_activehandles(int32_t value);
  public:

  // int64 heapTotal = 5;
  void clear_heaptotal();
  int64_t heaptotal() const;
  void set_heaptotal(int64_t value);
  private:
  int64_t _internal_heaptotal() const;
  void _internal_set_heaptotal(int64_t value);
  public:

  // int64 totalHeapSizeExecutable = 6;
  void clear_totalheapsizeexecutable();
  int64_t totalheapsizeexecutable() const;
  void set_totalheapsizeexecutable(int64_t value);
  private:
  int64_t _internal_totalheapsizeexecutable() const;
  void _internal_set_totalheapsizeexecutable(int64_t value);
  public:

  // int64 totalPhysicalSize = 7;
  void clear_totalphysicalsize();
  int64_t totalphysicalsize() const;
  void set_totalphysicalsize(int64_t value);
  private:
  int64_t _internal_totalphysicalsize() const;
  void _internal_set_totalphysicalsize(int64_t value);
  public:

  // int64 totalAvailableSize = 8;
  void clear_totalavailablesize();
  int64_t totalavailablesize() const;
  void set_totalavailablesize(int64_t value);
  private:
  int64_t _internal_totalavailablesize() const;
  void _internal_set_totalavailablesize(int64_t value);
  public:

  // int64 heapUsed = 9;
  void clear_heapused();
  int64_t heapused() const;
  void set_heapused(int64_t value);
  private:
  int64_t _internal_heapused() const;
  void _internal_set_heapused(int64_t value);
  public:

  // int32 activeRequests = 4;
  void clear_activerequests();
  int32_t activerequests() const;
  void set_activerequests(int32_t value);
  private:
  int32_t _internal_activerequests() const;
  void _internal_set_activerequests(int32_t value);
  public:

  // int32 numberOfNativeContexts = 14;
  void clear_numberofnativecontexts();
  int32_t numberofnativecontexts() const;
  void set_numberofnativecontexts(int32_t value);
  private:
  int32_t _internal_numberofnativecontexts() const;
  void _internal_set_numberofnativecontexts(int32_t value);
  public:

  // int64 heapSizeLimit = 10;
  void clear_heapsizelimit();
  int64_t heapsizelimit() const;
  void set_heapsizelimit(int64_t value);
  private:
  int64_t _internal_heapsizelimit() const;
  void _internal_set_heapsizelimit(int64_t value);
  public:

  // int64 mallocedMemory = 11;
  void clear_mallocedmemory();
  int64_t mallocedmemory() const;
  void set_mallocedmemory(int64_t value);
  private:
  int64_t _internal_mallocedmemory() const;
  void _internal_set_mallocedmemory(int64_t value);
  public:

  // int64 externalMem = 12;
  void clear_externalmem();
  int64_t externalmem() const;
  void set_externalmem(int64_t value);
  private:
  int64_t _internal_externalmem() const;
  void _internal_set_externalmem(int64_t value);
  public:

  // int64 peakMallocedMemory = 13;
  void clear_peakmallocedmemory();
  int64_t peakmallocedmemory() const;
  void set_peakmallocedmemory(int64_t value);
  private:
  int64_t _internal_peakmallocedmemory() const;
  void _internal_set_peakmallocedmemory(int64_t value);
  public:

  // int32 numberOfDetachedContexts = 15;
  void clear_numberofdetachedcontexts();
  int32_t numberofdetachedcontexts() const;
  void set_numberofdetachedcontexts(int32_t value);
  private:
  int32_t _internal_numberofdetachedcontexts() const;
  void _internal_set_numberofdetachedcontexts(int32_t value);
  public:

  // int32 gcCount = 16;
  void clear_gccount();
  int32_t gccount() const;
  void set_gccount(int32_t value);
  private:
  int32_t _internal_gccount() const;
  void _internal_set_gccount(int32_t value);
  public:

  // int32 gcForcedCount = 17;
  void clear_gcforcedcount();
  int32_t gcforcedcount() const;
  void set_gcforcedcount(int32_t value);
  private:
  int32_t _internal_gcforcedcount() const;
  void _internal_set_gcforcedcount(int32_t value);
  public:

  // int32 gcFullCount = 18;
  void clear_gcfullcount();
  int32_t gcfullcount() const;
  void set_gcfullcount(int32_t value);
  private:
  int32_t _internal_gcfullcount() const;
  void _internal_set_gcfullcount(int32_t value);
  public:

  // int32 gcMajorCount = 19;
  void clear_gcmajorcount();
  int32_t gcmajorcount() const;
  void set_gcmajorcount(int32_t value);
  private:
  int32_t _internal_gcmajorcount() const;
  void _internal_set_gcmajorcount(int32_t value);
  public:

  // int32 dnsCount = 20;
  void clear_dnscount();
  int32_t dnscount() const;
  void set_dnscount(int32_t value);
  private:
  int32_t _internal_dnscount() const;
  void _internal_set_dnscount(int32_t value);
  public:

  // int32 httpClientAbortCount = 21;
  void clear_httpclientabortcount();
  int32_t httpclientabortcount() const;
  void set_httpclientabortcount(int32_t value);
  private:
  int32_t _internal_httpclientabortcount() const;
  void _internal_set_httpclientabortcount(int32_t value);
  public:

  // int32 httpClientCount = 22;
  void clear_httpclientcount();
  int32_t httpclientcount() const;
  void set_httpclientcount(int32_t value);
  private:
  int32_t _internal_httpclientcount() const;
  void _internal_set_httpclientcount(int32_t value);
  public:

  // int32 httpServerAbortCount = 23;
  void clear_httpserverabortcount();
  int32_t httpserverabortcount() const;
  void set_httpserverabortcount(int32_t value);
  private:
  int32_t _internal_httpserverabortcount() const;
  void _internal_set_httpserverabortcount(int32_t value);
  public:

  // int32 httpServerCount = 24;
  void clear_httpservercount();
  int32_t httpservercount() const;
  void set_httpservercount(int32_t value);
  private:
  int32_t _internal_httpservercount() const;
  void _internal_set_httpservercount(int32_t value);
  public:

  // int64 loopIdleTime = 25;
  void clear_loopidletime();
  int64_t loopidletime() const;
  void set_loopidletime(int64_t value);
  private:
  int64_t _internal_loopidletime() const;
  void _internal_set_loopidletime(int64_t value);
  public:

  // int32 loopIterations = 26;
  void clear_loopiterations();
  int32_t loopiterations() const;
  void set_loopiterations(int32_t value);
  private:
  int32_t _internal_loopiterations() const;
  void _internal_set_loopiterations(int32_t value);
  public:

  // int32 loopIterWithEvents = 27;
  void clear_loopiterwithevents();
  int32_t loopiterwithevents() const;
  void set_loopiterwithevents(int32_t value);
  private:
  int32_t _internal_loopiterwithevents() const;
  void _internal_set_loopiterwithevents(int32_t value);
  public:

  // int32 eventsProcessed = 28;
  void clear_eventsprocessed();
  int32_t eventsprocessed() const;
  void set_eventsprocessed(int32_t value);
  private:
  int32_t _internal_eventsprocessed() const;
  void _internal_set_eventsprocessed(int32_t value);
  public:

  // int32 eventsWaiting = 29;
  void clear_eventswaiting();
  int32_t eventswaiting() const;
  void set_eventswaiting(int32_t value);
  private:
  int32_t _internal_eventswaiting() const;
  void _internal_set_eventswaiting(int32_t value);
  public:

  // int64 providerDelay = 30;
  void clear_providerdelay();
  int64_t providerdelay() const;
  void set_providerdelay(int64_t value);
  private:
  int64_t _internal_providerdelay() const;
  void _internal_set_providerdelay(int64_t value);
  public:

  // int64 processingDelay = 31;
  void clear_processingdelay();
  int64_t processingdelay() const;
  void set_processingdelay(int64_t value);
  private:
  int64_t _internal_processingdelay() const;
  void _internal_set_processingdelay(int64_t value);
  public:

  // int32 loopTotalCount = 32;
  void clear_looptotalcount();
  int32_t looptotalcount() const;
  void set_looptotalcount(int32_t value);
  private:
  int32_t _internal_looptotalcount() const;
  void _internal_set_looptotalcount(int32_t value);
  public:

  // int32 pipeServerCreatedCount = 33;
  void clear_pipeservercreatedcount();
  int32_t pipeservercreatedcount() const;
  void set_pipeservercreatedcount(int32_t value);
  private:
  int32_t _internal_pipeservercreatedcount() const;
  void _internal_set_pipeservercreatedcount(int32_t value);
  public:

  // int32 pipeServerDestroyedCount = 34;
  void clear_pipeserverdestroyedcount();
  int32_t pipeserverdestroyedcount() const;
  void set_pipeserverdestroyedcount(int32_t value);
  private:
  int32_t _internal_pipeserverdestroyedcount() const;
  void _internal_set_pipeserverdestroyedcount(int32_t value);
  public:

  // int32 pipeSocketCreatedCount = 35;
  void clear_pipesocketcreatedcount();
  int32_t pipesocketcreatedcount() const;
  void set_pipesocketcreatedcount(int32_t value);
  private:
  int32_t _internal_pipesocketcreatedcount() const;
  void _internal_set_pipesocketcreatedcount(int32_t value);
  public:

  // int32 pipeSocketDestroyedCount = 36;
  void clear_pipesocketdestroyedcount();
  int32_t pipesocketdestroyedcount() const;
  void set_pipesocketdestroyedcount(int32_t value);
  private:
  int32_t _internal_pipesocketdestroyedcount() const;
  void _internal_set_pipesocketdestroyedcount(int32_t value);
  public:

  // int32 tcpServerCreatedCount = 37;
  void clear_tcpservercreatedcount();
  int32_t tcpservercreatedcount() const;
  void set_tcpservercreatedcount(int32_t value);
  private:
  int32_t _internal_tcpservercreatedcount() const;
  void _internal_set_tcpservercreatedcount(int32_t value);
  public:

  // int32 tcpServerDestroyedCount = 38;
  void clear_tcpserverdestroyedcount();
  int32_t tcpserverdestroyedcount() const;
  void set_tcpserverdestroyedcount(int32_t value);
  private:
  int32_t _internal_tcpserverdestroyedcount() const;
  void _internal_set_tcpserverdestroyedcount(int32_t value);
  public:

  // int32 tcpSocketCreatedCount = 39;
  void clear_tcpsocketcreatedcount();
  int32_t tcpsocketcreatedcount() const;
  void set_tcpsocketcreatedcount(int32_t value);
  private:
  int32_t _internal_tcpsocketcreatedcount() const;
  void _internal_set_tcpsocketcreatedcount(int32_t value);
  public:

  // int32 tcpSocketDestroyedCount = 40;
  void clear_tcpsocketdestroyedcount();
  int32_t tcpsocketdestroyedcount() const;
  void set_tcpsocketdestroyedcount(int32_t value);
  private:
  int32_t _internal_tcpsocketdestroyedcount() const;
  void _internal_set_tcpsocketdestroyedcount(int32_t value);
  public:

  // int32 udpSocketCreatedCount = 41;
  void clear_udpsocketcreatedcount();
  int32_t udpsocketcreatedcount() const;
  void set_udpsocketcreatedcount(int32_t value);
  private:
  int32_t _internal_udpsocketcreatedcount() const;
  void _internal_set_udpsocketcreatedcount(int32_t value);
  public:

  // int32 udpSocketDestroyedCount = 42;
  void clear_udpsocketdestroyedcount();
  int32_t udpsocketdestroyedcount() const;
  void set_udpsocketdestroyedcount(int32_t value);
  private:
  int32_t _internal_udpsocketdestroyedcount() const;
  void _internal_set_udpsocketdestroyedcount(int32_t value);
  public:

  // int32 promiseCreatedCount = 43;
  void clear_promisecreatedcount();
  int32_t promisecreatedcount() const;
  void set_promisecreatedcount(int32_t value);
  private:
  int32_t _internal_promisecreatedcount() const;
  void _internal_set_promisecreatedcount(int32_t value);
  public:

  // int32 promiseResolvedCount = 44;
  void clear_promiseresolvedcount();
  int32_t promiseresolvedcount() const;
  void set_promiseresolvedcount(int32_t value);
  private:
  int32_t _internal_promiseresolvedcount() const;
  void _internal_set_promiseresolvedcount(int32_t value);
  public:

  // int32 fsHandlesOpenedCount = 45;
  void clear_fshandlesopenedcount();
  int32_t fshandlesopenedcount() const;
  void set_fshandlesopenedcount(int32_t value);
  private:
  int32_t _internal_fshandlesopenedcount() const;
  void _internal_set_fshandlesopenedcount(int32_t value);
  public:

  // int64 gcDurUs99Ptile = 47;
  void clear_gcdurus99ptile();
  int64_t gcdurus99ptile() const;
  void set_gcdurus99ptile(int64_t value);
  private:
  int64_t _internal_gcdurus99ptile() const;
  void _internal_set_gcdurus99ptile(int64_t value);
  public:

  // int64 gcDurUsMedian = 48;
  void clear_gcdurusmedian();
  int64_t gcdurusmedian() const;
  void set_gcdurusmedian(int64_t value);
  private:
  int64_t _internal_gcdurusmedian() const;
  void _internal_set_gcdurusmedian(int64_t value);
  public:

  // int64 dns99Ptile = 49;
  void clear_dns99ptile();
  int64_t dns99ptile() const;
  void set_dns99ptile(int64_t value);
  private:
  int64_t _internal_dns99ptile() const;
  void _internal_set_dns99ptile(int64_t value);
  public:

  // int64 dnsMedian = 50;
  void clear_dnsmedian();
  int64_t dnsmedian() const;
  void set_dnsmedian(int64_t value);
  private:
  int64_t _internal_dnsmedian() const;
  void _internal_set_dnsmedian(int64_t value);
  public:

  // int64 httpClient99Ptile = 51;
  void clear_httpclient99ptile();
  int64_t httpclient99ptile() const;
  void set_httpclient99ptile(int64_t value);
  private:
  int64_t _internal_httpclient99ptile() const;
  void _internal_set_httpclient99ptile(int64_t value);
  public:

  // int64 httpClientMedian = 52;
  void clear_httpclientmedian();
  int64_t httpclientmedian() const;
  void set_httpclientmedian(int64_t value);
  private:
  int64_t _internal_httpclientmedian() const;
  void _internal_set_httpclientmedian(int64_t value);
  public:

  // int64 httpServer99Ptile = 53;
  void clear_httpserver99ptile();
  int64_t httpserver99ptile() const;
  void set_httpserver99ptile(int64_t value);
  private:
  int64_t _internal_httpserver99ptile() const;
  void _internal_set_httpserver99ptile(int64_t value);
  public:

  // int32 fsHandlesClosedCount = 46;
  void clear_fshandlesclosedcount();
  int32_t fshandlesclosedcount() const;
  void set_fshandlesclosedcount(int32_t value);
  private:
  int32_t _internal_fshandlesclosedcount() const;
  void _internal_set_fshandlesclosedcount(int32_t value);
  public:

  // int32 loopAvgTasks = 60;
  void clear_loopavgtasks();
  int32_t loopavgtasks() const;
  void set_loopavgtasks(int32_t value);
  private:
  int32_t _internal_loopavgtasks() const;
  void _internal_set_loopavgtasks(int32_t value);
  public:

  // int64 httpServerMedian = 54;
  void clear_httpservermedian();
  int64_t httpservermedian() const;
  void set_httpservermedian(int64_t value);
  private:
  int64_t _internal_httpservermedian() const;
  void _internal_set_httpservermedian(int64_t value);
  public:

  // double loopUtilization = 55;
  void clear_looputilization();
  double looputilization() const;
  void set_looputilization(double value);
  private:
  double _internal_looputilization() const;
  void _internal_set_looputilization(double value);
  public:

  // double res5s = 56;
  void clear_res5s();
  double res5s() const;
  void set_res5s(double value);
  private:
  double _internal_res5s() const;
  void _internal_set_res5s(double value);
  public:

  // double res1m = 57;
  void clear_res1m();
  double res1m() const;
  void set_res1m(double value);
  private:
  double _internal_res1m() const;
  void _internal_set_res1m(double value);
  public:

  // double res5m = 58;
  void clear_res5m();
  double res5m() const;
  void set_res5m(double value);
  private:
  double _internal_res5m() const;
  void _internal_set_res5m(double value);
  public:

  // double res15m = 59;
  void clear_res15m();
  double res15m() const;
  void set_res15m(double value);
  private:
  double _internal_res15m() const;
  void _internal_set_res15m(double value);
  public:

  // double loopEstimatedLag = 61;
  void clear_loopestimatedlag();
  double loopestimatedlag() const;
  void set_loopestimatedlag(double value);
  private:
  double _internal_loopestimatedlag() const;
  void _internal_set_loopestimatedlag(double value);
  public:

  // double loopIdlePercent = 62;
  void clear_loopidlepercent();
  double loopidlepercent() const;
  void set_loopidlepercent(double value);
  private:
  double _internal_loopidlepercent() const;
  void _internal_set_loopidlepercent(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.ThreadMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threadname_;
    int64_t timestamp_;
    int32_t threadid_;
    int32_t activehandles_;
    int64_t heaptotal_;
    int64_t totalheapsizeexecutable_;
    int64_t totalphysicalsize_;
    int64_t totalavailablesize_;
    int64_t heapused_;
    int32_t activerequests_;
    int32_t numberofnativecontexts_;
    int64_t heapsizelimit_;
    int64_t mallocedmemory_;
    int64_t externalmem_;
    int64_t peakmallocedmemory_;
    int32_t numberofdetachedcontexts_;
    int32_t gccount_;
    int32_t gcforcedcount_;
    int32_t gcfullcount_;
    int32_t gcmajorcount_;
    int32_t dnscount_;
    int32_t httpclientabortcount_;
    int32_t httpclientcount_;
    int32_t httpserverabortcount_;
    int32_t httpservercount_;
    int64_t loopidletime_;
    int32_t loopiterations_;
    int32_t loopiterwithevents_;
    int32_t eventsprocessed_;
    int32_t eventswaiting_;
    int64_t providerdelay_;
    int64_t processingdelay_;
    int32_t looptotalcount_;
    int32_t pipeservercreatedcount_;
    int32_t pipeserverdestroyedcount_;
    int32_t pipesocketcreatedcount_;
    int32_t pipesocketdestroyedcount_;
    int32_t tcpservercreatedcount_;
    int32_t tcpserverdestroyedcount_;
    int32_t tcpsocketcreatedcount_;
    int32_t tcpsocketdestroyedcount_;
    int32_t udpsocketcreatedcount_;
    int32_t udpsocketdestroyedcount_;
    int32_t promisecreatedcount_;
    int32_t promiseresolvedcount_;
    int32_t fshandlesopenedcount_;
    int64_t gcdurus99ptile_;
    int64_t gcdurusmedian_;
    int64_t dns99ptile_;
    int64_t dnsmedian_;
    int64_t httpclient99ptile_;
    int64_t httpclientmedian_;
    int64_t httpserver99ptile_;
    int32_t fshandlesclosedcount_;
    int32_t loopavgtasks_;
    int64_t httpservermedian_;
    double looputilization_;
    double res5s_;
    double res1m_;
    double res5m_;
    double res15m_;
    double loopestimatedlag_;
    double loopidlepercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class MetricsBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.MetricsBody) */ {
 public:
  inline MetricsBody() : MetricsBody(nullptr) {}
  ~MetricsBody() override;
  explicit PROTOBUF_CONSTEXPR MetricsBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricsBody(const MetricsBody& from);
  MetricsBody(MetricsBody&& from) noexcept
    : MetricsBody() {
    *this = ::std::move(from);
  }

  inline MetricsBody& operator=(const MetricsBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsBody& operator=(MetricsBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsBody* internal_default_instance() {
    return reinterpret_cast<const MetricsBody*>(
               &_MetricsBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MetricsBody& a, MetricsBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricsBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricsBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricsBody& from) {
    MetricsBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.MetricsBody";
  }
  protected:
  explicit MetricsBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadMetricsFieldNumber = 2,
    kProcessMetricsFieldNumber = 1,
  };
  // repeated .grpcagent.ThreadMetrics threadMetrics = 2;
  int threadmetrics_size() const;
  private:
  int _internal_threadmetrics_size() const;
  public:
  void clear_threadmetrics();
  ::grpcagent::ThreadMetrics* mutable_threadmetrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::ThreadMetrics >*
      mutable_threadmetrics();
  private:
  const ::grpcagent::ThreadMetrics& _internal_threadmetrics(int index) const;
  ::grpcagent::ThreadMetrics* _internal_add_threadmetrics();
  public:
  const ::grpcagent::ThreadMetrics& threadmetrics(int index) const;
  ::grpcagent::ThreadMetrics* add_threadmetrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::ThreadMetrics >&
      threadmetrics() const;

  // .grpcagent.ProcessMetrics processMetrics = 1;
  bool has_processmetrics() const;
  private:
  bool _internal_has_processmetrics() const;
  public:
  void clear_processmetrics();
  const ::grpcagent::ProcessMetrics& processmetrics() const;
  PROTOBUF_NODISCARD ::grpcagent::ProcessMetrics* release_processmetrics();
  ::grpcagent::ProcessMetrics* mutable_processmetrics();
  void set_allocated_processmetrics(::grpcagent::ProcessMetrics* processmetrics);
  private:
  const ::grpcagent::ProcessMetrics& _internal_processmetrics() const;
  ::grpcagent::ProcessMetrics* _internal_mutable_processmetrics();
  public:
  void unsafe_arena_set_allocated_processmetrics(
      ::grpcagent::ProcessMetrics* processmetrics);
  ::grpcagent::ProcessMetrics* unsafe_arena_release_processmetrics();

  // @@protoc_insertion_point(class_scope:grpcagent.MetricsBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::ThreadMetrics > threadmetrics_;
    ::grpcagent::ProcessMetrics* processmetrics_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Metrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.Metrics) */ {
 public:
  inline Metrics() : Metrics(nullptr) {}
  ~Metrics() override;
  explicit PROTOBUF_CONSTEXPR Metrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metrics(const Metrics& from);
  Metrics(Metrics&& from) noexcept
    : Metrics() {
    *this = ::std::move(from);
  }

  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metrics& operator=(Metrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metrics* internal_default_instance() {
    return reinterpret_cast<const Metrics*>(
               &_Metrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Metrics& a, Metrics& b) {
    a.Swap(&b);
  }
  inline void Swap(Metrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metrics& from) {
    Metrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.Metrics";
  }
  protected:
  explicit Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .grpcagent.CommonResponse common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::grpcagent::CommonResponse& common() const;
  PROTOBUF_NODISCARD ::grpcagent::CommonResponse* release_common();
  ::grpcagent::CommonResponse* mutable_common();
  void set_allocated_common(::grpcagent::CommonResponse* common);
  private:
  const ::grpcagent::CommonResponse& _internal_common() const;
  ::grpcagent::CommonResponse* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::grpcagent::CommonResponse* common);
  ::grpcagent::CommonResponse* unsafe_arena_release_common();

  // .grpcagent.MetricsBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::grpcagent::MetricsBody& body() const;
  PROTOBUF_NODISCARD ::grpcagent::MetricsBody* release_body();
  ::grpcagent::MetricsBody* mutable_body();
  void set_allocated_body(::grpcagent::MetricsBody* body);
  private:
  const ::grpcagent::MetricsBody& _internal_body() const;
  ::grpcagent::MetricsBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::grpcagent::MetricsBody* body);
  ::grpcagent::MetricsBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:grpcagent.Metrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::grpcagent::CommonResponse* common_;
    ::grpcagent::MetricsBody* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessMetrics

// int64 timestamp = 1;
inline void ProcessMetrics::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ProcessMetrics::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ProcessMetrics::timestamp() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.timestamp)
  return _internal_timestamp();
}
inline void ProcessMetrics::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ProcessMetrics::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.timestamp)
}

// int32 uptime = 2;
inline void ProcessMetrics::clear_uptime() {
  _impl_.uptime_ = 0;
}
inline int32_t ProcessMetrics::_internal_uptime() const {
  return _impl_.uptime_;
}
inline int32_t ProcessMetrics::uptime() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.uptime)
  return _internal_uptime();
}
inline void ProcessMetrics::_internal_set_uptime(int32_t value) {
  
  _impl_.uptime_ = value;
}
inline void ProcessMetrics::set_uptime(int32_t value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.uptime)
}

// int32 systemUptime = 3;
inline void ProcessMetrics::clear_systemuptime() {
  _impl_.systemuptime_ = 0;
}
inline int32_t ProcessMetrics::_internal_systemuptime() const {
  return _impl_.systemuptime_;
}
inline int32_t ProcessMetrics::systemuptime() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.systemUptime)
  return _internal_systemuptime();
}
inline void ProcessMetrics::_internal_set_systemuptime(int32_t value) {
  
  _impl_.systemuptime_ = value;
}
inline void ProcessMetrics::set_systemuptime(int32_t value) {
  _internal_set_systemuptime(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.systemUptime)
}

// int64 freeMem = 4;
inline void ProcessMetrics::clear_freemem() {
  _impl_.freemem_ = int64_t{0};
}
inline int64_t ProcessMetrics::_internal_freemem() const {
  return _impl_.freemem_;
}
inline int64_t ProcessMetrics::freemem() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.freeMem)
  return _internal_freemem();
}
inline void ProcessMetrics::_internal_set_freemem(int64_t value) {
  
  _impl_.freemem_ = value;
}
inline void ProcessMetrics::set_freemem(int64_t value) {
  _internal_set_freemem(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.freeMem)
}

// int32 blockInputOpCount = 5;
inline void ProcessMetrics::clear_blockinputopcount() {
  _impl_.blockinputopcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_blockinputopcount() const {
  return _impl_.blockinputopcount_;
}
inline int32_t ProcessMetrics::blockinputopcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.blockInputOpCount)
  return _internal_blockinputopcount();
}
inline void ProcessMetrics::_internal_set_blockinputopcount(int32_t value) {
  
  _impl_.blockinputopcount_ = value;
}
inline void ProcessMetrics::set_blockinputopcount(int32_t value) {
  _internal_set_blockinputopcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.blockInputOpCount)
}

// int32 blockOutputOpCount = 6;
inline void ProcessMetrics::clear_blockoutputopcount() {
  _impl_.blockoutputopcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_blockoutputopcount() const {
  return _impl_.blockoutputopcount_;
}
inline int32_t ProcessMetrics::blockoutputopcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.blockOutputOpCount)
  return _internal_blockoutputopcount();
}
inline void ProcessMetrics::_internal_set_blockoutputopcount(int32_t value) {
  
  _impl_.blockoutputopcount_ = value;
}
inline void ProcessMetrics::set_blockoutputopcount(int32_t value) {
  _internal_set_blockoutputopcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.blockOutputOpCount)
}

// int32 ctxSwitchInvoluntaryCount = 7;
inline void ProcessMetrics::clear_ctxswitchinvoluntarycount() {
  _impl_.ctxswitchinvoluntarycount_ = 0;
}
inline int32_t ProcessMetrics::_internal_ctxswitchinvoluntarycount() const {
  return _impl_.ctxswitchinvoluntarycount_;
}
inline int32_t ProcessMetrics::ctxswitchinvoluntarycount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.ctxSwitchInvoluntaryCount)
  return _internal_ctxswitchinvoluntarycount();
}
inline void ProcessMetrics::_internal_set_ctxswitchinvoluntarycount(int32_t value) {
  
  _impl_.ctxswitchinvoluntarycount_ = value;
}
inline void ProcessMetrics::set_ctxswitchinvoluntarycount(int32_t value) {
  _internal_set_ctxswitchinvoluntarycount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.ctxSwitchInvoluntaryCount)
}

// int32 ctxSwitchVoluntaryCount = 8;
inline void ProcessMetrics::clear_ctxswitchvoluntarycount() {
  _impl_.ctxswitchvoluntarycount_ = 0;
}
inline int32_t ProcessMetrics::_internal_ctxswitchvoluntarycount() const {
  return _impl_.ctxswitchvoluntarycount_;
}
inline int32_t ProcessMetrics::ctxswitchvoluntarycount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.ctxSwitchVoluntaryCount)
  return _internal_ctxswitchvoluntarycount();
}
inline void ProcessMetrics::_internal_set_ctxswitchvoluntarycount(int32_t value) {
  
  _impl_.ctxswitchvoluntarycount_ = value;
}
inline void ProcessMetrics::set_ctxswitchvoluntarycount(int32_t value) {
  _internal_set_ctxswitchvoluntarycount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.ctxSwitchVoluntaryCount)
}

// int32 ipcReceivedCount = 9;
inline void ProcessMetrics::clear_ipcreceivedcount() {
  _impl_.ipcreceivedcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_ipcreceivedcount() const {
  return _impl_.ipcreceivedcount_;
}
inline int32_t ProcessMetrics::ipcreceivedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.ipcReceivedCount)
  return _internal_ipcreceivedcount();
}
inline void ProcessMetrics::_internal_set_ipcreceivedcount(int32_t value) {
  
  _impl_.ipcreceivedcount_ = value;
}
inline void ProcessMetrics::set_ipcreceivedcount(int32_t value) {
  _internal_set_ipcreceivedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.ipcReceivedCount)
}

// int32 ipcSentCount = 10;
inline void ProcessMetrics::clear_ipcsentcount() {
  _impl_.ipcsentcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_ipcsentcount() const {
  return _impl_.ipcsentcount_;
}
inline int32_t ProcessMetrics::ipcsentcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.ipcSentCount)
  return _internal_ipcsentcount();
}
inline void ProcessMetrics::_internal_set_ipcsentcount(int32_t value) {
  
  _impl_.ipcsentcount_ = value;
}
inline void ProcessMetrics::set_ipcsentcount(int32_t value) {
  _internal_set_ipcsentcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.ipcSentCount)
}

// int32 pageFaultHardCount = 11;
inline void ProcessMetrics::clear_pagefaulthardcount() {
  _impl_.pagefaulthardcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_pagefaulthardcount() const {
  return _impl_.pagefaulthardcount_;
}
inline int32_t ProcessMetrics::pagefaulthardcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.pageFaultHardCount)
  return _internal_pagefaulthardcount();
}
inline void ProcessMetrics::_internal_set_pagefaulthardcount(int32_t value) {
  
  _impl_.pagefaulthardcount_ = value;
}
inline void ProcessMetrics::set_pagefaulthardcount(int32_t value) {
  _internal_set_pagefaulthardcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.pageFaultHardCount)
}

// int32 pageFaultSoftCount = 12;
inline void ProcessMetrics::clear_pagefaultsoftcount() {
  _impl_.pagefaultsoftcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_pagefaultsoftcount() const {
  return _impl_.pagefaultsoftcount_;
}
inline int32_t ProcessMetrics::pagefaultsoftcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.pageFaultSoftCount)
  return _internal_pagefaultsoftcount();
}
inline void ProcessMetrics::_internal_set_pagefaultsoftcount(int32_t value) {
  
  _impl_.pagefaultsoftcount_ = value;
}
inline void ProcessMetrics::set_pagefaultsoftcount(int32_t value) {
  _internal_set_pagefaultsoftcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.pageFaultSoftCount)
}

// int32 signalCount = 13;
inline void ProcessMetrics::clear_signalcount() {
  _impl_.signalcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_signalcount() const {
  return _impl_.signalcount_;
}
inline int32_t ProcessMetrics::signalcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.signalCount)
  return _internal_signalcount();
}
inline void ProcessMetrics::_internal_set_signalcount(int32_t value) {
  
  _impl_.signalcount_ = value;
}
inline void ProcessMetrics::set_signalcount(int32_t value) {
  _internal_set_signalcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.signalCount)
}

// int32 swapCount = 14;
inline void ProcessMetrics::clear_swapcount() {
  _impl_.swapcount_ = 0;
}
inline int32_t ProcessMetrics::_internal_swapcount() const {
  return _impl_.swapcount_;
}
inline int32_t ProcessMetrics::swapcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.swapCount)
  return _internal_swapcount();
}
inline void ProcessMetrics::_internal_set_swapcount(int32_t value) {
  
  _impl_.swapcount_ = value;
}
inline void ProcessMetrics::set_swapcount(int32_t value) {
  _internal_set_swapcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.swapCount)
}

// int64 rss = 15;
inline void ProcessMetrics::clear_rss() {
  _impl_.rss_ = int64_t{0};
}
inline int64_t ProcessMetrics::_internal_rss() const {
  return _impl_.rss_;
}
inline int64_t ProcessMetrics::rss() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.rss)
  return _internal_rss();
}
inline void ProcessMetrics::_internal_set_rss(int64_t value) {
  
  _impl_.rss_ = value;
}
inline void ProcessMetrics::set_rss(int64_t value) {
  _internal_set_rss(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.rss)
}

// double load1m = 16;
inline void ProcessMetrics::clear_load1m() {
  _impl_.load1m_ = 0;
}
inline double ProcessMetrics::_internal_load1m() const {
  return _impl_.load1m_;
}
inline double ProcessMetrics::load1m() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.load1m)
  return _internal_load1m();
}
inline void ProcessMetrics::_internal_set_load1m(double value) {
  
  _impl_.load1m_ = value;
}
inline void ProcessMetrics::set_load1m(double value) {
  _internal_set_load1m(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.load1m)
}

// double load5m = 17;
inline void ProcessMetrics::clear_load5m() {
  _impl_.load5m_ = 0;
}
inline double ProcessMetrics::_internal_load5m() const {
  return _impl_.load5m_;
}
inline double ProcessMetrics::load5m() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.load5m)
  return _internal_load5m();
}
inline void ProcessMetrics::_internal_set_load5m(double value) {
  
  _impl_.load5m_ = value;
}
inline void ProcessMetrics::set_load5m(double value) {
  _internal_set_load5m(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.load5m)
}

// double load15m = 18;
inline void ProcessMetrics::clear_load15m() {
  _impl_.load15m_ = 0;
}
inline double ProcessMetrics::_internal_load15m() const {
  return _impl_.load15m_;
}
inline double ProcessMetrics::load15m() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.load15m)
  return _internal_load15m();
}
inline void ProcessMetrics::_internal_set_load15m(double value) {
  
  _impl_.load15m_ = value;
}
inline void ProcessMetrics::set_load15m(double value) {
  _internal_set_load15m(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.load15m)
}

// double cpuUserPercent = 19;
inline void ProcessMetrics::clear_cpuuserpercent() {
  _impl_.cpuuserpercent_ = 0;
}
inline double ProcessMetrics::_internal_cpuuserpercent() const {
  return _impl_.cpuuserpercent_;
}
inline double ProcessMetrics::cpuuserpercent() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.cpuUserPercent)
  return _internal_cpuuserpercent();
}
inline void ProcessMetrics::_internal_set_cpuuserpercent(double value) {
  
  _impl_.cpuuserpercent_ = value;
}
inline void ProcessMetrics::set_cpuuserpercent(double value) {
  _internal_set_cpuuserpercent(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.cpuUserPercent)
}

// double cpuSystemPercent = 20;
inline void ProcessMetrics::clear_cpusystempercent() {
  _impl_.cpusystempercent_ = 0;
}
inline double ProcessMetrics::_internal_cpusystempercent() const {
  return _impl_.cpusystempercent_;
}
inline double ProcessMetrics::cpusystempercent() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.cpuSystemPercent)
  return _internal_cpusystempercent();
}
inline void ProcessMetrics::_internal_set_cpusystempercent(double value) {
  
  _impl_.cpusystempercent_ = value;
}
inline void ProcessMetrics::set_cpusystempercent(double value) {
  _internal_set_cpusystempercent(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.cpuSystemPercent)
}

// double cpuPercent = 21;
inline void ProcessMetrics::clear_cpupercent() {
  _impl_.cpupercent_ = 0;
}
inline double ProcessMetrics::_internal_cpupercent() const {
  return _impl_.cpupercent_;
}
inline double ProcessMetrics::cpupercent() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.cpuPercent)
  return _internal_cpupercent();
}
inline void ProcessMetrics::_internal_set_cpupercent(double value) {
  
  _impl_.cpupercent_ = value;
}
inline void ProcessMetrics::set_cpupercent(double value) {
  _internal_set_cpupercent(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.cpuPercent)
}

// string title = 22;
inline void ProcessMetrics::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ProcessMetrics::title() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessMetrics::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.title)
}
inline std::string* ProcessMetrics::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProcessMetrics.title)
  return _s;
}
inline const std::string& ProcessMetrics::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ProcessMetrics::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessMetrics::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessMetrics::release_title() {
  // @@protoc_insertion_point(field_release:grpcagent.ProcessMetrics.title)
  return _impl_.title_.Release();
}
inline void ProcessMetrics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProcessMetrics.title)
}

// string user = 23;
inline void ProcessMetrics::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& ProcessMetrics::user() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProcessMetrics.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessMetrics::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.ProcessMetrics.user)
}
inline std::string* ProcessMetrics::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProcessMetrics.user)
  return _s;
}
inline const std::string& ProcessMetrics::_internal_user() const {
  return _impl_.user_.Get();
}
inline void ProcessMetrics::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessMetrics::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessMetrics::release_user() {
  // @@protoc_insertion_point(field_release:grpcagent.ProcessMetrics.user)
  return _impl_.user_.Release();
}
inline void ProcessMetrics::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProcessMetrics.user)
}

// -------------------------------------------------------------------

// ThreadMetrics

// int32 threadId = 1;
inline void ThreadMetrics::clear_threadid() {
  _impl_.threadid_ = 0;
}
inline int32_t ThreadMetrics::_internal_threadid() const {
  return _impl_.threadid_;
}
inline int32_t ThreadMetrics::threadid() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.threadId)
  return _internal_threadid();
}
inline void ThreadMetrics::_internal_set_threadid(int32_t value) {
  
  _impl_.threadid_ = value;
}
inline void ThreadMetrics::set_threadid(int32_t value) {
  _internal_set_threadid(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.threadId)
}

// int64 timestamp = 2;
inline void ThreadMetrics::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ThreadMetrics::timestamp() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.timestamp)
  return _internal_timestamp();
}
inline void ThreadMetrics::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ThreadMetrics::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.timestamp)
}

// int32 activeHandles = 3;
inline void ThreadMetrics::clear_activehandles() {
  _impl_.activehandles_ = 0;
}
inline int32_t ThreadMetrics::_internal_activehandles() const {
  return _impl_.activehandles_;
}
inline int32_t ThreadMetrics::activehandles() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.activeHandles)
  return _internal_activehandles();
}
inline void ThreadMetrics::_internal_set_activehandles(int32_t value) {
  
  _impl_.activehandles_ = value;
}
inline void ThreadMetrics::set_activehandles(int32_t value) {
  _internal_set_activehandles(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.activeHandles)
}

// int32 activeRequests = 4;
inline void ThreadMetrics::clear_activerequests() {
  _impl_.activerequests_ = 0;
}
inline int32_t ThreadMetrics::_internal_activerequests() const {
  return _impl_.activerequests_;
}
inline int32_t ThreadMetrics::activerequests() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.activeRequests)
  return _internal_activerequests();
}
inline void ThreadMetrics::_internal_set_activerequests(int32_t value) {
  
  _impl_.activerequests_ = value;
}
inline void ThreadMetrics::set_activerequests(int32_t value) {
  _internal_set_activerequests(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.activeRequests)
}

// int64 heapTotal = 5;
inline void ThreadMetrics::clear_heaptotal() {
  _impl_.heaptotal_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_heaptotal() const {
  return _impl_.heaptotal_;
}
inline int64_t ThreadMetrics::heaptotal() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.heapTotal)
  return _internal_heaptotal();
}
inline void ThreadMetrics::_internal_set_heaptotal(int64_t value) {
  
  _impl_.heaptotal_ = value;
}
inline void ThreadMetrics::set_heaptotal(int64_t value) {
  _internal_set_heaptotal(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.heapTotal)
}

// int64 totalHeapSizeExecutable = 6;
inline void ThreadMetrics::clear_totalheapsizeexecutable() {
  _impl_.totalheapsizeexecutable_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_totalheapsizeexecutable() const {
  return _impl_.totalheapsizeexecutable_;
}
inline int64_t ThreadMetrics::totalheapsizeexecutable() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.totalHeapSizeExecutable)
  return _internal_totalheapsizeexecutable();
}
inline void ThreadMetrics::_internal_set_totalheapsizeexecutable(int64_t value) {
  
  _impl_.totalheapsizeexecutable_ = value;
}
inline void ThreadMetrics::set_totalheapsizeexecutable(int64_t value) {
  _internal_set_totalheapsizeexecutable(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.totalHeapSizeExecutable)
}

// int64 totalPhysicalSize = 7;
inline void ThreadMetrics::clear_totalphysicalsize() {
  _impl_.totalphysicalsize_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_totalphysicalsize() const {
  return _impl_.totalphysicalsize_;
}
inline int64_t ThreadMetrics::totalphysicalsize() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.totalPhysicalSize)
  return _internal_totalphysicalsize();
}
inline void ThreadMetrics::_internal_set_totalphysicalsize(int64_t value) {
  
  _impl_.totalphysicalsize_ = value;
}
inline void ThreadMetrics::set_totalphysicalsize(int64_t value) {
  _internal_set_totalphysicalsize(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.totalPhysicalSize)
}

// int64 totalAvailableSize = 8;
inline void ThreadMetrics::clear_totalavailablesize() {
  _impl_.totalavailablesize_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_totalavailablesize() const {
  return _impl_.totalavailablesize_;
}
inline int64_t ThreadMetrics::totalavailablesize() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.totalAvailableSize)
  return _internal_totalavailablesize();
}
inline void ThreadMetrics::_internal_set_totalavailablesize(int64_t value) {
  
  _impl_.totalavailablesize_ = value;
}
inline void ThreadMetrics::set_totalavailablesize(int64_t value) {
  _internal_set_totalavailablesize(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.totalAvailableSize)
}

// int64 heapUsed = 9;
inline void ThreadMetrics::clear_heapused() {
  _impl_.heapused_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_heapused() const {
  return _impl_.heapused_;
}
inline int64_t ThreadMetrics::heapused() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.heapUsed)
  return _internal_heapused();
}
inline void ThreadMetrics::_internal_set_heapused(int64_t value) {
  
  _impl_.heapused_ = value;
}
inline void ThreadMetrics::set_heapused(int64_t value) {
  _internal_set_heapused(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.heapUsed)
}

// int64 heapSizeLimit = 10;
inline void ThreadMetrics::clear_heapsizelimit() {
  _impl_.heapsizelimit_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_heapsizelimit() const {
  return _impl_.heapsizelimit_;
}
inline int64_t ThreadMetrics::heapsizelimit() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.heapSizeLimit)
  return _internal_heapsizelimit();
}
inline void ThreadMetrics::_internal_set_heapsizelimit(int64_t value) {
  
  _impl_.heapsizelimit_ = value;
}
inline void ThreadMetrics::set_heapsizelimit(int64_t value) {
  _internal_set_heapsizelimit(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.heapSizeLimit)
}

// int64 mallocedMemory = 11;
inline void ThreadMetrics::clear_mallocedmemory() {
  _impl_.mallocedmemory_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_mallocedmemory() const {
  return _impl_.mallocedmemory_;
}
inline int64_t ThreadMetrics::mallocedmemory() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.mallocedMemory)
  return _internal_mallocedmemory();
}
inline void ThreadMetrics::_internal_set_mallocedmemory(int64_t value) {
  
  _impl_.mallocedmemory_ = value;
}
inline void ThreadMetrics::set_mallocedmemory(int64_t value) {
  _internal_set_mallocedmemory(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.mallocedMemory)
}

// int64 externalMem = 12;
inline void ThreadMetrics::clear_externalmem() {
  _impl_.externalmem_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_externalmem() const {
  return _impl_.externalmem_;
}
inline int64_t ThreadMetrics::externalmem() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.externalMem)
  return _internal_externalmem();
}
inline void ThreadMetrics::_internal_set_externalmem(int64_t value) {
  
  _impl_.externalmem_ = value;
}
inline void ThreadMetrics::set_externalmem(int64_t value) {
  _internal_set_externalmem(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.externalMem)
}

// int64 peakMallocedMemory = 13;
inline void ThreadMetrics::clear_peakmallocedmemory() {
  _impl_.peakmallocedmemory_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_peakmallocedmemory() const {
  return _impl_.peakmallocedmemory_;
}
inline int64_t ThreadMetrics::peakmallocedmemory() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.peakMallocedMemory)
  return _internal_peakmallocedmemory();
}
inline void ThreadMetrics::_internal_set_peakmallocedmemory(int64_t value) {
  
  _impl_.peakmallocedmemory_ = value;
}
inline void ThreadMetrics::set_peakmallocedmemory(int64_t value) {
  _internal_set_peakmallocedmemory(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.peakMallocedMemory)
}

// int32 numberOfNativeContexts = 14;
inline void ThreadMetrics::clear_numberofnativecontexts() {
  _impl_.numberofnativecontexts_ = 0;
}
inline int32_t ThreadMetrics::_internal_numberofnativecontexts() const {
  return _impl_.numberofnativecontexts_;
}
inline int32_t ThreadMetrics::numberofnativecontexts() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.numberOfNativeContexts)
  return _internal_numberofnativecontexts();
}
inline void ThreadMetrics::_internal_set_numberofnativecontexts(int32_t value) {
  
  _impl_.numberofnativecontexts_ = value;
}
inline void ThreadMetrics::set_numberofnativecontexts(int32_t value) {
  _internal_set_numberofnativecontexts(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.numberOfNativeContexts)
}

// int32 numberOfDetachedContexts = 15;
inline void ThreadMetrics::clear_numberofdetachedcontexts() {
  _impl_.numberofdetachedcontexts_ = 0;
}
inline int32_t ThreadMetrics::_internal_numberofdetachedcontexts() const {
  return _impl_.numberofdetachedcontexts_;
}
inline int32_t ThreadMetrics::numberofdetachedcontexts() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.numberOfDetachedContexts)
  return _internal_numberofdetachedcontexts();
}
inline void ThreadMetrics::_internal_set_numberofdetachedcontexts(int32_t value) {
  
  _impl_.numberofdetachedcontexts_ = value;
}
inline void ThreadMetrics::set_numberofdetachedcontexts(int32_t value) {
  _internal_set_numberofdetachedcontexts(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.numberOfDetachedContexts)
}

// int32 gcCount = 16;
inline void ThreadMetrics::clear_gccount() {
  _impl_.gccount_ = 0;
}
inline int32_t ThreadMetrics::_internal_gccount() const {
  return _impl_.gccount_;
}
inline int32_t ThreadMetrics::gccount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.gcCount)
  return _internal_gccount();
}
inline void ThreadMetrics::_internal_set_gccount(int32_t value) {
  
  _impl_.gccount_ = value;
}
inline void ThreadMetrics::set_gccount(int32_t value) {
  _internal_set_gccount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.gcCount)
}

// int32 gcForcedCount = 17;
inline void ThreadMetrics::clear_gcforcedcount() {
  _impl_.gcforcedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_gcforcedcount() const {
  return _impl_.gcforcedcount_;
}
inline int32_t ThreadMetrics::gcforcedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.gcForcedCount)
  return _internal_gcforcedcount();
}
inline void ThreadMetrics::_internal_set_gcforcedcount(int32_t value) {
  
  _impl_.gcforcedcount_ = value;
}
inline void ThreadMetrics::set_gcforcedcount(int32_t value) {
  _internal_set_gcforcedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.gcForcedCount)
}

// int32 gcFullCount = 18;
inline void ThreadMetrics::clear_gcfullcount() {
  _impl_.gcfullcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_gcfullcount() const {
  return _impl_.gcfullcount_;
}
inline int32_t ThreadMetrics::gcfullcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.gcFullCount)
  return _internal_gcfullcount();
}
inline void ThreadMetrics::_internal_set_gcfullcount(int32_t value) {
  
  _impl_.gcfullcount_ = value;
}
inline void ThreadMetrics::set_gcfullcount(int32_t value) {
  _internal_set_gcfullcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.gcFullCount)
}

// int32 gcMajorCount = 19;
inline void ThreadMetrics::clear_gcmajorcount() {
  _impl_.gcmajorcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_gcmajorcount() const {
  return _impl_.gcmajorcount_;
}
inline int32_t ThreadMetrics::gcmajorcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.gcMajorCount)
  return _internal_gcmajorcount();
}
inline void ThreadMetrics::_internal_set_gcmajorcount(int32_t value) {
  
  _impl_.gcmajorcount_ = value;
}
inline void ThreadMetrics::set_gcmajorcount(int32_t value) {
  _internal_set_gcmajorcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.gcMajorCount)
}

// int32 dnsCount = 20;
inline void ThreadMetrics::clear_dnscount() {
  _impl_.dnscount_ = 0;
}
inline int32_t ThreadMetrics::_internal_dnscount() const {
  return _impl_.dnscount_;
}
inline int32_t ThreadMetrics::dnscount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.dnsCount)
  return _internal_dnscount();
}
inline void ThreadMetrics::_internal_set_dnscount(int32_t value) {
  
  _impl_.dnscount_ = value;
}
inline void ThreadMetrics::set_dnscount(int32_t value) {
  _internal_set_dnscount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.dnsCount)
}

// int32 httpClientAbortCount = 21;
inline void ThreadMetrics::clear_httpclientabortcount() {
  _impl_.httpclientabortcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_httpclientabortcount() const {
  return _impl_.httpclientabortcount_;
}
inline int32_t ThreadMetrics::httpclientabortcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpClientAbortCount)
  return _internal_httpclientabortcount();
}
inline void ThreadMetrics::_internal_set_httpclientabortcount(int32_t value) {
  
  _impl_.httpclientabortcount_ = value;
}
inline void ThreadMetrics::set_httpclientabortcount(int32_t value) {
  _internal_set_httpclientabortcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpClientAbortCount)
}

// int32 httpClientCount = 22;
inline void ThreadMetrics::clear_httpclientcount() {
  _impl_.httpclientcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_httpclientcount() const {
  return _impl_.httpclientcount_;
}
inline int32_t ThreadMetrics::httpclientcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpClientCount)
  return _internal_httpclientcount();
}
inline void ThreadMetrics::_internal_set_httpclientcount(int32_t value) {
  
  _impl_.httpclientcount_ = value;
}
inline void ThreadMetrics::set_httpclientcount(int32_t value) {
  _internal_set_httpclientcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpClientCount)
}

// int32 httpServerAbortCount = 23;
inline void ThreadMetrics::clear_httpserverabortcount() {
  _impl_.httpserverabortcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_httpserverabortcount() const {
  return _impl_.httpserverabortcount_;
}
inline int32_t ThreadMetrics::httpserverabortcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpServerAbortCount)
  return _internal_httpserverabortcount();
}
inline void ThreadMetrics::_internal_set_httpserverabortcount(int32_t value) {
  
  _impl_.httpserverabortcount_ = value;
}
inline void ThreadMetrics::set_httpserverabortcount(int32_t value) {
  _internal_set_httpserverabortcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpServerAbortCount)
}

// int32 httpServerCount = 24;
inline void ThreadMetrics::clear_httpservercount() {
  _impl_.httpservercount_ = 0;
}
inline int32_t ThreadMetrics::_internal_httpservercount() const {
  return _impl_.httpservercount_;
}
inline int32_t ThreadMetrics::httpservercount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpServerCount)
  return _internal_httpservercount();
}
inline void ThreadMetrics::_internal_set_httpservercount(int32_t value) {
  
  _impl_.httpservercount_ = value;
}
inline void ThreadMetrics::set_httpservercount(int32_t value) {
  _internal_set_httpservercount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpServerCount)
}

// int64 loopIdleTime = 25;
inline void ThreadMetrics::clear_loopidletime() {
  _impl_.loopidletime_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_loopidletime() const {
  return _impl_.loopidletime_;
}
inline int64_t ThreadMetrics::loopidletime() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopIdleTime)
  return _internal_loopidletime();
}
inline void ThreadMetrics::_internal_set_loopidletime(int64_t value) {
  
  _impl_.loopidletime_ = value;
}
inline void ThreadMetrics::set_loopidletime(int64_t value) {
  _internal_set_loopidletime(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopIdleTime)
}

// int32 loopIterations = 26;
inline void ThreadMetrics::clear_loopiterations() {
  _impl_.loopiterations_ = 0;
}
inline int32_t ThreadMetrics::_internal_loopiterations() const {
  return _impl_.loopiterations_;
}
inline int32_t ThreadMetrics::loopiterations() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopIterations)
  return _internal_loopiterations();
}
inline void ThreadMetrics::_internal_set_loopiterations(int32_t value) {
  
  _impl_.loopiterations_ = value;
}
inline void ThreadMetrics::set_loopiterations(int32_t value) {
  _internal_set_loopiterations(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopIterations)
}

// int32 loopIterWithEvents = 27;
inline void ThreadMetrics::clear_loopiterwithevents() {
  _impl_.loopiterwithevents_ = 0;
}
inline int32_t ThreadMetrics::_internal_loopiterwithevents() const {
  return _impl_.loopiterwithevents_;
}
inline int32_t ThreadMetrics::loopiterwithevents() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopIterWithEvents)
  return _internal_loopiterwithevents();
}
inline void ThreadMetrics::_internal_set_loopiterwithevents(int32_t value) {
  
  _impl_.loopiterwithevents_ = value;
}
inline void ThreadMetrics::set_loopiterwithevents(int32_t value) {
  _internal_set_loopiterwithevents(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopIterWithEvents)
}

// int32 eventsProcessed = 28;
inline void ThreadMetrics::clear_eventsprocessed() {
  _impl_.eventsprocessed_ = 0;
}
inline int32_t ThreadMetrics::_internal_eventsprocessed() const {
  return _impl_.eventsprocessed_;
}
inline int32_t ThreadMetrics::eventsprocessed() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.eventsProcessed)
  return _internal_eventsprocessed();
}
inline void ThreadMetrics::_internal_set_eventsprocessed(int32_t value) {
  
  _impl_.eventsprocessed_ = value;
}
inline void ThreadMetrics::set_eventsprocessed(int32_t value) {
  _internal_set_eventsprocessed(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.eventsProcessed)
}

// int32 eventsWaiting = 29;
inline void ThreadMetrics::clear_eventswaiting() {
  _impl_.eventswaiting_ = 0;
}
inline int32_t ThreadMetrics::_internal_eventswaiting() const {
  return _impl_.eventswaiting_;
}
inline int32_t ThreadMetrics::eventswaiting() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.eventsWaiting)
  return _internal_eventswaiting();
}
inline void ThreadMetrics::_internal_set_eventswaiting(int32_t value) {
  
  _impl_.eventswaiting_ = value;
}
inline void ThreadMetrics::set_eventswaiting(int32_t value) {
  _internal_set_eventswaiting(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.eventsWaiting)
}

// int64 providerDelay = 30;
inline void ThreadMetrics::clear_providerdelay() {
  _impl_.providerdelay_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_providerdelay() const {
  return _impl_.providerdelay_;
}
inline int64_t ThreadMetrics::providerdelay() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.providerDelay)
  return _internal_providerdelay();
}
inline void ThreadMetrics::_internal_set_providerdelay(int64_t value) {
  
  _impl_.providerdelay_ = value;
}
inline void ThreadMetrics::set_providerdelay(int64_t value) {
  _internal_set_providerdelay(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.providerDelay)
}

// int64 processingDelay = 31;
inline void ThreadMetrics::clear_processingdelay() {
  _impl_.processingdelay_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_processingdelay() const {
  return _impl_.processingdelay_;
}
inline int64_t ThreadMetrics::processingdelay() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.processingDelay)
  return _internal_processingdelay();
}
inline void ThreadMetrics::_internal_set_processingdelay(int64_t value) {
  
  _impl_.processingdelay_ = value;
}
inline void ThreadMetrics::set_processingdelay(int64_t value) {
  _internal_set_processingdelay(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.processingDelay)
}

// int32 loopTotalCount = 32;
inline void ThreadMetrics::clear_looptotalcount() {
  _impl_.looptotalcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_looptotalcount() const {
  return _impl_.looptotalcount_;
}
inline int32_t ThreadMetrics::looptotalcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopTotalCount)
  return _internal_looptotalcount();
}
inline void ThreadMetrics::_internal_set_looptotalcount(int32_t value) {
  
  _impl_.looptotalcount_ = value;
}
inline void ThreadMetrics::set_looptotalcount(int32_t value) {
  _internal_set_looptotalcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopTotalCount)
}

// int32 pipeServerCreatedCount = 33;
inline void ThreadMetrics::clear_pipeservercreatedcount() {
  _impl_.pipeservercreatedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_pipeservercreatedcount() const {
  return _impl_.pipeservercreatedcount_;
}
inline int32_t ThreadMetrics::pipeservercreatedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.pipeServerCreatedCount)
  return _internal_pipeservercreatedcount();
}
inline void ThreadMetrics::_internal_set_pipeservercreatedcount(int32_t value) {
  
  _impl_.pipeservercreatedcount_ = value;
}
inline void ThreadMetrics::set_pipeservercreatedcount(int32_t value) {
  _internal_set_pipeservercreatedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.pipeServerCreatedCount)
}

// int32 pipeServerDestroyedCount = 34;
inline void ThreadMetrics::clear_pipeserverdestroyedcount() {
  _impl_.pipeserverdestroyedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_pipeserverdestroyedcount() const {
  return _impl_.pipeserverdestroyedcount_;
}
inline int32_t ThreadMetrics::pipeserverdestroyedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.pipeServerDestroyedCount)
  return _internal_pipeserverdestroyedcount();
}
inline void ThreadMetrics::_internal_set_pipeserverdestroyedcount(int32_t value) {
  
  _impl_.pipeserverdestroyedcount_ = value;
}
inline void ThreadMetrics::set_pipeserverdestroyedcount(int32_t value) {
  _internal_set_pipeserverdestroyedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.pipeServerDestroyedCount)
}

// int32 pipeSocketCreatedCount = 35;
inline void ThreadMetrics::clear_pipesocketcreatedcount() {
  _impl_.pipesocketcreatedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_pipesocketcreatedcount() const {
  return _impl_.pipesocketcreatedcount_;
}
inline int32_t ThreadMetrics::pipesocketcreatedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.pipeSocketCreatedCount)
  return _internal_pipesocketcreatedcount();
}
inline void ThreadMetrics::_internal_set_pipesocketcreatedcount(int32_t value) {
  
  _impl_.pipesocketcreatedcount_ = value;
}
inline void ThreadMetrics::set_pipesocketcreatedcount(int32_t value) {
  _internal_set_pipesocketcreatedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.pipeSocketCreatedCount)
}

// int32 pipeSocketDestroyedCount = 36;
inline void ThreadMetrics::clear_pipesocketdestroyedcount() {
  _impl_.pipesocketdestroyedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_pipesocketdestroyedcount() const {
  return _impl_.pipesocketdestroyedcount_;
}
inline int32_t ThreadMetrics::pipesocketdestroyedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.pipeSocketDestroyedCount)
  return _internal_pipesocketdestroyedcount();
}
inline void ThreadMetrics::_internal_set_pipesocketdestroyedcount(int32_t value) {
  
  _impl_.pipesocketdestroyedcount_ = value;
}
inline void ThreadMetrics::set_pipesocketdestroyedcount(int32_t value) {
  _internal_set_pipesocketdestroyedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.pipeSocketDestroyedCount)
}

// int32 tcpServerCreatedCount = 37;
inline void ThreadMetrics::clear_tcpservercreatedcount() {
  _impl_.tcpservercreatedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_tcpservercreatedcount() const {
  return _impl_.tcpservercreatedcount_;
}
inline int32_t ThreadMetrics::tcpservercreatedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.tcpServerCreatedCount)
  return _internal_tcpservercreatedcount();
}
inline void ThreadMetrics::_internal_set_tcpservercreatedcount(int32_t value) {
  
  _impl_.tcpservercreatedcount_ = value;
}
inline void ThreadMetrics::set_tcpservercreatedcount(int32_t value) {
  _internal_set_tcpservercreatedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.tcpServerCreatedCount)
}

// int32 tcpServerDestroyedCount = 38;
inline void ThreadMetrics::clear_tcpserverdestroyedcount() {
  _impl_.tcpserverdestroyedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_tcpserverdestroyedcount() const {
  return _impl_.tcpserverdestroyedcount_;
}
inline int32_t ThreadMetrics::tcpserverdestroyedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.tcpServerDestroyedCount)
  return _internal_tcpserverdestroyedcount();
}
inline void ThreadMetrics::_internal_set_tcpserverdestroyedcount(int32_t value) {
  
  _impl_.tcpserverdestroyedcount_ = value;
}
inline void ThreadMetrics::set_tcpserverdestroyedcount(int32_t value) {
  _internal_set_tcpserverdestroyedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.tcpServerDestroyedCount)
}

// int32 tcpSocketCreatedCount = 39;
inline void ThreadMetrics::clear_tcpsocketcreatedcount() {
  _impl_.tcpsocketcreatedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_tcpsocketcreatedcount() const {
  return _impl_.tcpsocketcreatedcount_;
}
inline int32_t ThreadMetrics::tcpsocketcreatedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.tcpSocketCreatedCount)
  return _internal_tcpsocketcreatedcount();
}
inline void ThreadMetrics::_internal_set_tcpsocketcreatedcount(int32_t value) {
  
  _impl_.tcpsocketcreatedcount_ = value;
}
inline void ThreadMetrics::set_tcpsocketcreatedcount(int32_t value) {
  _internal_set_tcpsocketcreatedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.tcpSocketCreatedCount)
}

// int32 tcpSocketDestroyedCount = 40;
inline void ThreadMetrics::clear_tcpsocketdestroyedcount() {
  _impl_.tcpsocketdestroyedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_tcpsocketdestroyedcount() const {
  return _impl_.tcpsocketdestroyedcount_;
}
inline int32_t ThreadMetrics::tcpsocketdestroyedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.tcpSocketDestroyedCount)
  return _internal_tcpsocketdestroyedcount();
}
inline void ThreadMetrics::_internal_set_tcpsocketdestroyedcount(int32_t value) {
  
  _impl_.tcpsocketdestroyedcount_ = value;
}
inline void ThreadMetrics::set_tcpsocketdestroyedcount(int32_t value) {
  _internal_set_tcpsocketdestroyedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.tcpSocketDestroyedCount)
}

// int32 udpSocketCreatedCount = 41;
inline void ThreadMetrics::clear_udpsocketcreatedcount() {
  _impl_.udpsocketcreatedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_udpsocketcreatedcount() const {
  return _impl_.udpsocketcreatedcount_;
}
inline int32_t ThreadMetrics::udpsocketcreatedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.udpSocketCreatedCount)
  return _internal_udpsocketcreatedcount();
}
inline void ThreadMetrics::_internal_set_udpsocketcreatedcount(int32_t value) {
  
  _impl_.udpsocketcreatedcount_ = value;
}
inline void ThreadMetrics::set_udpsocketcreatedcount(int32_t value) {
  _internal_set_udpsocketcreatedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.udpSocketCreatedCount)
}

// int32 udpSocketDestroyedCount = 42;
inline void ThreadMetrics::clear_udpsocketdestroyedcount() {
  _impl_.udpsocketdestroyedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_udpsocketdestroyedcount() const {
  return _impl_.udpsocketdestroyedcount_;
}
inline int32_t ThreadMetrics::udpsocketdestroyedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.udpSocketDestroyedCount)
  return _internal_udpsocketdestroyedcount();
}
inline void ThreadMetrics::_internal_set_udpsocketdestroyedcount(int32_t value) {
  
  _impl_.udpsocketdestroyedcount_ = value;
}
inline void ThreadMetrics::set_udpsocketdestroyedcount(int32_t value) {
  _internal_set_udpsocketdestroyedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.udpSocketDestroyedCount)
}

// int32 promiseCreatedCount = 43;
inline void ThreadMetrics::clear_promisecreatedcount() {
  _impl_.promisecreatedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_promisecreatedcount() const {
  return _impl_.promisecreatedcount_;
}
inline int32_t ThreadMetrics::promisecreatedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.promiseCreatedCount)
  return _internal_promisecreatedcount();
}
inline void ThreadMetrics::_internal_set_promisecreatedcount(int32_t value) {
  
  _impl_.promisecreatedcount_ = value;
}
inline void ThreadMetrics::set_promisecreatedcount(int32_t value) {
  _internal_set_promisecreatedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.promiseCreatedCount)
}

// int32 promiseResolvedCount = 44;
inline void ThreadMetrics::clear_promiseresolvedcount() {
  _impl_.promiseresolvedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_promiseresolvedcount() const {
  return _impl_.promiseresolvedcount_;
}
inline int32_t ThreadMetrics::promiseresolvedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.promiseResolvedCount)
  return _internal_promiseresolvedcount();
}
inline void ThreadMetrics::_internal_set_promiseresolvedcount(int32_t value) {
  
  _impl_.promiseresolvedcount_ = value;
}
inline void ThreadMetrics::set_promiseresolvedcount(int32_t value) {
  _internal_set_promiseresolvedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.promiseResolvedCount)
}

// int32 fsHandlesOpenedCount = 45;
inline void ThreadMetrics::clear_fshandlesopenedcount() {
  _impl_.fshandlesopenedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_fshandlesopenedcount() const {
  return _impl_.fshandlesopenedcount_;
}
inline int32_t ThreadMetrics::fshandlesopenedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.fsHandlesOpenedCount)
  return _internal_fshandlesopenedcount();
}
inline void ThreadMetrics::_internal_set_fshandlesopenedcount(int32_t value) {
  
  _impl_.fshandlesopenedcount_ = value;
}
inline void ThreadMetrics::set_fshandlesopenedcount(int32_t value) {
  _internal_set_fshandlesopenedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.fsHandlesOpenedCount)
}

// int32 fsHandlesClosedCount = 46;
inline void ThreadMetrics::clear_fshandlesclosedcount() {
  _impl_.fshandlesclosedcount_ = 0;
}
inline int32_t ThreadMetrics::_internal_fshandlesclosedcount() const {
  return _impl_.fshandlesclosedcount_;
}
inline int32_t ThreadMetrics::fshandlesclosedcount() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.fsHandlesClosedCount)
  return _internal_fshandlesclosedcount();
}
inline void ThreadMetrics::_internal_set_fshandlesclosedcount(int32_t value) {
  
  _impl_.fshandlesclosedcount_ = value;
}
inline void ThreadMetrics::set_fshandlesclosedcount(int32_t value) {
  _internal_set_fshandlesclosedcount(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.fsHandlesClosedCount)
}

// int64 gcDurUs99Ptile = 47;
inline void ThreadMetrics::clear_gcdurus99ptile() {
  _impl_.gcdurus99ptile_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_gcdurus99ptile() const {
  return _impl_.gcdurus99ptile_;
}
inline int64_t ThreadMetrics::gcdurus99ptile() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.gcDurUs99Ptile)
  return _internal_gcdurus99ptile();
}
inline void ThreadMetrics::_internal_set_gcdurus99ptile(int64_t value) {
  
  _impl_.gcdurus99ptile_ = value;
}
inline void ThreadMetrics::set_gcdurus99ptile(int64_t value) {
  _internal_set_gcdurus99ptile(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.gcDurUs99Ptile)
}

// int64 gcDurUsMedian = 48;
inline void ThreadMetrics::clear_gcdurusmedian() {
  _impl_.gcdurusmedian_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_gcdurusmedian() const {
  return _impl_.gcdurusmedian_;
}
inline int64_t ThreadMetrics::gcdurusmedian() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.gcDurUsMedian)
  return _internal_gcdurusmedian();
}
inline void ThreadMetrics::_internal_set_gcdurusmedian(int64_t value) {
  
  _impl_.gcdurusmedian_ = value;
}
inline void ThreadMetrics::set_gcdurusmedian(int64_t value) {
  _internal_set_gcdurusmedian(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.gcDurUsMedian)
}

// int64 dns99Ptile = 49;
inline void ThreadMetrics::clear_dns99ptile() {
  _impl_.dns99ptile_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_dns99ptile() const {
  return _impl_.dns99ptile_;
}
inline int64_t ThreadMetrics::dns99ptile() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.dns99Ptile)
  return _internal_dns99ptile();
}
inline void ThreadMetrics::_internal_set_dns99ptile(int64_t value) {
  
  _impl_.dns99ptile_ = value;
}
inline void ThreadMetrics::set_dns99ptile(int64_t value) {
  _internal_set_dns99ptile(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.dns99Ptile)
}

// int64 dnsMedian = 50;
inline void ThreadMetrics::clear_dnsmedian() {
  _impl_.dnsmedian_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_dnsmedian() const {
  return _impl_.dnsmedian_;
}
inline int64_t ThreadMetrics::dnsmedian() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.dnsMedian)
  return _internal_dnsmedian();
}
inline void ThreadMetrics::_internal_set_dnsmedian(int64_t value) {
  
  _impl_.dnsmedian_ = value;
}
inline void ThreadMetrics::set_dnsmedian(int64_t value) {
  _internal_set_dnsmedian(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.dnsMedian)
}

// int64 httpClient99Ptile = 51;
inline void ThreadMetrics::clear_httpclient99ptile() {
  _impl_.httpclient99ptile_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_httpclient99ptile() const {
  return _impl_.httpclient99ptile_;
}
inline int64_t ThreadMetrics::httpclient99ptile() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpClient99Ptile)
  return _internal_httpclient99ptile();
}
inline void ThreadMetrics::_internal_set_httpclient99ptile(int64_t value) {
  
  _impl_.httpclient99ptile_ = value;
}
inline void ThreadMetrics::set_httpclient99ptile(int64_t value) {
  _internal_set_httpclient99ptile(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpClient99Ptile)
}

// int64 httpClientMedian = 52;
inline void ThreadMetrics::clear_httpclientmedian() {
  _impl_.httpclientmedian_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_httpclientmedian() const {
  return _impl_.httpclientmedian_;
}
inline int64_t ThreadMetrics::httpclientmedian() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpClientMedian)
  return _internal_httpclientmedian();
}
inline void ThreadMetrics::_internal_set_httpclientmedian(int64_t value) {
  
  _impl_.httpclientmedian_ = value;
}
inline void ThreadMetrics::set_httpclientmedian(int64_t value) {
  _internal_set_httpclientmedian(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpClientMedian)
}

// int64 httpServer99Ptile = 53;
inline void ThreadMetrics::clear_httpserver99ptile() {
  _impl_.httpserver99ptile_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_httpserver99ptile() const {
  return _impl_.httpserver99ptile_;
}
inline int64_t ThreadMetrics::httpserver99ptile() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpServer99Ptile)
  return _internal_httpserver99ptile();
}
inline void ThreadMetrics::_internal_set_httpserver99ptile(int64_t value) {
  
  _impl_.httpserver99ptile_ = value;
}
inline void ThreadMetrics::set_httpserver99ptile(int64_t value) {
  _internal_set_httpserver99ptile(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpServer99Ptile)
}

// int64 httpServerMedian = 54;
inline void ThreadMetrics::clear_httpservermedian() {
  _impl_.httpservermedian_ = int64_t{0};
}
inline int64_t ThreadMetrics::_internal_httpservermedian() const {
  return _impl_.httpservermedian_;
}
inline int64_t ThreadMetrics::httpservermedian() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.httpServerMedian)
  return _internal_httpservermedian();
}
inline void ThreadMetrics::_internal_set_httpservermedian(int64_t value) {
  
  _impl_.httpservermedian_ = value;
}
inline void ThreadMetrics::set_httpservermedian(int64_t value) {
  _internal_set_httpservermedian(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.httpServerMedian)
}

// double loopUtilization = 55;
inline void ThreadMetrics::clear_looputilization() {
  _impl_.looputilization_ = 0;
}
inline double ThreadMetrics::_internal_looputilization() const {
  return _impl_.looputilization_;
}
inline double ThreadMetrics::looputilization() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopUtilization)
  return _internal_looputilization();
}
inline void ThreadMetrics::_internal_set_looputilization(double value) {
  
  _impl_.looputilization_ = value;
}
inline void ThreadMetrics::set_looputilization(double value) {
  _internal_set_looputilization(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopUtilization)
}

// double res5s = 56;
inline void ThreadMetrics::clear_res5s() {
  _impl_.res5s_ = 0;
}
inline double ThreadMetrics::_internal_res5s() const {
  return _impl_.res5s_;
}
inline double ThreadMetrics::res5s() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.res5s)
  return _internal_res5s();
}
inline void ThreadMetrics::_internal_set_res5s(double value) {
  
  _impl_.res5s_ = value;
}
inline void ThreadMetrics::set_res5s(double value) {
  _internal_set_res5s(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.res5s)
}

// double res1m = 57;
inline void ThreadMetrics::clear_res1m() {
  _impl_.res1m_ = 0;
}
inline double ThreadMetrics::_internal_res1m() const {
  return _impl_.res1m_;
}
inline double ThreadMetrics::res1m() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.res1m)
  return _internal_res1m();
}
inline void ThreadMetrics::_internal_set_res1m(double value) {
  
  _impl_.res1m_ = value;
}
inline void ThreadMetrics::set_res1m(double value) {
  _internal_set_res1m(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.res1m)
}

// double res5m = 58;
inline void ThreadMetrics::clear_res5m() {
  _impl_.res5m_ = 0;
}
inline double ThreadMetrics::_internal_res5m() const {
  return _impl_.res5m_;
}
inline double ThreadMetrics::res5m() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.res5m)
  return _internal_res5m();
}
inline void ThreadMetrics::_internal_set_res5m(double value) {
  
  _impl_.res5m_ = value;
}
inline void ThreadMetrics::set_res5m(double value) {
  _internal_set_res5m(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.res5m)
}

// double res15m = 59;
inline void ThreadMetrics::clear_res15m() {
  _impl_.res15m_ = 0;
}
inline double ThreadMetrics::_internal_res15m() const {
  return _impl_.res15m_;
}
inline double ThreadMetrics::res15m() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.res15m)
  return _internal_res15m();
}
inline void ThreadMetrics::_internal_set_res15m(double value) {
  
  _impl_.res15m_ = value;
}
inline void ThreadMetrics::set_res15m(double value) {
  _internal_set_res15m(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.res15m)
}

// int32 loopAvgTasks = 60;
inline void ThreadMetrics::clear_loopavgtasks() {
  _impl_.loopavgtasks_ = 0;
}
inline int32_t ThreadMetrics::_internal_loopavgtasks() const {
  return _impl_.loopavgtasks_;
}
inline int32_t ThreadMetrics::loopavgtasks() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopAvgTasks)
  return _internal_loopavgtasks();
}
inline void ThreadMetrics::_internal_set_loopavgtasks(int32_t value) {
  
  _impl_.loopavgtasks_ = value;
}
inline void ThreadMetrics::set_loopavgtasks(int32_t value) {
  _internal_set_loopavgtasks(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopAvgTasks)
}

// double loopEstimatedLag = 61;
inline void ThreadMetrics::clear_loopestimatedlag() {
  _impl_.loopestimatedlag_ = 0;
}
inline double ThreadMetrics::_internal_loopestimatedlag() const {
  return _impl_.loopestimatedlag_;
}
inline double ThreadMetrics::loopestimatedlag() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopEstimatedLag)
  return _internal_loopestimatedlag();
}
inline void ThreadMetrics::_internal_set_loopestimatedlag(double value) {
  
  _impl_.loopestimatedlag_ = value;
}
inline void ThreadMetrics::set_loopestimatedlag(double value) {
  _internal_set_loopestimatedlag(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopEstimatedLag)
}

// double loopIdlePercent = 62;
inline void ThreadMetrics::clear_loopidlepercent() {
  _impl_.loopidlepercent_ = 0;
}
inline double ThreadMetrics::_internal_loopidlepercent() const {
  return _impl_.loopidlepercent_;
}
inline double ThreadMetrics::loopidlepercent() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.loopIdlePercent)
  return _internal_loopidlepercent();
}
inline void ThreadMetrics::_internal_set_loopidlepercent(double value) {
  
  _impl_.loopidlepercent_ = value;
}
inline void ThreadMetrics::set_loopidlepercent(double value) {
  _internal_set_loopidlepercent(value);
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.loopIdlePercent)
}

// string threadName = 63;
inline void ThreadMetrics::clear_threadname() {
  _impl_.threadname_.ClearToEmpty();
}
inline const std::string& ThreadMetrics::threadname() const {
  // @@protoc_insertion_point(field_get:grpcagent.ThreadMetrics.threadName)
  return _internal_threadname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThreadMetrics::set_threadname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threadname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.ThreadMetrics.threadName)
}
inline std::string* ThreadMetrics::mutable_threadname() {
  std::string* _s = _internal_mutable_threadname();
  // @@protoc_insertion_point(field_mutable:grpcagent.ThreadMetrics.threadName)
  return _s;
}
inline const std::string& ThreadMetrics::_internal_threadname() const {
  return _impl_.threadname_.Get();
}
inline void ThreadMetrics::_internal_set_threadname(const std::string& value) {
  
  _impl_.threadname_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadMetrics::_internal_mutable_threadname() {
  
  return _impl_.threadname_.Mutable(GetArenaForAllocation());
}
inline std::string* ThreadMetrics::release_threadname() {
  // @@protoc_insertion_point(field_release:grpcagent.ThreadMetrics.threadName)
  return _impl_.threadname_.Release();
}
inline void ThreadMetrics::set_allocated_threadname(std::string* threadname) {
  if (threadname != nullptr) {
    
  } else {
    
  }
  _impl_.threadname_.SetAllocated(threadname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threadname_.IsDefault()) {
    _impl_.threadname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ThreadMetrics.threadName)
}

// -------------------------------------------------------------------

// MetricsBody

// .grpcagent.ProcessMetrics processMetrics = 1;
inline bool MetricsBody::_internal_has_processmetrics() const {
  return this != internal_default_instance() && _impl_.processmetrics_ != nullptr;
}
inline bool MetricsBody::has_processmetrics() const {
  return _internal_has_processmetrics();
}
inline void MetricsBody::clear_processmetrics() {
  if (GetArenaForAllocation() == nullptr && _impl_.processmetrics_ != nullptr) {
    delete _impl_.processmetrics_;
  }
  _impl_.processmetrics_ = nullptr;
}
inline const ::grpcagent::ProcessMetrics& MetricsBody::_internal_processmetrics() const {
  const ::grpcagent::ProcessMetrics* p = _impl_.processmetrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::ProcessMetrics&>(
      ::grpcagent::_ProcessMetrics_default_instance_);
}
inline const ::grpcagent::ProcessMetrics& MetricsBody::processmetrics() const {
  // @@protoc_insertion_point(field_get:grpcagent.MetricsBody.processMetrics)
  return _internal_processmetrics();
}
inline void MetricsBody::unsafe_arena_set_allocated_processmetrics(
    ::grpcagent::ProcessMetrics* processmetrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processmetrics_);
  }
  _impl_.processmetrics_ = processmetrics;
  if (processmetrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.MetricsBody.processMetrics)
}
inline ::grpcagent::ProcessMetrics* MetricsBody::release_processmetrics() {
  
  ::grpcagent::ProcessMetrics* temp = _impl_.processmetrics_;
  _impl_.processmetrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::ProcessMetrics* MetricsBody::unsafe_arena_release_processmetrics() {
  // @@protoc_insertion_point(field_release:grpcagent.MetricsBody.processMetrics)
  
  ::grpcagent::ProcessMetrics* temp = _impl_.processmetrics_;
  _impl_.processmetrics_ = nullptr;
  return temp;
}
inline ::grpcagent::ProcessMetrics* MetricsBody::_internal_mutable_processmetrics() {
  
  if (_impl_.processmetrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::ProcessMetrics>(GetArenaForAllocation());
    _impl_.processmetrics_ = p;
  }
  return _impl_.processmetrics_;
}
inline ::grpcagent::ProcessMetrics* MetricsBody::mutable_processmetrics() {
  ::grpcagent::ProcessMetrics* _msg = _internal_mutable_processmetrics();
  // @@protoc_insertion_point(field_mutable:grpcagent.MetricsBody.processMetrics)
  return _msg;
}
inline void MetricsBody::set_allocated_processmetrics(::grpcagent::ProcessMetrics* processmetrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.processmetrics_;
  }
  if (processmetrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(processmetrics);
    if (message_arena != submessage_arena) {
      processmetrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processmetrics, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.processmetrics_ = processmetrics;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.MetricsBody.processMetrics)
}

// repeated .grpcagent.ThreadMetrics threadMetrics = 2;
inline int MetricsBody::_internal_threadmetrics_size() const {
  return _impl_.threadmetrics_.size();
}
inline int MetricsBody::threadmetrics_size() const {
  return _internal_threadmetrics_size();
}
inline void MetricsBody::clear_threadmetrics() {
  _impl_.threadmetrics_.Clear();
}
inline ::grpcagent::ThreadMetrics* MetricsBody::mutable_threadmetrics(int index) {
  // @@protoc_insertion_point(field_mutable:grpcagent.MetricsBody.threadMetrics)
  return _impl_.threadmetrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::ThreadMetrics >*
MetricsBody::mutable_threadmetrics() {
  // @@protoc_insertion_point(field_mutable_list:grpcagent.MetricsBody.threadMetrics)
  return &_impl_.threadmetrics_;
}
inline const ::grpcagent::ThreadMetrics& MetricsBody::_internal_threadmetrics(int index) const {
  return _impl_.threadmetrics_.Get(index);
}
inline const ::grpcagent::ThreadMetrics& MetricsBody::threadmetrics(int index) const {
  // @@protoc_insertion_point(field_get:grpcagent.MetricsBody.threadMetrics)
  return _internal_threadmetrics(index);
}
inline ::grpcagent::ThreadMetrics* MetricsBody::_internal_add_threadmetrics() {
  return _impl_.threadmetrics_.Add();
}
inline ::grpcagent::ThreadMetrics* MetricsBody::add_threadmetrics() {
  ::grpcagent::ThreadMetrics* _add = _internal_add_threadmetrics();
  // @@protoc_insertion_point(field_add:grpcagent.MetricsBody.threadMetrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpcagent::ThreadMetrics >&
MetricsBody::threadmetrics() const {
  // @@protoc_insertion_point(field_list:grpcagent.MetricsBody.threadMetrics)
  return _impl_.threadmetrics_;
}

// -------------------------------------------------------------------

// Metrics

// .grpcagent.CommonResponse common = 1;
inline bool Metrics::_internal_has_common() const {
  return this != internal_default_instance() && _impl_.common_ != nullptr;
}
inline bool Metrics::has_common() const {
  return _internal_has_common();
}
inline const ::grpcagent::CommonResponse& Metrics::_internal_common() const {
  const ::grpcagent::CommonResponse* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::CommonResponse&>(
      ::grpcagent::_CommonResponse_default_instance_);
}
inline const ::grpcagent::CommonResponse& Metrics::common() const {
  // @@protoc_insertion_point(field_get:grpcagent.Metrics.common)
  return _internal_common();
}
inline void Metrics::unsafe_arena_set_allocated_common(
    ::grpcagent::CommonResponse* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.Metrics.common)
}
inline ::grpcagent::CommonResponse* Metrics::release_common() {
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::CommonResponse* Metrics::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:grpcagent.Metrics.common)
  
  ::grpcagent::CommonResponse* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::grpcagent::CommonResponse* Metrics::_internal_mutable_common() {
  
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::CommonResponse>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::grpcagent::CommonResponse* Metrics::mutable_common() {
  ::grpcagent::CommonResponse* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:grpcagent.Metrics.common)
  return _msg;
}
inline void Metrics::set_allocated_common(::grpcagent::CommonResponse* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common));
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Metrics.common)
}

// .grpcagent.MetricsBody body = 2;
inline bool Metrics::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool Metrics::has_body() const {
  return _internal_has_body();
}
inline void Metrics::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::grpcagent::MetricsBody& Metrics::_internal_body() const {
  const ::grpcagent::MetricsBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpcagent::MetricsBody&>(
      ::grpcagent::_MetricsBody_default_instance_);
}
inline const ::grpcagent::MetricsBody& Metrics::body() const {
  // @@protoc_insertion_point(field_get:grpcagent.Metrics.body)
  return _internal_body();
}
inline void Metrics::unsafe_arena_set_allocated_body(
    ::grpcagent::MetricsBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.Metrics.body)
}
inline ::grpcagent::MetricsBody* Metrics::release_body() {
  
  ::grpcagent::MetricsBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpcagent::MetricsBody* Metrics::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:grpcagent.Metrics.body)
  
  ::grpcagent::MetricsBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::grpcagent::MetricsBody* Metrics::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpcagent::MetricsBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::grpcagent::MetricsBody* Metrics::mutable_body() {
  ::grpcagent::MetricsBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:grpcagent.Metrics.body)
  return _msg;
}
inline void Metrics::set_allocated_body(::grpcagent::MetricsBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.Metrics.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
