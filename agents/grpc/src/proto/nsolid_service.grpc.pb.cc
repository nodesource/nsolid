// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nsolid_service.proto

#include "nsolid_service.pb.h"
#include "nsolid_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace grpcagent {

static const char* NSolidService_method_names[] = {
  "/grpcagent.NSolidService/Command",
  "/grpcagent.NSolidService/ExportAsset",
  "/grpcagent.NSolidService/ExportInfo",
  "/grpcagent.NSolidService/ExportPackages",
  "/grpcagent.NSolidService/ExportBlockedLoop",
  "/grpcagent.NSolidService/ExportUnblockedLoop",
  "/grpcagent.NSolidService/ExportReconfigure",
};

std::unique_ptr< NSolidService::Stub> NSolidService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NSolidService::Stub> stub(new NSolidService::Stub(channel, options));
  return stub;
}

NSolidService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Command_(NSolidService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ExportAsset_(NSolidService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ExportInfo_(NSolidService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportPackages_(NSolidService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportBlockedLoop_(NSolidService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportUnblockedLoop_(NSolidService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportReconfigure_(NSolidService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* NSolidService::Stub::CommandRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>::Create(channel_.get(), rpcmethod_Command_, context);
}

void NSolidService::Stub::async::Command(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpcagent::CommandResponse,::grpcagent::CommandRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::grpcagent::CommandResponse,::grpcagent::CommandRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Command_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* NSolidService::Stub::AsyncCommandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>::Create(channel_.get(), cq, rpcmethod_Command_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* NSolidService::Stub::PrepareAsyncCommandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>::Create(channel_.get(), cq, rpcmethod_Command_, context, false, nullptr);
}

::grpc::ClientWriter< ::grpcagent::Asset>* NSolidService::Stub::ExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::grpcagent::Asset>::Create(channel_.get(), rpcmethod_ExportAsset_, context, response);
}

void NSolidService::Stub::async::ExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::ClientWriteReactor< ::grpcagent::Asset>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::grpcagent::Asset>::Create(stub_->channel_.get(), stub_->rpcmethod_ExportAsset_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::grpcagent::Asset>* NSolidService::Stub::AsyncExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::grpcagent::Asset>::Create(channel_.get(), cq, rpcmethod_ExportAsset_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::grpcagent::Asset>* NSolidService::Stub::PrepareAsyncExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::grpcagent::Asset>::Create(channel_.get(), cq, rpcmethod_ExportAsset_, context, response, false, nullptr);
}

::grpc::Status NSolidService::Stub::ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpcagent::EventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcagent::InfoEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportInfo_, context, request, response);
}

void NSolidService::Stub::async::ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcagent::InfoEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportInfo_, context, request, response, std::move(f));
}

void NSolidService::Stub::async::ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::PrepareAsyncExportInfoRaw(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcagent::EventResponse, ::grpcagent::InfoEvent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::AsyncExportInfoRaw(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSolidService::Stub::ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpcagent::EventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcagent::PackagesEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportPackages_, context, request, response);
}

void NSolidService::Stub::async::ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcagent::PackagesEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportPackages_, context, request, response, std::move(f));
}

void NSolidService::Stub::async::ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportPackages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::PrepareAsyncExportPackagesRaw(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcagent::EventResponse, ::grpcagent::PackagesEvent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportPackages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::AsyncExportPackagesRaw(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportPackagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSolidService::Stub::ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpcagent::EventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportBlockedLoop_, context, request, response);
}

void NSolidService::Stub::async::ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportBlockedLoop_, context, request, response, std::move(f));
}

void NSolidService::Stub::async::ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportBlockedLoop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::PrepareAsyncExportBlockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcagent::EventResponse, ::grpcagent::BlockedLoopEvent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportBlockedLoop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::AsyncExportBlockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportBlockedLoopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSolidService::Stub::ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpcagent::EventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportUnblockedLoop_, context, request, response);
}

void NSolidService::Stub::async::ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportUnblockedLoop_, context, request, response, std::move(f));
}

void NSolidService::Stub::async::ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportUnblockedLoop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::PrepareAsyncExportUnblockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcagent::EventResponse, ::grpcagent::UnblockedLoopEvent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportUnblockedLoop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::AsyncExportUnblockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportUnblockedLoopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSolidService::Stub::ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpcagent::EventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportReconfigure_, context, request, response);
}

void NSolidService::Stub::async::ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportReconfigure_, context, request, response, std::move(f));
}

void NSolidService::Stub::async::ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportReconfigure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::PrepareAsyncExportReconfigureRaw(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcagent::EventResponse, ::grpcagent::ReconfigureEvent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportReconfigure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* NSolidService::Stub::AsyncExportReconfigureRaw(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportReconfigureRaw(context, request, cq);
  result->StartCall();
  return result;
}

NSolidService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NSolidService::Service, ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::grpcagent::CommandRequest,
             ::grpcagent::CommandResponse>* stream) {
               return service->Command(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< NSolidService::Service, ::grpcagent::Asset, ::grpcagent::EventResponse>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::grpcagent::Asset>* reader,
             ::grpcagent::EventResponse* resp) {
               return service->ExportAsset(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSolidService::Service, ::grpcagent::InfoEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcagent::InfoEvent* req,
             ::grpcagent::EventResponse* resp) {
               return service->ExportInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSolidService::Service, ::grpcagent::PackagesEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcagent::PackagesEvent* req,
             ::grpcagent::EventResponse* resp) {
               return service->ExportPackages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSolidService::Service, ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcagent::BlockedLoopEvent* req,
             ::grpcagent::EventResponse* resp) {
               return service->ExportBlockedLoop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSolidService::Service, ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcagent::UnblockedLoopEvent* req,
             ::grpcagent::EventResponse* resp) {
               return service->ExportUnblockedLoop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSolidService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSolidService::Service, ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSolidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcagent::ReconfigureEvent* req,
             ::grpcagent::EventResponse* resp) {
               return service->ExportReconfigure(ctx, req, resp);
             }, this)));
}

NSolidService::Service::~Service() {
}

::grpc::Status NSolidService::Service::Command(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::ExportAsset(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpcagent::Asset>* reader, ::grpcagent::EventResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::ExportInfo(::grpc::ServerContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::ExportPackages(::grpc::ServerContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::ExportBlockedLoop(::grpc::ServerContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::ExportUnblockedLoop(::grpc::ServerContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSolidService::Service::ExportReconfigure(::grpc::ServerContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcagent

