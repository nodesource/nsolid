// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nsolid_service.proto
#ifndef GRPC_nsolid_5fservice_2eproto__INCLUDED
#define GRPC_nsolid_5fservice_2eproto__INCLUDED

#include "nsolid_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace grpcagent {

class NSolidService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcagent.NSolidService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>> Command(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>>(CommandRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>> AsyncCommand(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>>(AsyncCommandRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>> PrepareAsyncCommand(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>>(PrepareAsyncCommandRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::grpcagent::Asset>> ExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::grpcagent::Asset>>(ExportAssetRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Asset>> AsyncExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Asset>>(AsyncExportAssetRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Asset>> PrepareAsyncExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcagent::Asset>>(PrepareAsyncExportAssetRaw(context, response, cq));
    }
    virtual ::grpc::Status ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpcagent::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> AsyncExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(AsyncExportInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> PrepareAsyncExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(PrepareAsyncExportInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpcagent::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> AsyncExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(AsyncExportPackagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> PrepareAsyncExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(PrepareAsyncExportPackagesRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpcagent::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> AsyncExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(AsyncExportBlockedLoopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> PrepareAsyncExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(PrepareAsyncExportBlockedLoopRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpcagent::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> AsyncExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(AsyncExportUnblockedLoopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> PrepareAsyncExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(PrepareAsyncExportUnblockedLoopRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpcagent::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> AsyncExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(AsyncExportReconfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>> PrepareAsyncExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>>(PrepareAsyncExportReconfigureRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Command(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpcagent::CommandResponse,::grpcagent::CommandRequest>* reactor) = 0;
      virtual void ExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::ClientWriteReactor< ::grpcagent::Asset>* reactor) = 0;
      virtual void ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* CommandRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* AsyncCommandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* PrepareAsyncCommandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::grpcagent::Asset>* ExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpcagent::Asset>* AsyncExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpcagent::Asset>* PrepareAsyncExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* AsyncExportInfoRaw(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* PrepareAsyncExportInfoRaw(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* AsyncExportPackagesRaw(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* PrepareAsyncExportPackagesRaw(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* AsyncExportBlockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* PrepareAsyncExportBlockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* AsyncExportUnblockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* PrepareAsyncExportUnblockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* AsyncExportReconfigureRaw(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcagent::EventResponse>* PrepareAsyncExportReconfigureRaw(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>> Command(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>>(CommandRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>> AsyncCommand(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>>(AsyncCommandRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>> PrepareAsyncCommand(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>>(PrepareAsyncCommandRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::grpcagent::Asset>> ExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::grpcagent::Asset>>(ExportAssetRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Asset>> AsyncExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Asset>>(AsyncExportAssetRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Asset>> PrepareAsyncExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcagent::Asset>>(PrepareAsyncExportAssetRaw(context, response, cq));
    }
    ::grpc::Status ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpcagent::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> AsyncExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(AsyncExportInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> PrepareAsyncExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(PrepareAsyncExportInfoRaw(context, request, cq));
    }
    ::grpc::Status ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpcagent::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> AsyncExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(AsyncExportPackagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> PrepareAsyncExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(PrepareAsyncExportPackagesRaw(context, request, cq));
    }
    ::grpc::Status ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpcagent::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> AsyncExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(AsyncExportBlockedLoopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> PrepareAsyncExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(PrepareAsyncExportBlockedLoopRaw(context, request, cq));
    }
    ::grpc::Status ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpcagent::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> AsyncExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(AsyncExportUnblockedLoopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> PrepareAsyncExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(PrepareAsyncExportUnblockedLoopRaw(context, request, cq));
    }
    ::grpc::Status ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpcagent::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> AsyncExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(AsyncExportReconfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>> PrepareAsyncExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>>(PrepareAsyncExportReconfigureRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Command(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpcagent::CommandResponse,::grpcagent::CommandRequest>* reactor) override;
      void ExportAsset(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::ClientWriteReactor< ::grpcagent::Asset>* reactor) override;
      void ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportInfo(::grpc::ClientContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportPackages(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportBlockedLoop(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportUnblockedLoop(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportReconfigure(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* CommandRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* AsyncCommandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* PrepareAsyncCommandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::grpcagent::Asset>* ExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response) override;
    ::grpc::ClientAsyncWriter< ::grpcagent::Asset>* AsyncExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::grpcagent::Asset>* PrepareAsyncExportAssetRaw(::grpc::ClientContext* context, ::grpcagent::EventResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* AsyncExportInfoRaw(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* PrepareAsyncExportInfoRaw(::grpc::ClientContext* context, const ::grpcagent::InfoEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* AsyncExportPackagesRaw(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* PrepareAsyncExportPackagesRaw(::grpc::ClientContext* context, const ::grpcagent::PackagesEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* AsyncExportBlockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* PrepareAsyncExportBlockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::BlockedLoopEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* AsyncExportUnblockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* PrepareAsyncExportUnblockedLoopRaw(::grpc::ClientContext* context, const ::grpcagent::UnblockedLoopEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* AsyncExportReconfigureRaw(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcagent::EventResponse>* PrepareAsyncExportReconfigureRaw(::grpc::ClientContext* context, const ::grpcagent::ReconfigureEvent& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Command_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportPackages_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportBlockedLoop_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportUnblockedLoop_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportReconfigure_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Command(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* stream);
    virtual ::grpc::Status ExportAsset(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpcagent::Asset>* reader, ::grpcagent::EventResponse* response);
    virtual ::grpc::Status ExportInfo(::grpc::ServerContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response);
    virtual ::grpc::Status ExportPackages(::grpc::ServerContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response);
    virtual ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response);
    virtual ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response);
    virtual ::grpc::Status ExportReconfigure(::grpc::ServerContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Command() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportAsset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExportAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAsset(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Asset>* /*reader*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportAsset(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpcagent::EventResponse, ::grpcagent::Asset>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExportInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportInfo(::grpc::ServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportInfo(::grpc::ServerContext* context, ::grpcagent::InfoEvent* request, ::grpc::ServerAsyncResponseWriter< ::grpcagent::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportPackages() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ExportPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPackages(::grpc::ServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportPackages(::grpc::ServerContext* context, ::grpcagent::PackagesEvent* request, ::grpc::ServerAsyncResponseWriter< ::grpcagent::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportBlockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportBlockedLoop() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExportBlockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportBlockedLoop(::grpc::ServerContext* context, ::grpcagent::BlockedLoopEvent* request, ::grpc::ServerAsyncResponseWriter< ::grpcagent::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportUnblockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportUnblockedLoop() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ExportUnblockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportUnblockedLoop(::grpc::ServerContext* context, ::grpcagent::UnblockedLoopEvent* request, ::grpc::ServerAsyncResponseWriter< ::grpcagent::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportReconfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportReconfigure() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ExportReconfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReconfigure(::grpc::ServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportReconfigure(::grpc::ServerContext* context, ::grpcagent::ReconfigureEvent* request, ::grpc::ServerAsyncResponseWriter< ::grpcagent::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Command<WithAsyncMethod_ExportAsset<WithAsyncMethod_ExportInfo<WithAsyncMethod_ExportPackages<WithAsyncMethod_ExportBlockedLoop<WithAsyncMethod_ExportUnblockedLoop<WithAsyncMethod_ExportReconfigure<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Command() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Command(context); }));
    }
    ~WithCallbackMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpcagent::CommandResponse, ::grpcagent::CommandRequest>* Command(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportAsset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpcagent::Asset, ::grpcagent::EventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpcagent::EventResponse* response) { return this->ExportAsset(context, response); }));
    }
    ~WithCallbackMethod_ExportAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAsset(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Asset>* /*reader*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpcagent::Asset>* ExportAsset(
      ::grpc::CallbackServerContext* /*context*/, ::grpcagent::EventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcagent::InfoEvent, ::grpcagent::EventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcagent::InfoEvent* request, ::grpcagent::EventResponse* response) { return this->ExportInfo(context, request, response); }));}
    void SetMessageAllocatorFor_ExportInfo(
        ::grpc::MessageAllocator< ::grpcagent::InfoEvent, ::grpcagent::EventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcagent::InfoEvent, ::grpcagent::EventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportInfo(::grpc::ServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportPackages() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcagent::PackagesEvent, ::grpcagent::EventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcagent::PackagesEvent* request, ::grpcagent::EventResponse* response) { return this->ExportPackages(context, request, response); }));}
    void SetMessageAllocatorFor_ExportPackages(
        ::grpc::MessageAllocator< ::grpcagent::PackagesEvent, ::grpcagent::EventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcagent::PackagesEvent, ::grpcagent::EventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPackages(::grpc::ServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportPackages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportBlockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportBlockedLoop() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcagent::BlockedLoopEvent* request, ::grpcagent::EventResponse* response) { return this->ExportBlockedLoop(context, request, response); }));}
    void SetMessageAllocatorFor_ExportBlockedLoop(
        ::grpc::MessageAllocator< ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportBlockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportBlockedLoop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportUnblockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportUnblockedLoop() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcagent::UnblockedLoopEvent* request, ::grpcagent::EventResponse* response) { return this->ExportUnblockedLoop(context, request, response); }));}
    void SetMessageAllocatorFor_ExportUnblockedLoop(
        ::grpc::MessageAllocator< ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportUnblockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportUnblockedLoop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportReconfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportReconfigure() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcagent::ReconfigureEvent* request, ::grpcagent::EventResponse* response) { return this->ExportReconfigure(context, request, response); }));}
    void SetMessageAllocatorFor_ExportReconfigure(
        ::grpc::MessageAllocator< ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportReconfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReconfigure(::grpc::ServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportReconfigure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Command<WithCallbackMethod_ExportAsset<WithCallbackMethod_ExportInfo<WithCallbackMethod_ExportPackages<WithCallbackMethod_ExportBlockedLoop<WithCallbackMethod_ExportUnblockedLoop<WithCallbackMethod_ExportReconfigure<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Command() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportAsset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExportAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAsset(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Asset>* /*reader*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExportInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportInfo(::grpc::ServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportPackages() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ExportPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPackages(::grpc::ServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportBlockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportBlockedLoop() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExportBlockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportUnblockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportUnblockedLoop() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ExportUnblockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportReconfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportReconfigure() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ExportReconfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReconfigure(::grpc::ServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Command() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportAsset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExportAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAsset(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Asset>* /*reader*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportAsset(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExportInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportInfo(::grpc::ServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportPackages() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ExportPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPackages(::grpc::ServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportPackages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportBlockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportBlockedLoop() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ExportBlockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportBlockedLoop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportUnblockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportUnblockedLoop() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ExportUnblockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportUnblockedLoop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportReconfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportReconfigure() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ExportReconfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReconfigure(::grpc::ServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportReconfigure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Command() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Command(context); }));
    }
    ~WithRawCallbackMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpcagent::CommandRequest, ::grpcagent::CommandResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Command(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportAsset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ExportAsset(context, response); }));
    }
    ~WithRawCallbackMethod_ExportAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAsset(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::grpcagent::Asset>* /*reader*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ExportAsset(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportInfo(::grpc::ServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportPackages() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportPackages(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPackages(::grpc::ServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportPackages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportBlockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportBlockedLoop() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportBlockedLoop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportBlockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportBlockedLoop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportUnblockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportUnblockedLoop() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportUnblockedLoop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportUnblockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportUnblockedLoop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportReconfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportReconfigure() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportReconfigure(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportReconfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReconfigure(::grpc::ServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportReconfigure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcagent::InfoEvent, ::grpcagent::EventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcagent::InfoEvent, ::grpcagent::EventResponse>* streamer) {
                       return this->StreamedExportInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportInfo(::grpc::ServerContext* /*context*/, const ::grpcagent::InfoEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcagent::InfoEvent,::grpcagent::EventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportPackages() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcagent::PackagesEvent, ::grpcagent::EventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcagent::PackagesEvent, ::grpcagent::EventResponse>* streamer) {
                       return this->StreamedExportPackages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportPackages(::grpc::ServerContext* /*context*/, const ::grpcagent::PackagesEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportPackages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcagent::PackagesEvent,::grpcagent::EventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportBlockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportBlockedLoop() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcagent::BlockedLoopEvent, ::grpcagent::EventResponse>* streamer) {
                       return this->StreamedExportBlockedLoop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportBlockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportBlockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::BlockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportBlockedLoop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcagent::BlockedLoopEvent,::grpcagent::EventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportUnblockedLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportUnblockedLoop() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcagent::UnblockedLoopEvent, ::grpcagent::EventResponse>* streamer) {
                       return this->StreamedExportUnblockedLoop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportUnblockedLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportUnblockedLoop(::grpc::ServerContext* /*context*/, const ::grpcagent::UnblockedLoopEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportUnblockedLoop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcagent::UnblockedLoopEvent,::grpcagent::EventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportReconfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportReconfigure() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcagent::ReconfigureEvent, ::grpcagent::EventResponse>* streamer) {
                       return this->StreamedExportReconfigure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportReconfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportReconfigure(::grpc::ServerContext* /*context*/, const ::grpcagent::ReconfigureEvent* /*request*/, ::grpcagent::EventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportReconfigure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcagent::ReconfigureEvent,::grpcagent::EventResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExportInfo<WithStreamedUnaryMethod_ExportPackages<WithStreamedUnaryMethod_ExportBlockedLoop<WithStreamedUnaryMethod_ExportUnblockedLoop<WithStreamedUnaryMethod_ExportReconfigure<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExportInfo<WithStreamedUnaryMethod_ExportPackages<WithStreamedUnaryMethod_ExportBlockedLoop<WithStreamedUnaryMethod_ExportUnblockedLoop<WithStreamedUnaryMethod_ExportReconfigure<Service > > > > > StreamedService;
};

}  // namespace grpcagent


#endif  // GRPC_nsolid_5fservice_2eproto__INCLUDED
