// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile.proto

#include "profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcagent {
PROTOBUF_CONSTEXPR ProfileArgs::ProfileArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.thread_id_)*/uint64_t{0u}
  , /*decltype(_impl_.duration_)*/uint64_t{0u}
  , /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ProfileArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileArgsDefaultTypeInternal() {}
  union {
    ProfileArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileArgsDefaultTypeInternal _ProfileArgs_default_instance_;
PROTOBUF_CONSTEXPR CPUProfileArgs::CPUProfileArgs(
    ::_pbi::ConstantInitialized) {}
struct CPUProfileArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPUProfileArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPUProfileArgsDefaultTypeInternal() {}
  union {
    CPUProfileArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPUProfileArgsDefaultTypeInternal _CPUProfileArgs_default_instance_;
PROTOBUF_CONSTEXPR HeapProfileArgs::HeapProfileArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_allocations_)*/false
  , /*decltype(_impl_.redacted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeapProfileArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapProfileArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapProfileArgsDefaultTypeInternal() {}
  union {
    HeapProfileArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapProfileArgsDefaultTypeInternal _HeapProfileArgs_default_instance_;
PROTOBUF_CONSTEXPR HeapSamplingArgs::HeapSamplingArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_interval_)*/uint64_t{0u}
  , /*decltype(_impl_.stack_depth_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeapSamplingArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapSamplingArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapSamplingArgsDefaultTypeInternal() {}
  union {
    HeapSamplingArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapSamplingArgsDefaultTypeInternal _HeapSamplingArgs_default_instance_;
PROTOBUF_CONSTEXPR HeapSnapshotArgs::HeapSnapshotArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.redacted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeapSnapshotArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapSnapshotArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapSnapshotArgsDefaultTypeInternal() {}
  union {
    HeapSnapshotArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapSnapshotArgsDefaultTypeInternal _HeapSnapshotArgs_default_instance_;
}  // namespace grpcagent
static ::_pb::Metadata file_level_metadata_profile_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_profile_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_profile_2eproto = nullptr;

const uint32_t TableStruct_profile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProfileArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProfileArgs, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProfileArgs, _impl_.thread_id_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProfileArgs, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProfileArgs, _impl_.metadata_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpcagent::ProfileArgs, _impl_.args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::CPUProfileArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapProfileArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapProfileArgs, _impl_.track_allocations_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapProfileArgs, _impl_.redacted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapSamplingArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapSamplingArgs, _impl_.sample_interval_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapSamplingArgs, _impl_.stack_depth_),
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapSamplingArgs, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapSnapshotArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcagent::HeapSnapshotArgs, _impl_.redacted_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcagent::ProfileArgs)},
  { 14, -1, -1, sizeof(::grpcagent::CPUProfileArgs)},
  { 20, -1, -1, sizeof(::grpcagent::HeapProfileArgs)},
  { 28, -1, -1, sizeof(::grpcagent::HeapSamplingArgs)},
  { 37, -1, -1, sizeof(::grpcagent::HeapSnapshotArgs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcagent::_ProfileArgs_default_instance_._instance,
  &::grpcagent::_CPUProfileArgs_default_instance_._instance,
  &::grpcagent::_HeapProfileArgs_default_instance_._instance,
  &::grpcagent::_HeapSamplingArgs_default_instance_._instance,
  &::grpcagent::_HeapSnapshotArgs_default_instance_._instance,
};

const char descriptor_table_protodef_profile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprofile.proto\022\tgrpcagent\032\034google/proto"
  "buf/struct.proto\"\267\002\n\013ProfileArgs\022\021\n\tthre"
  "ad_id\030\001 \001(\004\022\020\n\010duration\030\002 \001(\004\022)\n\010metadat"
  "a\030\003 \001(\0132\027.google.protobuf.Struct\0220\n\013cpu_"
  "profile\030\004 \001(\0132\031.grpcagent.CPUProfileArgs"
  "H\000\0222\n\014heap_profile\030\005 \001(\0132\032.grpcagent.Hea"
  "pProfileArgsH\000\0224\n\rheap_sampling\030\006 \001(\0132\033."
  "grpcagent.HeapSamplingArgsH\000\0224\n\rheap_sna"
  "pshot\030\007 \001(\0132\033.grpcagent.HeapSnapshotArgs"
  "H\000B\006\n\004args\"\020\n\016CPUProfileArgs\">\n\017HeapProf"
  "ileArgs\022\031\n\021track_allocations\030\001 \001(\010\022\020\n\010re"
  "dacted\030\002 \001(\010\"O\n\020HeapSamplingArgs\022\027\n\017samp"
  "le_interval\030\001 \001(\004\022\023\n\013stack_depth\030\002 \001(\r\022\r"
  "\n\005flags\030\003 \001(\r\"$\n\020HeapSnapshotArgs\022\020\n\010red"
  "acted\030\001 \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_profile_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_profile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_profile_2eproto = {
    false, false, 579, descriptor_table_protodef_profile_2eproto,
    "profile.proto",
    &descriptor_table_profile_2eproto_once, descriptor_table_profile_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_profile_2eproto::offsets,
    file_level_metadata_profile_2eproto, file_level_enum_descriptors_profile_2eproto,
    file_level_service_descriptors_profile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_profile_2eproto_getter() {
  return &descriptor_table_profile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_profile_2eproto(&descriptor_table_profile_2eproto);
namespace grpcagent {

// ===================================================================

class ProfileArgs::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ProfileArgs* msg);
  static const ::grpcagent::CPUProfileArgs& cpu_profile(const ProfileArgs* msg);
  static const ::grpcagent::HeapProfileArgs& heap_profile(const ProfileArgs* msg);
  static const ::grpcagent::HeapSamplingArgs& heap_sampling(const ProfileArgs* msg);
  static const ::grpcagent::HeapSnapshotArgs& heap_snapshot(const ProfileArgs* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ProfileArgs::_Internal::metadata(const ProfileArgs* msg) {
  return *msg->_impl_.metadata_;
}
const ::grpcagent::CPUProfileArgs&
ProfileArgs::_Internal::cpu_profile(const ProfileArgs* msg) {
  return *msg->_impl_.args_.cpu_profile_;
}
const ::grpcagent::HeapProfileArgs&
ProfileArgs::_Internal::heap_profile(const ProfileArgs* msg) {
  return *msg->_impl_.args_.heap_profile_;
}
const ::grpcagent::HeapSamplingArgs&
ProfileArgs::_Internal::heap_sampling(const ProfileArgs* msg) {
  return *msg->_impl_.args_.heap_sampling_;
}
const ::grpcagent::HeapSnapshotArgs&
ProfileArgs::_Internal::heap_snapshot(const ProfileArgs* msg) {
  return *msg->_impl_.args_.heap_snapshot_;
}
void ProfileArgs::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void ProfileArgs::set_allocated_cpu_profile(::grpcagent::CPUProfileArgs* cpu_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_args();
  if (cpu_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cpu_profile);
    if (message_arena != submessage_arena) {
      cpu_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_profile, submessage_arena);
    }
    set_has_cpu_profile();
    _impl_.args_.cpu_profile_ = cpu_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProfileArgs.cpu_profile)
}
void ProfileArgs::set_allocated_heap_profile(::grpcagent::HeapProfileArgs* heap_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_args();
  if (heap_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heap_profile);
    if (message_arena != submessage_arena) {
      heap_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heap_profile, submessage_arena);
    }
    set_has_heap_profile();
    _impl_.args_.heap_profile_ = heap_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProfileArgs.heap_profile)
}
void ProfileArgs::set_allocated_heap_sampling(::grpcagent::HeapSamplingArgs* heap_sampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_args();
  if (heap_sampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heap_sampling);
    if (message_arena != submessage_arena) {
      heap_sampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heap_sampling, submessage_arena);
    }
    set_has_heap_sampling();
    _impl_.args_.heap_sampling_ = heap_sampling;
  }
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProfileArgs.heap_sampling)
}
void ProfileArgs::set_allocated_heap_snapshot(::grpcagent::HeapSnapshotArgs* heap_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_args();
  if (heap_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heap_snapshot);
    if (message_arena != submessage_arena) {
      heap_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heap_snapshot, submessage_arena);
    }
    set_has_heap_snapshot();
    _impl_.args_.heap_snapshot_ = heap_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProfileArgs.heap_snapshot)
}
ProfileArgs::ProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.ProfileArgs)
}
ProfileArgs::ProfileArgs(const ProfileArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfileArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.thread_id_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  ::memcpy(&_impl_.thread_id_, &from._impl_.thread_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.thread_id_)) + sizeof(_impl_.duration_));
  clear_has_args();
  switch (from.args_case()) {
    case kCpuProfile: {
      _this->_internal_mutable_cpu_profile()->::grpcagent::CPUProfileArgs::MergeFrom(
          from._internal_cpu_profile());
      break;
    }
    case kHeapProfile: {
      _this->_internal_mutable_heap_profile()->::grpcagent::HeapProfileArgs::MergeFrom(
          from._internal_heap_profile());
      break;
    }
    case kHeapSampling: {
      _this->_internal_mutable_heap_sampling()->::grpcagent::HeapSamplingArgs::MergeFrom(
          from._internal_heap_sampling());
      break;
    }
    case kHeapSnapshot: {
      _this->_internal_mutable_heap_snapshot()->::grpcagent::HeapSnapshotArgs::MergeFrom(
          from._internal_heap_snapshot());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpcagent.ProfileArgs)
}

inline void ProfileArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.thread_id_){uint64_t{0u}}
    , decltype(_impl_.duration_){uint64_t{0u}}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_args();
}

ProfileArgs::~ProfileArgs() {
  // @@protoc_insertion_point(destructor:grpcagent.ProfileArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfileArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (has_args()) {
    clear_args();
  }
}

void ProfileArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfileArgs::clear_args() {
// @@protoc_insertion_point(one_of_clear_start:grpcagent.ProfileArgs)
  switch (args_case()) {
    case kCpuProfile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.args_.cpu_profile_;
      }
      break;
    }
    case kHeapProfile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.args_.heap_profile_;
      }
      break;
    }
    case kHeapSampling: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.args_.heap_sampling_;
      }
      break;
    }
    case kHeapSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.args_.heap_snapshot_;
      }
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ARGS_NOT_SET;
}


void ProfileArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.ProfileArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  ::memset(&_impl_.thread_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.thread_id_)) + sizeof(_impl_.duration_));
  clear_args();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 thread_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpcagent.CPUProfileArgs cpu_profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpcagent.HeapProfileArgs heap_profile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heap_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpcagent.HeapSamplingArgs heap_sampling = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_heap_sampling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpcagent.HeapSnapshotArgs heap_snapshot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_heap_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.ProfileArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->_internal_thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_thread_id(), target);
  }

  // uint64 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_duration(), target);
  }

  // .google.protobuf.Struct metadata = 3;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .grpcagent.CPUProfileArgs cpu_profile = 4;
  if (_internal_has_cpu_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cpu_profile(this),
        _Internal::cpu_profile(this).GetCachedSize(), target, stream);
  }

  // .grpcagent.HeapProfileArgs heap_profile = 5;
  if (_internal_has_heap_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::heap_profile(this),
        _Internal::heap_profile(this).GetCachedSize(), target, stream);
  }

  // .grpcagent.HeapSamplingArgs heap_sampling = 6;
  if (_internal_has_heap_sampling()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::heap_sampling(this),
        _Internal::heap_sampling(this).GetCachedSize(), target, stream);
  }

  // .grpcagent.HeapSnapshotArgs heap_snapshot = 7;
  if (_internal_has_heap_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::heap_snapshot(this),
        _Internal::heap_snapshot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.ProfileArgs)
  return target;
}

size_t ProfileArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.ProfileArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct metadata = 3;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // uint64 thread_id = 1;
  if (this->_internal_thread_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_thread_id());
  }

  // uint64 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_duration());
  }

  switch (args_case()) {
    // .grpcagent.CPUProfileArgs cpu_profile = 4;
    case kCpuProfile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_.cpu_profile_);
      break;
    }
    // .grpcagent.HeapProfileArgs heap_profile = 5;
    case kHeapProfile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_.heap_profile_);
      break;
    }
    // .grpcagent.HeapSamplingArgs heap_sampling = 6;
    case kHeapSampling: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_.heap_sampling_);
      break;
    }
    // .grpcagent.HeapSnapshotArgs heap_snapshot = 7;
    case kHeapSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_.heap_snapshot_);
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfileArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileArgs::GetClassData() const { return &_class_data_; }


void ProfileArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfileArgs*>(&to_msg);
  auto& from = static_cast<const ProfileArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.ProfileArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_thread_id() != 0) {
    _this->_internal_set_thread_id(from._internal_thread_id());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  switch (from.args_case()) {
    case kCpuProfile: {
      _this->_internal_mutable_cpu_profile()->::grpcagent::CPUProfileArgs::MergeFrom(
          from._internal_cpu_profile());
      break;
    }
    case kHeapProfile: {
      _this->_internal_mutable_heap_profile()->::grpcagent::HeapProfileArgs::MergeFrom(
          from._internal_heap_profile());
      break;
    }
    case kHeapSampling: {
      _this->_internal_mutable_heap_sampling()->::grpcagent::HeapSamplingArgs::MergeFrom(
          from._internal_heap_sampling());
      break;
    }
    case kHeapSnapshot: {
      _this->_internal_mutable_heap_snapshot()->::grpcagent::HeapSnapshotArgs::MergeFrom(
          from._internal_heap_snapshot());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileArgs::CopyFrom(const ProfileArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.ProfileArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileArgs::IsInitialized() const {
  return true;
}

void ProfileArgs::InternalSwap(ProfileArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileArgs, _impl_.duration_)
      + sizeof(ProfileArgs::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(ProfileArgs, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
  swap(_impl_.args_, other->_impl_.args_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[0]);
}

// ===================================================================

class CPUProfileArgs::_Internal {
 public:
};

CPUProfileArgs::CPUProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:grpcagent.CPUProfileArgs)
}
CPUProfileArgs::CPUProfileArgs(const CPUProfileArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPUProfileArgs* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpcagent.CPUProfileArgs)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPUProfileArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPUProfileArgs::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPUProfileArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[1]);
}

// ===================================================================

class HeapProfileArgs::_Internal {
 public:
};

HeapProfileArgs::HeapProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.HeapProfileArgs)
}
HeapProfileArgs::HeapProfileArgs(const HeapProfileArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapProfileArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_allocations_){}
    , decltype(_impl_.redacted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.track_allocations_, &from._impl_.track_allocations_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redacted_) -
    reinterpret_cast<char*>(&_impl_.track_allocations_)) + sizeof(_impl_.redacted_));
  // @@protoc_insertion_point(copy_constructor:grpcagent.HeapProfileArgs)
}

inline void HeapProfileArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_allocations_){false}
    , decltype(_impl_.redacted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeapProfileArgs::~HeapProfileArgs() {
  // @@protoc_insertion_point(destructor:grpcagent.HeapProfileArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapProfileArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeapProfileArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapProfileArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.HeapProfileArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.track_allocations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.redacted_) -
      reinterpret_cast<char*>(&_impl_.track_allocations_)) + sizeof(_impl_.redacted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapProfileArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool track_allocations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.track_allocations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool redacted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.redacted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapProfileArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.HeapProfileArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool track_allocations = 1;
  if (this->_internal_track_allocations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_track_allocations(), target);
  }

  // bool redacted = 2;
  if (this->_internal_redacted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_redacted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.HeapProfileArgs)
  return target;
}

size_t HeapProfileArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.HeapProfileArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool track_allocations = 1;
  if (this->_internal_track_allocations() != 0) {
    total_size += 1 + 1;
  }

  // bool redacted = 2;
  if (this->_internal_redacted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapProfileArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapProfileArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapProfileArgs::GetClassData() const { return &_class_data_; }


void HeapProfileArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapProfileArgs*>(&to_msg);
  auto& from = static_cast<const HeapProfileArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.HeapProfileArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_track_allocations() != 0) {
    _this->_internal_set_track_allocations(from._internal_track_allocations());
  }
  if (from._internal_redacted() != 0) {
    _this->_internal_set_redacted(from._internal_redacted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapProfileArgs::CopyFrom(const HeapProfileArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.HeapProfileArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapProfileArgs::IsInitialized() const {
  return true;
}

void HeapProfileArgs::InternalSwap(HeapProfileArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapProfileArgs, _impl_.redacted_)
      + sizeof(HeapProfileArgs::_impl_.redacted_)
      - PROTOBUF_FIELD_OFFSET(HeapProfileArgs, _impl_.track_allocations_)>(
          reinterpret_cast<char*>(&_impl_.track_allocations_),
          reinterpret_cast<char*>(&other->_impl_.track_allocations_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapProfileArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[2]);
}

// ===================================================================

class HeapSamplingArgs::_Internal {
 public:
};

HeapSamplingArgs::HeapSamplingArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.HeapSamplingArgs)
}
HeapSamplingArgs::HeapSamplingArgs(const HeapSamplingArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapSamplingArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_interval_){}
    , decltype(_impl_.stack_depth_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sample_interval_, &from._impl_.sample_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.sample_interval_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:grpcagent.HeapSamplingArgs)
}

inline void HeapSamplingArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_interval_){uint64_t{0u}}
    , decltype(_impl_.stack_depth_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeapSamplingArgs::~HeapSamplingArgs() {
  // @@protoc_insertion_point(destructor:grpcagent.HeapSamplingArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapSamplingArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeapSamplingArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapSamplingArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.HeapSamplingArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sample_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.sample_interval_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapSamplingArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sample_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sample_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stack_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stack_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapSamplingArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.HeapSamplingArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sample_interval = 1;
  if (this->_internal_sample_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sample_interval(), target);
  }

  // uint32 stack_depth = 2;
  if (this->_internal_stack_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stack_depth(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.HeapSamplingArgs)
  return target;
}

size_t HeapSamplingArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.HeapSamplingArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sample_interval = 1;
  if (this->_internal_sample_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_interval());
  }

  // uint32 stack_depth = 2;
  if (this->_internal_stack_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stack_depth());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapSamplingArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapSamplingArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapSamplingArgs::GetClassData() const { return &_class_data_; }


void HeapSamplingArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapSamplingArgs*>(&to_msg);
  auto& from = static_cast<const HeapSamplingArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.HeapSamplingArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sample_interval() != 0) {
    _this->_internal_set_sample_interval(from._internal_sample_interval());
  }
  if (from._internal_stack_depth() != 0) {
    _this->_internal_set_stack_depth(from._internal_stack_depth());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapSamplingArgs::CopyFrom(const HeapSamplingArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.HeapSamplingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapSamplingArgs::IsInitialized() const {
  return true;
}

void HeapSamplingArgs::InternalSwap(HeapSamplingArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapSamplingArgs, _impl_.flags_)
      + sizeof(HeapSamplingArgs::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(HeapSamplingArgs, _impl_.sample_interval_)>(
          reinterpret_cast<char*>(&_impl_.sample_interval_),
          reinterpret_cast<char*>(&other->_impl_.sample_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapSamplingArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[3]);
}

// ===================================================================

class HeapSnapshotArgs::_Internal {
 public:
};

HeapSnapshotArgs::HeapSnapshotArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcagent.HeapSnapshotArgs)
}
HeapSnapshotArgs::HeapSnapshotArgs(const HeapSnapshotArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapSnapshotArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.redacted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.redacted_ = from._impl_.redacted_;
  // @@protoc_insertion_point(copy_constructor:grpcagent.HeapSnapshotArgs)
}

inline void HeapSnapshotArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.redacted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeapSnapshotArgs::~HeapSnapshotArgs() {
  // @@protoc_insertion_point(destructor:grpcagent.HeapSnapshotArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapSnapshotArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeapSnapshotArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapSnapshotArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcagent.HeapSnapshotArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.redacted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapSnapshotArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool redacted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.redacted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapSnapshotArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcagent.HeapSnapshotArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool redacted = 1;
  if (this->_internal_redacted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_redacted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcagent.HeapSnapshotArgs)
  return target;
}

size_t HeapSnapshotArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcagent.HeapSnapshotArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool redacted = 1;
  if (this->_internal_redacted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapSnapshotArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapSnapshotArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapSnapshotArgs::GetClassData() const { return &_class_data_; }


void HeapSnapshotArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapSnapshotArgs*>(&to_msg);
  auto& from = static_cast<const HeapSnapshotArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcagent.HeapSnapshotArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_redacted() != 0) {
    _this->_internal_set_redacted(from._internal_redacted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapSnapshotArgs::CopyFrom(const HeapSnapshotArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcagent.HeapSnapshotArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapSnapshotArgs::IsInitialized() const {
  return true;
}

void HeapSnapshotArgs::InternalSwap(HeapSnapshotArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.redacted_, other->_impl_.redacted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapSnapshotArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcagent::ProfileArgs*
Arena::CreateMaybeMessage< ::grpcagent::ProfileArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::ProfileArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::CPUProfileArgs*
Arena::CreateMaybeMessage< ::grpcagent::CPUProfileArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::CPUProfileArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::HeapProfileArgs*
Arena::CreateMaybeMessage< ::grpcagent::HeapProfileArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::HeapProfileArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::HeapSamplingArgs*
Arena::CreateMaybeMessage< ::grpcagent::HeapSamplingArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::HeapSamplingArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcagent::HeapSnapshotArgs*
Arena::CreateMaybeMessage< ::grpcagent::HeapSnapshotArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcagent::HeapSnapshotArgs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
