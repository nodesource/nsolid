// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_profile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_profile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_profile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_profile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_profile_2eproto;
namespace grpcagent {
class CPUProfileArgs;
struct CPUProfileArgsDefaultTypeInternal;
extern CPUProfileArgsDefaultTypeInternal _CPUProfileArgs_default_instance_;
class HeapProfileArgs;
struct HeapProfileArgsDefaultTypeInternal;
extern HeapProfileArgsDefaultTypeInternal _HeapProfileArgs_default_instance_;
class HeapSamplingArgs;
struct HeapSamplingArgsDefaultTypeInternal;
extern HeapSamplingArgsDefaultTypeInternal _HeapSamplingArgs_default_instance_;
class HeapSnapshotArgs;
struct HeapSnapshotArgsDefaultTypeInternal;
extern HeapSnapshotArgsDefaultTypeInternal _HeapSnapshotArgs_default_instance_;
class ProfileArgs;
struct ProfileArgsDefaultTypeInternal;
extern ProfileArgsDefaultTypeInternal _ProfileArgs_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::CPUProfileArgs* Arena::CreateMaybeMessage<::grpcagent::CPUProfileArgs>(Arena*);
template<> ::grpcagent::HeapProfileArgs* Arena::CreateMaybeMessage<::grpcagent::HeapProfileArgs>(Arena*);
template<> ::grpcagent::HeapSamplingArgs* Arena::CreateMaybeMessage<::grpcagent::HeapSamplingArgs>(Arena*);
template<> ::grpcagent::HeapSnapshotArgs* Arena::CreateMaybeMessage<::grpcagent::HeapSnapshotArgs>(Arena*);
template<> ::grpcagent::ProfileArgs* Arena::CreateMaybeMessage<::grpcagent::ProfileArgs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class ProfileArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.ProfileArgs) */ {
 public:
  inline ProfileArgs() : ProfileArgs(nullptr) {}
  ~ProfileArgs() override;
  explicit PROTOBUF_CONSTEXPR ProfileArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileArgs(const ProfileArgs& from);
  ProfileArgs(ProfileArgs&& from) noexcept
    : ProfileArgs() {
    *this = ::std::move(from);
  }

  inline ProfileArgs& operator=(const ProfileArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileArgs& operator=(ProfileArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileArgs& default_instance() {
    return *internal_default_instance();
  }
  enum ArgsCase {
    kCpuProfile = 4,
    kHeapProfile = 5,
    kHeapSampling = 6,
    kHeapSnapshot = 7,
    ARGS_NOT_SET = 0,
  };

  static inline const ProfileArgs* internal_default_instance() {
    return reinterpret_cast<const ProfileArgs*>(
               &_ProfileArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfileArgs& a, ProfileArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfileArgs& from) {
    ProfileArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.ProfileArgs";
  }
  protected:
  explicit ProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kThreadIdFieldNumber = 1,
    kDurationFieldNumber = 2,
    kCpuProfileFieldNumber = 4,
    kHeapProfileFieldNumber = 5,
    kHeapSamplingFieldNumber = 6,
    kHeapSnapshotFieldNumber = 7,
  };
  // .google.protobuf.Struct metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(::PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::PROTOBUF_NAMESPACE_ID::Struct* metadata);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // uint64 thread_id = 1;
  void clear_thread_id();
  uint64_t thread_id() const;
  void set_thread_id(uint64_t value);
  private:
  uint64_t _internal_thread_id() const;
  void _internal_set_thread_id(uint64_t value);
  public:

  // uint64 duration = 2;
  void clear_duration();
  uint64_t duration() const;
  void set_duration(uint64_t value);
  private:
  uint64_t _internal_duration() const;
  void _internal_set_duration(uint64_t value);
  public:

  // .grpcagent.CPUProfileArgs cpu_profile = 4;
  bool has_cpu_profile() const;
  private:
  bool _internal_has_cpu_profile() const;
  public:
  void clear_cpu_profile();
  const ::grpcagent::CPUProfileArgs& cpu_profile() const;
  PROTOBUF_NODISCARD ::grpcagent::CPUProfileArgs* release_cpu_profile();
  ::grpcagent::CPUProfileArgs* mutable_cpu_profile();
  void set_allocated_cpu_profile(::grpcagent::CPUProfileArgs* cpu_profile);
  private:
  const ::grpcagent::CPUProfileArgs& _internal_cpu_profile() const;
  ::grpcagent::CPUProfileArgs* _internal_mutable_cpu_profile();
  public:
  void unsafe_arena_set_allocated_cpu_profile(
      ::grpcagent::CPUProfileArgs* cpu_profile);
  ::grpcagent::CPUProfileArgs* unsafe_arena_release_cpu_profile();

  // .grpcagent.HeapProfileArgs heap_profile = 5;
  bool has_heap_profile() const;
  private:
  bool _internal_has_heap_profile() const;
  public:
  void clear_heap_profile();
  const ::grpcagent::HeapProfileArgs& heap_profile() const;
  PROTOBUF_NODISCARD ::grpcagent::HeapProfileArgs* release_heap_profile();
  ::grpcagent::HeapProfileArgs* mutable_heap_profile();
  void set_allocated_heap_profile(::grpcagent::HeapProfileArgs* heap_profile);
  private:
  const ::grpcagent::HeapProfileArgs& _internal_heap_profile() const;
  ::grpcagent::HeapProfileArgs* _internal_mutable_heap_profile();
  public:
  void unsafe_arena_set_allocated_heap_profile(
      ::grpcagent::HeapProfileArgs* heap_profile);
  ::grpcagent::HeapProfileArgs* unsafe_arena_release_heap_profile();

  // .grpcagent.HeapSamplingArgs heap_sampling = 6;
  bool has_heap_sampling() const;
  private:
  bool _internal_has_heap_sampling() const;
  public:
  void clear_heap_sampling();
  const ::grpcagent::HeapSamplingArgs& heap_sampling() const;
  PROTOBUF_NODISCARD ::grpcagent::HeapSamplingArgs* release_heap_sampling();
  ::grpcagent::HeapSamplingArgs* mutable_heap_sampling();
  void set_allocated_heap_sampling(::grpcagent::HeapSamplingArgs* heap_sampling);
  private:
  const ::grpcagent::HeapSamplingArgs& _internal_heap_sampling() const;
  ::grpcagent::HeapSamplingArgs* _internal_mutable_heap_sampling();
  public:
  void unsafe_arena_set_allocated_heap_sampling(
      ::grpcagent::HeapSamplingArgs* heap_sampling);
  ::grpcagent::HeapSamplingArgs* unsafe_arena_release_heap_sampling();

  // .grpcagent.HeapSnapshotArgs heap_snapshot = 7;
  bool has_heap_snapshot() const;
  private:
  bool _internal_has_heap_snapshot() const;
  public:
  void clear_heap_snapshot();
  const ::grpcagent::HeapSnapshotArgs& heap_snapshot() const;
  PROTOBUF_NODISCARD ::grpcagent::HeapSnapshotArgs* release_heap_snapshot();
  ::grpcagent::HeapSnapshotArgs* mutable_heap_snapshot();
  void set_allocated_heap_snapshot(::grpcagent::HeapSnapshotArgs* heap_snapshot);
  private:
  const ::grpcagent::HeapSnapshotArgs& _internal_heap_snapshot() const;
  ::grpcagent::HeapSnapshotArgs* _internal_mutable_heap_snapshot();
  public:
  void unsafe_arena_set_allocated_heap_snapshot(
      ::grpcagent::HeapSnapshotArgs* heap_snapshot);
  ::grpcagent::HeapSnapshotArgs* unsafe_arena_release_heap_snapshot();

  void clear_args();
  ArgsCase args_case() const;
  // @@protoc_insertion_point(class_scope:grpcagent.ProfileArgs)
 private:
  class _Internal;
  void set_has_cpu_profile();
  void set_has_heap_profile();
  void set_has_heap_sampling();
  void set_has_heap_snapshot();

  inline bool has_args() const;
  inline void clear_has_args();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Struct* metadata_;
    uint64_t thread_id_;
    uint64_t duration_;
    union ArgsUnion {
      constexpr ArgsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::grpcagent::CPUProfileArgs* cpu_profile_;
      ::grpcagent::HeapProfileArgs* heap_profile_;
      ::grpcagent::HeapSamplingArgs* heap_sampling_;
      ::grpcagent::HeapSnapshotArgs* heap_snapshot_;
    } args_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_profile_2eproto;
};
// -------------------------------------------------------------------

class CPUProfileArgs final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:grpcagent.CPUProfileArgs) */ {
 public:
  inline CPUProfileArgs() : CPUProfileArgs(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CPUProfileArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPUProfileArgs(const CPUProfileArgs& from);
  CPUProfileArgs(CPUProfileArgs&& from) noexcept
    : CPUProfileArgs() {
    *this = ::std::move(from);
  }

  inline CPUProfileArgs& operator=(const CPUProfileArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUProfileArgs& operator=(CPUProfileArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPUProfileArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPUProfileArgs* internal_default_instance() {
    return reinterpret_cast<const CPUProfileArgs*>(
               &_CPUProfileArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPUProfileArgs& a, CPUProfileArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUProfileArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUProfileArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPUProfileArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPUProfileArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPUProfileArgs& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPUProfileArgs& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.CPUProfileArgs";
  }
  protected:
  explicit CPUProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpcagent.CPUProfileArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_profile_2eproto;
};
// -------------------------------------------------------------------

class HeapProfileArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.HeapProfileArgs) */ {
 public:
  inline HeapProfileArgs() : HeapProfileArgs(nullptr) {}
  ~HeapProfileArgs() override;
  explicit PROTOBUF_CONSTEXPR HeapProfileArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapProfileArgs(const HeapProfileArgs& from);
  HeapProfileArgs(HeapProfileArgs&& from) noexcept
    : HeapProfileArgs() {
    *this = ::std::move(from);
  }

  inline HeapProfileArgs& operator=(const HeapProfileArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapProfileArgs& operator=(HeapProfileArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeapProfileArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeapProfileArgs* internal_default_instance() {
    return reinterpret_cast<const HeapProfileArgs*>(
               &_HeapProfileArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeapProfileArgs& a, HeapProfileArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(HeapProfileArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapProfileArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapProfileArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapProfileArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeapProfileArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeapProfileArgs& from) {
    HeapProfileArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeapProfileArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.HeapProfileArgs";
  }
  protected:
  explicit HeapProfileArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackAllocationsFieldNumber = 1,
    kRedactedFieldNumber = 2,
  };
  // bool track_allocations = 1;
  void clear_track_allocations();
  bool track_allocations() const;
  void set_track_allocations(bool value);
  private:
  bool _internal_track_allocations() const;
  void _internal_set_track_allocations(bool value);
  public:

  // bool redacted = 2;
  void clear_redacted();
  bool redacted() const;
  void set_redacted(bool value);
  private:
  bool _internal_redacted() const;
  void _internal_set_redacted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.HeapProfileArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool track_allocations_;
    bool redacted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_profile_2eproto;
};
// -------------------------------------------------------------------

class HeapSamplingArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.HeapSamplingArgs) */ {
 public:
  inline HeapSamplingArgs() : HeapSamplingArgs(nullptr) {}
  ~HeapSamplingArgs() override;
  explicit PROTOBUF_CONSTEXPR HeapSamplingArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapSamplingArgs(const HeapSamplingArgs& from);
  HeapSamplingArgs(HeapSamplingArgs&& from) noexcept
    : HeapSamplingArgs() {
    *this = ::std::move(from);
  }

  inline HeapSamplingArgs& operator=(const HeapSamplingArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapSamplingArgs& operator=(HeapSamplingArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeapSamplingArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeapSamplingArgs* internal_default_instance() {
    return reinterpret_cast<const HeapSamplingArgs*>(
               &_HeapSamplingArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeapSamplingArgs& a, HeapSamplingArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(HeapSamplingArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapSamplingArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapSamplingArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapSamplingArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeapSamplingArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeapSamplingArgs& from) {
    HeapSamplingArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeapSamplingArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.HeapSamplingArgs";
  }
  protected:
  explicit HeapSamplingArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleIntervalFieldNumber = 1,
    kStackDepthFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // uint64 sample_interval = 1;
  void clear_sample_interval();
  uint64_t sample_interval() const;
  void set_sample_interval(uint64_t value);
  private:
  uint64_t _internal_sample_interval() const;
  void _internal_set_sample_interval(uint64_t value);
  public:

  // uint32 stack_depth = 2;
  void clear_stack_depth();
  uint32_t stack_depth() const;
  void set_stack_depth(uint32_t value);
  private:
  uint32_t _internal_stack_depth() const;
  void _internal_set_stack_depth(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.HeapSamplingArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t sample_interval_;
    uint32_t stack_depth_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_profile_2eproto;
};
// -------------------------------------------------------------------

class HeapSnapshotArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.HeapSnapshotArgs) */ {
 public:
  inline HeapSnapshotArgs() : HeapSnapshotArgs(nullptr) {}
  ~HeapSnapshotArgs() override;
  explicit PROTOBUF_CONSTEXPR HeapSnapshotArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapSnapshotArgs(const HeapSnapshotArgs& from);
  HeapSnapshotArgs(HeapSnapshotArgs&& from) noexcept
    : HeapSnapshotArgs() {
    *this = ::std::move(from);
  }

  inline HeapSnapshotArgs& operator=(const HeapSnapshotArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapSnapshotArgs& operator=(HeapSnapshotArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeapSnapshotArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeapSnapshotArgs* internal_default_instance() {
    return reinterpret_cast<const HeapSnapshotArgs*>(
               &_HeapSnapshotArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HeapSnapshotArgs& a, HeapSnapshotArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(HeapSnapshotArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapSnapshotArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapSnapshotArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapSnapshotArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeapSnapshotArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeapSnapshotArgs& from) {
    HeapSnapshotArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeapSnapshotArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.HeapSnapshotArgs";
  }
  protected:
  explicit HeapSnapshotArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedactedFieldNumber = 1,
  };
  // bool redacted = 1;
  void clear_redacted();
  bool redacted() const;
  void set_redacted(bool value);
  private:
  bool _internal_redacted() const;
  void _internal_set_redacted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.HeapSnapshotArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool redacted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_profile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfileArgs

// uint64 thread_id = 1;
inline void ProfileArgs::clear_thread_id() {
  _impl_.thread_id_ = uint64_t{0u};
}
inline uint64_t ProfileArgs::_internal_thread_id() const {
  return _impl_.thread_id_;
}
inline uint64_t ProfileArgs::thread_id() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.thread_id)
  return _internal_thread_id();
}
inline void ProfileArgs::_internal_set_thread_id(uint64_t value) {
  
  _impl_.thread_id_ = value;
}
inline void ProfileArgs::set_thread_id(uint64_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProfileArgs.thread_id)
}

// uint64 duration = 2;
inline void ProfileArgs::clear_duration() {
  _impl_.duration_ = uint64_t{0u};
}
inline uint64_t ProfileArgs::_internal_duration() const {
  return _impl_.duration_;
}
inline uint64_t ProfileArgs::duration() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.duration)
  return _internal_duration();
}
inline void ProfileArgs::_internal_set_duration(uint64_t value) {
  
  _impl_.duration_ = value;
}
inline void ProfileArgs::set_duration(uint64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:grpcagent.ProfileArgs.duration)
}

// .google.protobuf.Struct metadata = 3;
inline bool ProfileArgs::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool ProfileArgs::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ProfileArgs::_internal_metadata() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ProfileArgs::metadata() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.metadata)
  return _internal_metadata();
}
inline void ProfileArgs::unsafe_arena_set_allocated_metadata(
    ::PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.ProfileArgs.metadata)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ProfileArgs::release_metadata() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ProfileArgs::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:grpcagent.ProfileArgs.metadata)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ProfileArgs::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ProfileArgs::mutable_metadata() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProfileArgs.metadata)
  return _msg;
}
inline void ProfileArgs::set_allocated_metadata(::PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:grpcagent.ProfileArgs.metadata)
}

// .grpcagent.CPUProfileArgs cpu_profile = 4;
inline bool ProfileArgs::_internal_has_cpu_profile() const {
  return args_case() == kCpuProfile;
}
inline bool ProfileArgs::has_cpu_profile() const {
  return _internal_has_cpu_profile();
}
inline void ProfileArgs::set_has_cpu_profile() {
  _impl_._oneof_case_[0] = kCpuProfile;
}
inline void ProfileArgs::clear_cpu_profile() {
  if (_internal_has_cpu_profile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.args_.cpu_profile_;
    }
    clear_has_args();
  }
}
inline ::grpcagent::CPUProfileArgs* ProfileArgs::release_cpu_profile() {
  // @@protoc_insertion_point(field_release:grpcagent.ProfileArgs.cpu_profile)
  if (_internal_has_cpu_profile()) {
    clear_has_args();
    ::grpcagent::CPUProfileArgs* temp = _impl_.args_.cpu_profile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.cpu_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::CPUProfileArgs& ProfileArgs::_internal_cpu_profile() const {
  return _internal_has_cpu_profile()
      ? *_impl_.args_.cpu_profile_
      : reinterpret_cast< ::grpcagent::CPUProfileArgs&>(::grpcagent::_CPUProfileArgs_default_instance_);
}
inline const ::grpcagent::CPUProfileArgs& ProfileArgs::cpu_profile() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.cpu_profile)
  return _internal_cpu_profile();
}
inline ::grpcagent::CPUProfileArgs* ProfileArgs::unsafe_arena_release_cpu_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.ProfileArgs.cpu_profile)
  if (_internal_has_cpu_profile()) {
    clear_has_args();
    ::grpcagent::CPUProfileArgs* temp = _impl_.args_.cpu_profile_;
    _impl_.args_.cpu_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProfileArgs::unsafe_arena_set_allocated_cpu_profile(::grpcagent::CPUProfileArgs* cpu_profile) {
  clear_args();
  if (cpu_profile) {
    set_has_cpu_profile();
    _impl_.args_.cpu_profile_ = cpu_profile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.ProfileArgs.cpu_profile)
}
inline ::grpcagent::CPUProfileArgs* ProfileArgs::_internal_mutable_cpu_profile() {
  if (!_internal_has_cpu_profile()) {
    clear_args();
    set_has_cpu_profile();
    _impl_.args_.cpu_profile_ = CreateMaybeMessage< ::grpcagent::CPUProfileArgs >(GetArenaForAllocation());
  }
  return _impl_.args_.cpu_profile_;
}
inline ::grpcagent::CPUProfileArgs* ProfileArgs::mutable_cpu_profile() {
  ::grpcagent::CPUProfileArgs* _msg = _internal_mutable_cpu_profile();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProfileArgs.cpu_profile)
  return _msg;
}

// .grpcagent.HeapProfileArgs heap_profile = 5;
inline bool ProfileArgs::_internal_has_heap_profile() const {
  return args_case() == kHeapProfile;
}
inline bool ProfileArgs::has_heap_profile() const {
  return _internal_has_heap_profile();
}
inline void ProfileArgs::set_has_heap_profile() {
  _impl_._oneof_case_[0] = kHeapProfile;
}
inline void ProfileArgs::clear_heap_profile() {
  if (_internal_has_heap_profile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.args_.heap_profile_;
    }
    clear_has_args();
  }
}
inline ::grpcagent::HeapProfileArgs* ProfileArgs::release_heap_profile() {
  // @@protoc_insertion_point(field_release:grpcagent.ProfileArgs.heap_profile)
  if (_internal_has_heap_profile()) {
    clear_has_args();
    ::grpcagent::HeapProfileArgs* temp = _impl_.args_.heap_profile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.heap_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::HeapProfileArgs& ProfileArgs::_internal_heap_profile() const {
  return _internal_has_heap_profile()
      ? *_impl_.args_.heap_profile_
      : reinterpret_cast< ::grpcagent::HeapProfileArgs&>(::grpcagent::_HeapProfileArgs_default_instance_);
}
inline const ::grpcagent::HeapProfileArgs& ProfileArgs::heap_profile() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.heap_profile)
  return _internal_heap_profile();
}
inline ::grpcagent::HeapProfileArgs* ProfileArgs::unsafe_arena_release_heap_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.ProfileArgs.heap_profile)
  if (_internal_has_heap_profile()) {
    clear_has_args();
    ::grpcagent::HeapProfileArgs* temp = _impl_.args_.heap_profile_;
    _impl_.args_.heap_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProfileArgs::unsafe_arena_set_allocated_heap_profile(::grpcagent::HeapProfileArgs* heap_profile) {
  clear_args();
  if (heap_profile) {
    set_has_heap_profile();
    _impl_.args_.heap_profile_ = heap_profile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.ProfileArgs.heap_profile)
}
inline ::grpcagent::HeapProfileArgs* ProfileArgs::_internal_mutable_heap_profile() {
  if (!_internal_has_heap_profile()) {
    clear_args();
    set_has_heap_profile();
    _impl_.args_.heap_profile_ = CreateMaybeMessage< ::grpcagent::HeapProfileArgs >(GetArenaForAllocation());
  }
  return _impl_.args_.heap_profile_;
}
inline ::grpcagent::HeapProfileArgs* ProfileArgs::mutable_heap_profile() {
  ::grpcagent::HeapProfileArgs* _msg = _internal_mutable_heap_profile();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProfileArgs.heap_profile)
  return _msg;
}

// .grpcagent.HeapSamplingArgs heap_sampling = 6;
inline bool ProfileArgs::_internal_has_heap_sampling() const {
  return args_case() == kHeapSampling;
}
inline bool ProfileArgs::has_heap_sampling() const {
  return _internal_has_heap_sampling();
}
inline void ProfileArgs::set_has_heap_sampling() {
  _impl_._oneof_case_[0] = kHeapSampling;
}
inline void ProfileArgs::clear_heap_sampling() {
  if (_internal_has_heap_sampling()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.args_.heap_sampling_;
    }
    clear_has_args();
  }
}
inline ::grpcagent::HeapSamplingArgs* ProfileArgs::release_heap_sampling() {
  // @@protoc_insertion_point(field_release:grpcagent.ProfileArgs.heap_sampling)
  if (_internal_has_heap_sampling()) {
    clear_has_args();
    ::grpcagent::HeapSamplingArgs* temp = _impl_.args_.heap_sampling_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.heap_sampling_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::HeapSamplingArgs& ProfileArgs::_internal_heap_sampling() const {
  return _internal_has_heap_sampling()
      ? *_impl_.args_.heap_sampling_
      : reinterpret_cast< ::grpcagent::HeapSamplingArgs&>(::grpcagent::_HeapSamplingArgs_default_instance_);
}
inline const ::grpcagent::HeapSamplingArgs& ProfileArgs::heap_sampling() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.heap_sampling)
  return _internal_heap_sampling();
}
inline ::grpcagent::HeapSamplingArgs* ProfileArgs::unsafe_arena_release_heap_sampling() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.ProfileArgs.heap_sampling)
  if (_internal_has_heap_sampling()) {
    clear_has_args();
    ::grpcagent::HeapSamplingArgs* temp = _impl_.args_.heap_sampling_;
    _impl_.args_.heap_sampling_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProfileArgs::unsafe_arena_set_allocated_heap_sampling(::grpcagent::HeapSamplingArgs* heap_sampling) {
  clear_args();
  if (heap_sampling) {
    set_has_heap_sampling();
    _impl_.args_.heap_sampling_ = heap_sampling;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.ProfileArgs.heap_sampling)
}
inline ::grpcagent::HeapSamplingArgs* ProfileArgs::_internal_mutable_heap_sampling() {
  if (!_internal_has_heap_sampling()) {
    clear_args();
    set_has_heap_sampling();
    _impl_.args_.heap_sampling_ = CreateMaybeMessage< ::grpcagent::HeapSamplingArgs >(GetArenaForAllocation());
  }
  return _impl_.args_.heap_sampling_;
}
inline ::grpcagent::HeapSamplingArgs* ProfileArgs::mutable_heap_sampling() {
  ::grpcagent::HeapSamplingArgs* _msg = _internal_mutable_heap_sampling();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProfileArgs.heap_sampling)
  return _msg;
}

// .grpcagent.HeapSnapshotArgs heap_snapshot = 7;
inline bool ProfileArgs::_internal_has_heap_snapshot() const {
  return args_case() == kHeapSnapshot;
}
inline bool ProfileArgs::has_heap_snapshot() const {
  return _internal_has_heap_snapshot();
}
inline void ProfileArgs::set_has_heap_snapshot() {
  _impl_._oneof_case_[0] = kHeapSnapshot;
}
inline void ProfileArgs::clear_heap_snapshot() {
  if (_internal_has_heap_snapshot()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.args_.heap_snapshot_;
    }
    clear_has_args();
  }
}
inline ::grpcagent::HeapSnapshotArgs* ProfileArgs::release_heap_snapshot() {
  // @@protoc_insertion_point(field_release:grpcagent.ProfileArgs.heap_snapshot)
  if (_internal_has_heap_snapshot()) {
    clear_has_args();
    ::grpcagent::HeapSnapshotArgs* temp = _impl_.args_.heap_snapshot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.heap_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::HeapSnapshotArgs& ProfileArgs::_internal_heap_snapshot() const {
  return _internal_has_heap_snapshot()
      ? *_impl_.args_.heap_snapshot_
      : reinterpret_cast< ::grpcagent::HeapSnapshotArgs&>(::grpcagent::_HeapSnapshotArgs_default_instance_);
}
inline const ::grpcagent::HeapSnapshotArgs& ProfileArgs::heap_snapshot() const {
  // @@protoc_insertion_point(field_get:grpcagent.ProfileArgs.heap_snapshot)
  return _internal_heap_snapshot();
}
inline ::grpcagent::HeapSnapshotArgs* ProfileArgs::unsafe_arena_release_heap_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.ProfileArgs.heap_snapshot)
  if (_internal_has_heap_snapshot()) {
    clear_has_args();
    ::grpcagent::HeapSnapshotArgs* temp = _impl_.args_.heap_snapshot_;
    _impl_.args_.heap_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProfileArgs::unsafe_arena_set_allocated_heap_snapshot(::grpcagent::HeapSnapshotArgs* heap_snapshot) {
  clear_args();
  if (heap_snapshot) {
    set_has_heap_snapshot();
    _impl_.args_.heap_snapshot_ = heap_snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.ProfileArgs.heap_snapshot)
}
inline ::grpcagent::HeapSnapshotArgs* ProfileArgs::_internal_mutable_heap_snapshot() {
  if (!_internal_has_heap_snapshot()) {
    clear_args();
    set_has_heap_snapshot();
    _impl_.args_.heap_snapshot_ = CreateMaybeMessage< ::grpcagent::HeapSnapshotArgs >(GetArenaForAllocation());
  }
  return _impl_.args_.heap_snapshot_;
}
inline ::grpcagent::HeapSnapshotArgs* ProfileArgs::mutable_heap_snapshot() {
  ::grpcagent::HeapSnapshotArgs* _msg = _internal_mutable_heap_snapshot();
  // @@protoc_insertion_point(field_mutable:grpcagent.ProfileArgs.heap_snapshot)
  return _msg;
}

inline bool ProfileArgs::has_args() const {
  return args_case() != ARGS_NOT_SET;
}
inline void ProfileArgs::clear_has_args() {
  _impl_._oneof_case_[0] = ARGS_NOT_SET;
}
inline ProfileArgs::ArgsCase ProfileArgs::args_case() const {
  return ProfileArgs::ArgsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CPUProfileArgs

// -------------------------------------------------------------------

// HeapProfileArgs

// bool track_allocations = 1;
inline void HeapProfileArgs::clear_track_allocations() {
  _impl_.track_allocations_ = false;
}
inline bool HeapProfileArgs::_internal_track_allocations() const {
  return _impl_.track_allocations_;
}
inline bool HeapProfileArgs::track_allocations() const {
  // @@protoc_insertion_point(field_get:grpcagent.HeapProfileArgs.track_allocations)
  return _internal_track_allocations();
}
inline void HeapProfileArgs::_internal_set_track_allocations(bool value) {
  
  _impl_.track_allocations_ = value;
}
inline void HeapProfileArgs::set_track_allocations(bool value) {
  _internal_set_track_allocations(value);
  // @@protoc_insertion_point(field_set:grpcagent.HeapProfileArgs.track_allocations)
}

// bool redacted = 2;
inline void HeapProfileArgs::clear_redacted() {
  _impl_.redacted_ = false;
}
inline bool HeapProfileArgs::_internal_redacted() const {
  return _impl_.redacted_;
}
inline bool HeapProfileArgs::redacted() const {
  // @@protoc_insertion_point(field_get:grpcagent.HeapProfileArgs.redacted)
  return _internal_redacted();
}
inline void HeapProfileArgs::_internal_set_redacted(bool value) {
  
  _impl_.redacted_ = value;
}
inline void HeapProfileArgs::set_redacted(bool value) {
  _internal_set_redacted(value);
  // @@protoc_insertion_point(field_set:grpcagent.HeapProfileArgs.redacted)
}

// -------------------------------------------------------------------

// HeapSamplingArgs

// uint64 sample_interval = 1;
inline void HeapSamplingArgs::clear_sample_interval() {
  _impl_.sample_interval_ = uint64_t{0u};
}
inline uint64_t HeapSamplingArgs::_internal_sample_interval() const {
  return _impl_.sample_interval_;
}
inline uint64_t HeapSamplingArgs::sample_interval() const {
  // @@protoc_insertion_point(field_get:grpcagent.HeapSamplingArgs.sample_interval)
  return _internal_sample_interval();
}
inline void HeapSamplingArgs::_internal_set_sample_interval(uint64_t value) {
  
  _impl_.sample_interval_ = value;
}
inline void HeapSamplingArgs::set_sample_interval(uint64_t value) {
  _internal_set_sample_interval(value);
  // @@protoc_insertion_point(field_set:grpcagent.HeapSamplingArgs.sample_interval)
}

// uint32 stack_depth = 2;
inline void HeapSamplingArgs::clear_stack_depth() {
  _impl_.stack_depth_ = 0u;
}
inline uint32_t HeapSamplingArgs::_internal_stack_depth() const {
  return _impl_.stack_depth_;
}
inline uint32_t HeapSamplingArgs::stack_depth() const {
  // @@protoc_insertion_point(field_get:grpcagent.HeapSamplingArgs.stack_depth)
  return _internal_stack_depth();
}
inline void HeapSamplingArgs::_internal_set_stack_depth(uint32_t value) {
  
  _impl_.stack_depth_ = value;
}
inline void HeapSamplingArgs::set_stack_depth(uint32_t value) {
  _internal_set_stack_depth(value);
  // @@protoc_insertion_point(field_set:grpcagent.HeapSamplingArgs.stack_depth)
}

// uint32 flags = 3;
inline void HeapSamplingArgs::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t HeapSamplingArgs::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t HeapSamplingArgs::flags() const {
  // @@protoc_insertion_point(field_get:grpcagent.HeapSamplingArgs.flags)
  return _internal_flags();
}
inline void HeapSamplingArgs::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void HeapSamplingArgs::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:grpcagent.HeapSamplingArgs.flags)
}

// -------------------------------------------------------------------

// HeapSnapshotArgs

// bool redacted = 1;
inline void HeapSnapshotArgs::clear_redacted() {
  _impl_.redacted_ = false;
}
inline bool HeapSnapshotArgs::_internal_redacted() const {
  return _impl_.redacted_;
}
inline bool HeapSnapshotArgs::redacted() const {
  // @@protoc_insertion_point(field_get:grpcagent.HeapSnapshotArgs.redacted)
  return _internal_redacted();
}
inline void HeapSnapshotArgs::_internal_set_redacted(bool value) {
  
  _impl_.redacted_ = value;
}
inline void HeapSnapshotArgs::set_redacted(bool value) {
  _internal_set_redacted(value);
  // @@protoc_insertion_point(field_set:grpcagent.HeapSnapshotArgs.redacted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_profile_2eproto
