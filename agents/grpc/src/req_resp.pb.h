// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: req_resp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_req_5fresp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_req_5fresp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "info.pb.h"
#include "packages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_req_5fresp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_req_5fresp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_req_5fresp_2eproto;
namespace grpcagent {
class RuntimeRequest;
struct RuntimeRequestDefaultTypeInternal;
extern RuntimeRequestDefaultTypeInternal _RuntimeRequest_default_instance_;
class RuntimeResponse;
struct RuntimeResponseDefaultTypeInternal;
extern RuntimeResponseDefaultTypeInternal _RuntimeResponse_default_instance_;
}  // namespace grpcagent
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcagent::RuntimeRequest* Arena::CreateMaybeMessage<::grpcagent::RuntimeRequest>(Arena*);
template<> ::grpcagent::RuntimeResponse* Arena::CreateMaybeMessage<::grpcagent::RuntimeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcagent {

// ===================================================================

class RuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.RuntimeRequest) */ {
 public:
  inline RuntimeRequest() : RuntimeRequest(nullptr) {}
  ~RuntimeRequest() override;
  explicit PROTOBUF_CONSTEXPR RuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeRequest(const RuntimeRequest& from);
  RuntimeRequest(RuntimeRequest&& from) noexcept
    : RuntimeRequest() {
    *this = ::std::move(from);
  }

  inline RuntimeRequest& operator=(const RuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeRequest& operator=(RuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const RuntimeRequest*>(
               &_RuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuntimeRequest& a, RuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeRequest& from) {
    RuntimeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.RuntimeRequest";
  }
  protected:
  explicit RuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kIdFieldNumber = 3,
    kCommandFieldNumber = 4,
    kVersionFieldNumber = 2,
  };
  // string requestId = 1;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string command = 4;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint32 version = 2;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcagent.RuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_req_5fresp_2eproto;
};
// -------------------------------------------------------------------

class RuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcagent.RuntimeResponse) */ {
 public:
  inline RuntimeResponse() : RuntimeResponse(nullptr) {}
  ~RuntimeResponse() override;
  explicit PROTOBUF_CONSTEXPR RuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeResponse(const RuntimeResponse& from);
  RuntimeResponse(RuntimeResponse&& from) noexcept
    : RuntimeResponse() {
    *this = ::std::move(from);
  }

  inline RuntimeResponse& operator=(const RuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeResponse& operator=(RuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseTypeCase {
    kInfoResponse = 1,
    kMetricsResponse = 2,
    RESPONSE_TYPE_NOT_SET = 0,
  };

  static inline const RuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const RuntimeResponse*>(
               &_RuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuntimeResponse& a, RuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeResponse& from) {
    RuntimeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcagent.RuntimeResponse";
  }
  protected:
  explicit RuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResponseFieldNumber = 1,
    kMetricsResponseFieldNumber = 2,
  };
  // .grpcagent.InfoResponse info_response = 1;
  bool has_info_response() const;
  private:
  bool _internal_has_info_response() const;
  public:
  void clear_info_response();
  const ::grpcagent::InfoResponse& info_response() const;
  PROTOBUF_NODISCARD ::grpcagent::InfoResponse* release_info_response();
  ::grpcagent::InfoResponse* mutable_info_response();
  void set_allocated_info_response(::grpcagent::InfoResponse* info_response);
  private:
  const ::grpcagent::InfoResponse& _internal_info_response() const;
  ::grpcagent::InfoResponse* _internal_mutable_info_response();
  public:
  void unsafe_arena_set_allocated_info_response(
      ::grpcagent::InfoResponse* info_response);
  ::grpcagent::InfoResponse* unsafe_arena_release_info_response();

  // .grpcagent.PackagesResponse metrics_response = 2;
  bool has_metrics_response() const;
  private:
  bool _internal_has_metrics_response() const;
  public:
  void clear_metrics_response();
  const ::grpcagent::PackagesResponse& metrics_response() const;
  PROTOBUF_NODISCARD ::grpcagent::PackagesResponse* release_metrics_response();
  ::grpcagent::PackagesResponse* mutable_metrics_response();
  void set_allocated_metrics_response(::grpcagent::PackagesResponse* metrics_response);
  private:
  const ::grpcagent::PackagesResponse& _internal_metrics_response() const;
  ::grpcagent::PackagesResponse* _internal_mutable_metrics_response();
  public:
  void unsafe_arena_set_allocated_metrics_response(
      ::grpcagent::PackagesResponse* metrics_response);
  ::grpcagent::PackagesResponse* unsafe_arena_release_metrics_response();

  void clear_response_type();
  ResponseTypeCase response_type_case() const;
  // @@protoc_insertion_point(class_scope:grpcagent.RuntimeResponse)
 private:
  class _Internal;
  void set_has_info_response();
  void set_has_metrics_response();

  inline bool has_response_type() const;
  inline void clear_has_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResponseTypeUnion {
      constexpr ResponseTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::grpcagent::InfoResponse* info_response_;
      ::grpcagent::PackagesResponse* metrics_response_;
    } response_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_req_5fresp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuntimeRequest

// string requestId = 1;
inline void RuntimeRequest::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RuntimeRequest::requestid() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeRequest::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.requestId)
}
inline std::string* RuntimeRequest::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeRequest.requestId)
  return _s;
}
inline const std::string& RuntimeRequest::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void RuntimeRequest::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeRequest::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeRequest::release_requestid() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void RuntimeRequest::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.RuntimeRequest.requestId)
}

// uint32 version = 2;
inline void RuntimeRequest::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t RuntimeRequest::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t RuntimeRequest::version() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.version)
  return _internal_version();
}
inline void RuntimeRequest::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void RuntimeRequest::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.version)
}

// string id = 3;
inline void RuntimeRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& RuntimeRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.id)
}
inline std::string* RuntimeRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeRequest.id)
  return _s;
}
inline const std::string& RuntimeRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RuntimeRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeRequest.id)
  return _impl_.id_.Release();
}
inline void RuntimeRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.RuntimeRequest.id)
}

// string command = 4;
inline void RuntimeRequest::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& RuntimeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeRequest::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcagent.RuntimeRequest.command)
}
inline std::string* RuntimeRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeRequest.command)
  return _s;
}
inline const std::string& RuntimeRequest::_internal_command() const {
  return _impl_.command_.Get();
}
inline void RuntimeRequest::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* RuntimeRequest::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* RuntimeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeRequest.command)
  return _impl_.command_.Release();
}
inline void RuntimeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcagent.RuntimeRequest.command)
}

// -------------------------------------------------------------------

// RuntimeResponse

// .grpcagent.InfoResponse info_response = 1;
inline bool RuntimeResponse::_internal_has_info_response() const {
  return response_type_case() == kInfoResponse;
}
inline bool RuntimeResponse::has_info_response() const {
  return _internal_has_info_response();
}
inline void RuntimeResponse::set_has_info_response() {
  _impl_._oneof_case_[0] = kInfoResponse;
}
inline ::grpcagent::InfoResponse* RuntimeResponse::release_info_response() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeResponse.info_response)
  if (_internal_has_info_response()) {
    clear_has_response_type();
    ::grpcagent::InfoResponse* temp = _impl_.response_type_.info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::InfoResponse& RuntimeResponse::_internal_info_response() const {
  return _internal_has_info_response()
      ? *_impl_.response_type_.info_response_
      : reinterpret_cast< ::grpcagent::InfoResponse&>(::grpcagent::_InfoResponse_default_instance_);
}
inline const ::grpcagent::InfoResponse& RuntimeResponse::info_response() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeResponse.info_response)
  return _internal_info_response();
}
inline ::grpcagent::InfoResponse* RuntimeResponse::unsafe_arena_release_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.RuntimeResponse.info_response)
  if (_internal_has_info_response()) {
    clear_has_response_type();
    ::grpcagent::InfoResponse* temp = _impl_.response_type_.info_response_;
    _impl_.response_type_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RuntimeResponse::unsafe_arena_set_allocated_info_response(::grpcagent::InfoResponse* info_response) {
  clear_response_type();
  if (info_response) {
    set_has_info_response();
    _impl_.response_type_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.RuntimeResponse.info_response)
}
inline ::grpcagent::InfoResponse* RuntimeResponse::_internal_mutable_info_response() {
  if (!_internal_has_info_response()) {
    clear_response_type();
    set_has_info_response();
    _impl_.response_type_.info_response_ = CreateMaybeMessage< ::grpcagent::InfoResponse >(GetArenaForAllocation());
  }
  return _impl_.response_type_.info_response_;
}
inline ::grpcagent::InfoResponse* RuntimeResponse::mutable_info_response() {
  ::grpcagent::InfoResponse* _msg = _internal_mutable_info_response();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeResponse.info_response)
  return _msg;
}

// .grpcagent.PackagesResponse metrics_response = 2;
inline bool RuntimeResponse::_internal_has_metrics_response() const {
  return response_type_case() == kMetricsResponse;
}
inline bool RuntimeResponse::has_metrics_response() const {
  return _internal_has_metrics_response();
}
inline void RuntimeResponse::set_has_metrics_response() {
  _impl_._oneof_case_[0] = kMetricsResponse;
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::release_metrics_response() {
  // @@protoc_insertion_point(field_release:grpcagent.RuntimeResponse.metrics_response)
  if (_internal_has_metrics_response()) {
    clear_has_response_type();
    ::grpcagent::PackagesResponse* temp = _impl_.response_type_.metrics_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_type_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpcagent::PackagesResponse& RuntimeResponse::_internal_metrics_response() const {
  return _internal_has_metrics_response()
      ? *_impl_.response_type_.metrics_response_
      : reinterpret_cast< ::grpcagent::PackagesResponse&>(::grpcagent::_PackagesResponse_default_instance_);
}
inline const ::grpcagent::PackagesResponse& RuntimeResponse::metrics_response() const {
  // @@protoc_insertion_point(field_get:grpcagent.RuntimeResponse.metrics_response)
  return _internal_metrics_response();
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::unsafe_arena_release_metrics_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpcagent.RuntimeResponse.metrics_response)
  if (_internal_has_metrics_response()) {
    clear_has_response_type();
    ::grpcagent::PackagesResponse* temp = _impl_.response_type_.metrics_response_;
    _impl_.response_type_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RuntimeResponse::unsafe_arena_set_allocated_metrics_response(::grpcagent::PackagesResponse* metrics_response) {
  clear_response_type();
  if (metrics_response) {
    set_has_metrics_response();
    _impl_.response_type_.metrics_response_ = metrics_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpcagent.RuntimeResponse.metrics_response)
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::_internal_mutable_metrics_response() {
  if (!_internal_has_metrics_response()) {
    clear_response_type();
    set_has_metrics_response();
    _impl_.response_type_.metrics_response_ = CreateMaybeMessage< ::grpcagent::PackagesResponse >(GetArenaForAllocation());
  }
  return _impl_.response_type_.metrics_response_;
}
inline ::grpcagent::PackagesResponse* RuntimeResponse::mutable_metrics_response() {
  ::grpcagent::PackagesResponse* _msg = _internal_mutable_metrics_response();
  // @@protoc_insertion_point(field_mutable:grpcagent.RuntimeResponse.metrics_response)
  return _msg;
}

inline bool RuntimeResponse::has_response_type() const {
  return response_type_case() != RESPONSE_TYPE_NOT_SET;
}
inline void RuntimeResponse::clear_has_response_type() {
  _impl_._oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}
inline RuntimeResponse::ResponseTypeCase RuntimeResponse::response_type_case() const {
  return RuntimeResponse::ResponseTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcagent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_req_5fresp_2eproto
